
nucleo-h7-setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c8c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005f58  08005f58  00015f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005f98  08005f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08005fb0  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006010  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  240000d0  08006070  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400027c  08006070  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137d8  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ffa  00000000  00000000  00033919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  00035918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000096e  00000000  00000000  00036548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032159  00000000  00000000  00036eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f423  00000000  00000000  0006900f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00145345  00000000  00000000  00078432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032ec  00000000  00000000  001bd778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001c0a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08005f40 	.word	0x08005f40

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	08005f40 	.word	0x08005f40

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fd49 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f875 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f983 	bl	8000920 <MX_GPIO_Init>
  MX_ETH_Init();
 800061a:	f000 f8e1 	bl	80007e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800061e:	f000 f92b 	bl	8000878 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000622:	f000 f975 	bl	8000910 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t last_toggle_time = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
  uint32_t blink_interval = 200;
 800062a:	23c8      	movs	r3, #200	; 0xc8
 800062c:	603b      	str	r3, [r7, #0]

  while (1) {

      switch (mode) {
 800062e:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <main+0xe4>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b02      	cmp	r3, #2
 8000636:	d02e      	beq.n	8000696 <main+0x8e>
 8000638:	2b02      	cmp	r3, #2
 800063a:	dc2f      	bgt.n	800069c <main+0x94>
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <main+0x3e>
 8000640:	2b01      	cmp	r3, #1
 8000642:	d014      	beq.n	800066e <main+0x66>
 8000644:	e02a      	b.n	800069c <main+0x94>
          case 0:
              blink_interval = 200;
 8000646:	23c8      	movs	r3, #200	; 0xc8
 8000648:	603b      	str	r3, [r7, #0]
        	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000650:	4827      	ldr	r0, [pc, #156]	; (80006f0 <main+0xe8>)
 8000652:	f001 fcb9 	bl	8001fc8 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065c:	4825      	ldr	r0, [pc, #148]	; (80006f4 <main+0xec>)
 800065e:	f001 fcb3 	bl	8001fc8 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	4824      	ldr	r0, [pc, #144]	; (80006f8 <main+0xf0>)
 8000668:	f001 fcae 	bl	8001fc8 <HAL_GPIO_WritePin>
              break;
 800066c:	e016      	b.n	800069c <main+0x94>
          case 1:
              blink_interval = 100;
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	603b      	str	r3, [r7, #0]
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000678:	481d      	ldr	r0, [pc, #116]	; (80006f0 <main+0xe8>)
 800067a:	f001 fca5 	bl	8001fc8 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000684:	481b      	ldr	r0, [pc, #108]	; (80006f4 <main+0xec>)
 8000686:	f001 fc9f 	bl	8001fc8 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	481a      	ldr	r0, [pc, #104]	; (80006f8 <main+0xf0>)
 8000690:	f001 fc9a 	bl	8001fc8 <HAL_GPIO_WritePin>
              break;
 8000694:	e002      	b.n	800069c <main+0x94>
          case 2:
              blink_interval = 50;
 8000696:	2332      	movs	r3, #50	; 0x32
 8000698:	603b      	str	r3, [r7, #0]
              break;
 800069a:	bf00      	nop
      }

      if (HAL_GetTick() - last_toggle_time >= blink_interval) {
 800069c:	f000 fd88 	bl	80011b0 <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8c0      	bhi.n	800062e <main+0x26>
              last_toggle_time = HAL_GetTick();
 80006ac:	f000 fd80 	bl	80011b0 <HAL_GetTick>
 80006b0:	6078      	str	r0, [r7, #4]

              switch (mode) {
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <main+0xe4>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d011      	beq.n	80006e0 <main+0xd8>
 80006bc:	2b02      	cmp	r3, #2
 80006be:	dcb6      	bgt.n	800062e <main+0x26>
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d002      	beq.n	80006ca <main+0xc2>
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d005      	beq.n	80006d4 <main+0xcc>
 80006c8:	e00f      	b.n	80006ea <main+0xe2>
                  case 0:
                      HAL_GPIO_TogglePin(GPIOB, LED_GREEN_Pin);
 80006ca:	2101      	movs	r1, #1
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <main+0xec>)
 80006ce:	f001 fc94 	bl	8001ffa <HAL_GPIO_TogglePin>
                      break;
 80006d2:	e00a      	b.n	80006ea <main+0xe2>
                  case 1:
                      HAL_GPIO_TogglePin(GPIOB, LED_RED_Pin);
 80006d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d8:	4806      	ldr	r0, [pc, #24]	; (80006f4 <main+0xec>)
 80006da:	f001 fc8e 	bl	8001ffa <HAL_GPIO_TogglePin>
                      break;
 80006de:	e004      	b.n	80006ea <main+0xe2>
                  case 2:
                      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80006e0:	2102      	movs	r1, #2
 80006e2:	4806      	ldr	r0, [pc, #24]	; (80006fc <main+0xf4>)
 80006e4:	f001 fc89 	bl	8001ffa <HAL_GPIO_TogglePin>
                      break;
 80006e8:	bf00      	nop
      switch (mode) {
 80006ea:	e7a0      	b.n	800062e <main+0x26>
 80006ec:	24000268 	.word	0x24000268
 80006f0:	58020c00 	.word	0x58020c00
 80006f4:	58020400 	.word	0x58020400
 80006f8:	58020800 	.word	0x58020800
 80006fc:	58021000 	.word	0x58021000

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b09c      	sub	sp, #112	; 0x70
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070a:	224c      	movs	r2, #76	; 0x4c
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f005 fbea 	bl	8005ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2220      	movs	r2, #32
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f005 fbe4 	bl	8005ee8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000720:	2002      	movs	r0, #2
 8000722:	f001 fc9f 	bl	8002064 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <SystemClock_Config+0xdc>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	4a2b      	ldr	r2, [pc, #172]	; (80007dc <SystemClock_Config+0xdc>)
 8000730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000734:	6193      	str	r3, [r2, #24]
 8000736:	4b29      	ldr	r3, [pc, #164]	; (80007dc <SystemClock_Config+0xdc>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000742:	bf00      	nop
 8000744:	4b25      	ldr	r3, [pc, #148]	; (80007dc <SystemClock_Config+0xdc>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800074c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000750:	d1f8      	bne.n	8000744 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000752:	2321      	movs	r3, #33	; 0x21
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000756:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000764:	2302      	movs	r3, #2
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800076c:	f240 1313 	movw	r3, #275	; 0x113
 8000770:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000776:	2304      	movs	r3, #4
 8000778:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800077e:	2304      	movs	r3, #4
 8000780:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000782:	2300      	movs	r3, #0
 8000784:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fca2 	bl	80020d8 <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800079a:	f000 fa57 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	233f      	movs	r3, #63	; 0x3f
 80007a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2303      	movs	r3, #3
 80007a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007aa:	2308      	movs	r3, #8
 80007ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ae:	2340      	movs	r3, #64	; 0x40
 80007b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007b2:	2340      	movs	r3, #64	; 0x40
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2103      	movs	r1, #3
 80007c4:	4618      	mov	r0, r3
 80007c6:	f002 f861 	bl	800288c <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007d0:	f000 fa3c 	bl	8000c4c <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3770      	adds	r7, #112	; 0x70
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	58024800 	.word	0x58024800

080007e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_ETH_Init+0x80>)
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <MX_ETH_Init+0x84>)
 80007e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ETH_Init+0x88>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_ETH_Init+0x88>)
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_ETH_Init+0x88>)
 80007f8:	22e1      	movs	r2, #225	; 0xe1
 80007fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ETH_Init+0x88>)
 80007fe:	2200      	movs	r2, #0
 8000800:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_ETH_Init+0x88>)
 8000804:	2200      	movs	r2, #0
 8000806:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_ETH_Init+0x88>)
 800080a:	2200      	movs	r2, #0
 800080c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_ETH_Init+0x80>)
 8000810:	4a15      	ldr	r2, [pc, #84]	; (8000868 <MX_ETH_Init+0x88>)
 8000812:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_ETH_Init+0x80>)
 8000816:	2201      	movs	r2, #1
 8000818:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_ETH_Init+0x80>)
 800081c:	4a13      	ldr	r2, [pc, #76]	; (800086c <MX_ETH_Init+0x8c>)
 800081e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_ETH_Init+0x80>)
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <MX_ETH_Init+0x90>)
 8000824:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_ETH_Init+0x80>)
 8000828:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800082c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_ETH_Init+0x80>)
 8000830:	f000 fdee 	bl	8001410 <HAL_ETH_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800083a:	f000 fa07 	bl	8000c4c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800083e:	2238      	movs	r2, #56	; 0x38
 8000840:	2100      	movs	r1, #0
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_ETH_Init+0x94>)
 8000844:	f005 fb50 	bl	8005ee8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_ETH_Init+0x94>)
 800084a:	2221      	movs	r2, #33	; 0x21
 800084c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_ETH_Init+0x94>)
 8000850:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000854:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_ETH_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	24000124 	.word	0x24000124
 8000864:	40028000 	.word	0x40028000
 8000868:	2400026c 	.word	0x2400026c
 800086c:	24000070 	.word	0x24000070
 8000870:	24000010 	.word	0x24000010
 8000874:	240000ec 	.word	0x240000ec

08000878 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <MX_USART3_UART_Init+0x90>)
 800087e:	4a23      	ldr	r2, [pc, #140]	; (800090c <MX_USART3_UART_Init+0x94>)
 8000880:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <MX_USART3_UART_Init+0x90>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_USART3_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_USART3_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_USART3_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_USART3_UART_Init+0x90>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c0:	4811      	ldr	r0, [pc, #68]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008c2:	f004 f931 	bl	8004b28 <HAL_UART_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008cc:	f000 f9be 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d0:	2100      	movs	r1, #0
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008d4:	f005 fa3d 	bl	8005d52 <HAL_UARTEx_SetTxFifoThreshold>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008de:	f000 f9b5 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4808      	ldr	r0, [pc, #32]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008e6:	f005 fa72 	bl	8005dce <HAL_UARTEx_SetRxFifoThreshold>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008f0:	f000 f9ac 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008f6:	f005 f9f3 	bl	8005ce0 <HAL_UARTEx_DisableFifoMode>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000900:	f000 f9a4 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	240001d4 	.word	0x240001d4
 800090c:	40004800 	.word	0x40004800

08000910 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08e      	sub	sp, #56	; 0x38
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b9a      	ldr	r3, [pc, #616]	; (8000ba0 <MX_GPIO_Init+0x280>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	4a98      	ldr	r2, [pc, #608]	; (8000ba0 <MX_GPIO_Init+0x280>)
 800093e:	f043 0304 	orr.w	r3, r3, #4
 8000942:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000946:	4b96      	ldr	r3, [pc, #600]	; (8000ba0 <MX_GPIO_Init+0x280>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	623b      	str	r3, [r7, #32]
 8000952:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000954:	4b92      	ldr	r3, [pc, #584]	; (8000ba0 <MX_GPIO_Init+0x280>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095a:	4a91      	ldr	r2, [pc, #580]	; (8000ba0 <MX_GPIO_Init+0x280>)
 800095c:	f043 0320 	orr.w	r3, r3, #32
 8000960:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000964:	4b8e      	ldr	r3, [pc, #568]	; (8000ba0 <MX_GPIO_Init+0x280>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	61fb      	str	r3, [r7, #28]
 8000970:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	4b8b      	ldr	r3, [pc, #556]	; (8000ba0 <MX_GPIO_Init+0x280>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	4a89      	ldr	r2, [pc, #548]	; (8000ba0 <MX_GPIO_Init+0x280>)
 800097a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000982:	4b87      	ldr	r3, [pc, #540]	; (8000ba0 <MX_GPIO_Init+0x280>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4b83      	ldr	r3, [pc, #524]	; (8000ba0 <MX_GPIO_Init+0x280>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000996:	4a82      	ldr	r2, [pc, #520]	; (8000ba0 <MX_GPIO_Init+0x280>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a0:	4b7f      	ldr	r3, [pc, #508]	; (8000ba0 <MX_GPIO_Init+0x280>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b7c      	ldr	r3, [pc, #496]	; (8000ba0 <MX_GPIO_Init+0x280>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	4a7a      	ldr	r2, [pc, #488]	; (8000ba0 <MX_GPIO_Init+0x280>)
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009be:	4b78      	ldr	r3, [pc, #480]	; (8000ba0 <MX_GPIO_Init+0x280>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009cc:	4b74      	ldr	r3, [pc, #464]	; (8000ba0 <MX_GPIO_Init+0x280>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	4a73      	ldr	r2, [pc, #460]	; (8000ba0 <MX_GPIO_Init+0x280>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009dc:	4b70      	ldr	r3, [pc, #448]	; (8000ba0 <MX_GPIO_Init+0x280>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ea:	4b6d      	ldr	r3, [pc, #436]	; (8000ba0 <MX_GPIO_Init+0x280>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	4a6b      	ldr	r2, [pc, #428]	; (8000ba0 <MX_GPIO_Init+0x280>)
 80009f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fa:	4b69      	ldr	r3, [pc, #420]	; (8000ba0 <MX_GPIO_Init+0x280>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a08:	4b65      	ldr	r3, [pc, #404]	; (8000ba0 <MX_GPIO_Init+0x280>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0e:	4a64      	ldr	r2, [pc, #400]	; (8000ba0 <MX_GPIO_Init+0x280>)
 8000a10:	f043 0310 	orr.w	r3, r3, #16
 8000a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a18:	4b61      	ldr	r3, [pc, #388]	; (8000ba0 <MX_GPIO_Init+0x280>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	f003 0310 	and.w	r3, r3, #16
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2108      	movs	r1, #8
 8000a2a:	485e      	ldr	r0, [pc, #376]	; (8000ba4 <MX_GPIO_Init+0x284>)
 8000a2c:	f001 facc 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f248 0110 	movw	r1, #32784	; 0x8010
 8000a36:	485c      	ldr	r0, [pc, #368]	; (8000ba8 <MX_GPIO_Init+0x288>)
 8000a38:	f001 fac6 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|GPIO_PIN_12|LED_RED_Pin|GPIO_PIN_15
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f24d 3121 	movw	r1, #54049	; 0xd321
 8000a42:	485a      	ldr	r0, [pc, #360]	; (8000bac <MX_GPIO_Init+0x28c>)
 8000a44:	f001 fac0 	bl	8001fc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8000a4e:	4858      	ldr	r0, [pc, #352]	; (8000bb0 <MX_GPIO_Init+0x290>)
 8000a50:	f001 faba 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	21c0      	movs	r1, #192	; 0xc0
 8000a58:	4856      	ldr	r0, [pc, #344]	; (8000bb4 <MX_GPIO_Init+0x294>)
 8000a5a:	f001 fab5 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2102      	movs	r1, #2
 8000a62:	4855      	ldr	r0, [pc, #340]	; (8000bb8 <MX_GPIO_Init+0x298>)
 8000a64:	f001 fab0 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	484d      	ldr	r0, [pc, #308]	; (8000bb4 <MX_GPIO_Init+0x294>)
 8000a80:	f001 f8fa 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a84:	2308      	movs	r3, #8
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4842      	ldr	r0, [pc, #264]	; (8000ba4 <MX_GPIO_Init+0x284>)
 8000a9c:	f001 f8ec 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000aa0:	f248 0310 	movw	r3, #32784	; 0x8010
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	483b      	ldr	r0, [pc, #236]	; (8000ba8 <MX_GPIO_Init+0x288>)
 8000aba:	f001 f8dd 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PB12 LED_RED_Pin PB15
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_12|LED_RED_Pin|GPIO_PIN_15
 8000abe:	f24d 3321 	movw	r3, #54049	; 0xd321
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4835      	ldr	r0, [pc, #212]	; (8000bac <MX_GPIO_Init+0x28c>)
 8000ad8:	f001 f8ce 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD14 PD15 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8000adc:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	482e      	ldr	r0, [pc, #184]	; (8000bb0 <MX_GPIO_Init+0x290>)
 8000af6:	f001 f8bf 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	482b      	ldr	r0, [pc, #172]	; (8000bbc <MX_GPIO_Init+0x29c>)
 8000b10:	f001 f8b2 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b14:	23c0      	movs	r3, #192	; 0xc0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4822      	ldr	r0, [pc, #136]	; (8000bb4 <MX_GPIO_Init+0x294>)
 8000b2c:	f001 f8a4 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b42:	4619      	mov	r1, r3
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <MX_GPIO_Init+0x288>)
 8000b46:	f001 f897 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b5c:	230a      	movs	r3, #10
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	4619      	mov	r1, r3
 8000b66:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <MX_GPIO_Init+0x288>)
 8000b68:	f001 f886 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <MX_GPIO_Init+0x298>)
 8000b84:	f001 f878 	bl	8001c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2028      	movs	r0, #40	; 0x28
 8000b8e:	f000 fc0a 	bl	80013a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b92:	2028      	movs	r0, #40	; 0x28
 8000b94:	f000 fc21 	bl	80013da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b98:	bf00      	nop
 8000b9a:	3738      	adds	r7, #56	; 0x38
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	58024400 	.word	0x58024400
 8000ba4:	58021400 	.word	0x58021400
 8000ba8:	58020000 	.word	0x58020000
 8000bac:	58020400 	.word	0x58020400
 8000bb0:	58020c00 	.word	0x58020c00
 8000bb4:	58020800 	.word	0x58020800
 8000bb8:	58021000 	.word	0x58021000
 8000bbc:	58021800 	.word	0x58021800

08000bc0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_press = 0;
	if(GPIO_Pin == GPIO_PIN_13) {
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bd0:	d12d      	bne.n	8000c2e <HAL_GPIO_EXTI_Callback+0x6e>
	  if(HAL_GetTick() - last_press > 200) {
 8000bd2:	f000 faed 	bl	80011b0 <HAL_GetTick>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x78>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2bc8      	cmp	r3, #200	; 0xc8
 8000be0:	d926      	bls.n	8000c30 <HAL_GPIO_EXTI_Callback+0x70>
		  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2101      	movs	r1, #1
 8000be6:	4815      	ldr	r0, [pc, #84]	; (8000c3c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000be8:	f001 f9ee 	bl	8001fc8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000bf4:	f001 f9e8 	bl	8001fc8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4810      	ldr	r0, [pc, #64]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x80>)
 8000bfe:	f001 f9e3 	bl	8001fc8 <HAL_GPIO_WritePin>
		  mode = (mode + 1) % 3;
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x84>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	1c5a      	adds	r2, r3, #1
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x88>)
 8000c0c:	fb83 3102 	smull	r3, r1, r3, r2
 8000c10:	17d3      	asrs	r3, r2, #31
 8000c12:	1ac9      	subs	r1, r1, r3
 8000c14:	460b      	mov	r3, r1
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	440b      	add	r3, r1
 8000c1a:	1ad1      	subs	r1, r2, r3
 8000c1c:	b2ca      	uxtb	r2, r1
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x84>)
 8000c20:	701a      	strb	r2, [r3, #0]
		  last_press = HAL_GetTick();
 8000c22:	f000 fac5 	bl	80011b0 <HAL_GetTick>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a03      	ldr	r2, [pc, #12]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x78>)
 8000c2a:	6013      	str	r3, [r2, #0]
	  }

  } else {
      __NOP();
  }
}
 8000c2c:	e000      	b.n	8000c30 <HAL_GPIO_EXTI_Callback+0x70>
      __NOP();
 8000c2e:	bf00      	nop
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	24000274 	.word	0x24000274
 8000c3c:	58020400 	.word	0x58020400
 8000c40:	58021000 	.word	0x58021000
 8000c44:	24000268 	.word	0x24000268
 8000c48:	55555556 	.word	0x55555556

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_MspInit+0x30>)
 8000c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c64:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_MspInit+0x30>)
 8000c66:	f043 0302 	orr.w	r3, r3, #2
 8000c6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_MspInit+0x30>)
 8000c70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	58024400 	.word	0x58024400

08000c8c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a59      	ldr	r2, [pc, #356]	; (8000e10 <HAL_ETH_MspInit+0x184>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	f040 80ab 	bne.w	8000e06 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000cb0:	4b58      	ldr	r3, [pc, #352]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000cb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cb6:	4a57      	ldr	r2, [pc, #348]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cc0:	4b54      	ldr	r3, [pc, #336]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000cc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cca:	623b      	str	r3, [r7, #32]
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000cce:	4b51      	ldr	r3, [pc, #324]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000cd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd4:	4a4f      	ldr	r2, [pc, #316]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cda:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cde:	4b4d      	ldr	r3, [pc, #308]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000ce0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000cec:	4b49      	ldr	r3, [pc, #292]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000cee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf2:	4a48      	ldr	r2, [pc, #288]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfc:	4b45      	ldr	r3, [pc, #276]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000cfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	61bb      	str	r3, [r7, #24]
 8000d08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	4a40      	ldr	r2, [pc, #256]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1a:	4b3e      	ldr	r3, [pc, #248]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b3a      	ldr	r3, [pc, #232]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	4a39      	ldr	r2, [pc, #228]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d38:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	4a31      	ldr	r2, [pc, #196]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000d4e:	f043 0302 	orr.w	r3, r3, #2
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d56:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d64:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	4a2a      	ldr	r2, [pc, #168]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d74:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <HAL_ETH_MspInit+0x188>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d82:	2332      	movs	r3, #50	; 0x32
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d92:	230b      	movs	r3, #11
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	481e      	ldr	r0, [pc, #120]	; (8000e18 <HAL_ETH_MspInit+0x18c>)
 8000d9e:	f000 ff6b 	bl	8001c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000da2:	2386      	movs	r3, #134	; 0x86
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db2:	230b      	movs	r3, #11
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4817      	ldr	r0, [pc, #92]	; (8000e1c <HAL_ETH_MspInit+0x190>)
 8000dbe:	f000 ff5b 	bl	8001c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000dc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd4:	230b      	movs	r3, #11
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4810      	ldr	r0, [pc, #64]	; (8000e20 <HAL_ETH_MspInit+0x194>)
 8000de0:	f000 ff4a 	bl	8001c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000de4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df6:	230b      	movs	r3, #11
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4808      	ldr	r0, [pc, #32]	; (8000e24 <HAL_ETH_MspInit+0x198>)
 8000e02:	f000 ff39 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3738      	adds	r7, #56	; 0x38
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40028000 	.word	0x40028000
 8000e14:	58024400 	.word	0x58024400
 8000e18:	58020800 	.word	0x58020800
 8000e1c:	58020000 	.word	0x58020000
 8000e20:	58020400 	.word	0x58020400
 8000e24:	58021800 	.word	0x58021800

08000e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0b8      	sub	sp, #224	; 0xe0
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	22b8      	movs	r2, #184	; 0xb8
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f005 f84d 	bl	8005ee8 <memset>
  if(huart->Instance==USART3)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a27      	ldr	r2, [pc, #156]	; (8000ef0 <HAL_UART_MspInit+0xc8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d146      	bne.n	8000ee6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e58:	f04f 0202 	mov.w	r2, #2
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 f898 	bl	8002fa4 <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e7a:	f7ff fee7 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <HAL_UART_MspInit+0xcc>)
 8000e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e84:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <HAL_UART_MspInit+0xcc>)
 8000e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_UART_MspInit+0xcc>)
 8000e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_UART_MspInit+0xcc>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <HAL_UART_MspInit+0xcc>)
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_UART_MspInit+0xcc>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000eba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ebe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <HAL_UART_MspInit+0xd0>)
 8000ee2:	f000 fec9 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	37e0      	adds	r7, #224	; 0xe0
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40004800 	.word	0x40004800
 8000ef4:	58024400 	.word	0x58024400
 8000ef8:	58020c00 	.word	0x58020c00

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f91e 	bl	8001188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin);
 8000f54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f58:	f001 f869 	bl	800202e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <SystemInit+0xd0>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6a:	4a31      	ldr	r2, [pc, #196]	; (8001030 <SystemInit+0xd0>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f74:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <SystemInit+0xd4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 030f 	and.w	r3, r3, #15
 8000f7c:	2b06      	cmp	r3, #6
 8000f7e:	d807      	bhi.n	8000f90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f80:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <SystemInit+0xd4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f023 030f 	bic.w	r3, r3, #15
 8000f88:	4a2a      	ldr	r2, [pc, #168]	; (8001034 <SystemInit+0xd4>)
 8000f8a:	f043 0307 	orr.w	r3, r3, #7
 8000f8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f90:	4b29      	ldr	r3, [pc, #164]	; (8001038 <SystemInit+0xd8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a28      	ldr	r2, [pc, #160]	; (8001038 <SystemInit+0xd8>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f9c:	4b26      	ldr	r3, [pc, #152]	; (8001038 <SystemInit+0xd8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <SystemInit+0xd8>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4924      	ldr	r1, [pc, #144]	; (8001038 <SystemInit+0xd8>)
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <SystemInit+0xdc>)
 8000faa:	4013      	ands	r3, r2
 8000fac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <SystemInit+0xd4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d007      	beq.n	8000fca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fba:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <SystemInit+0xd4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f023 030f 	bic.w	r3, r3, #15
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <SystemInit+0xd4>)
 8000fc4:	f043 0307 	orr.w	r3, r3, #7
 8000fc8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <SystemInit+0xd8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <SystemInit+0xd8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <SystemInit+0xd8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <SystemInit+0xd8>)
 8000fde:	4a18      	ldr	r2, [pc, #96]	; (8001040 <SystemInit+0xe0>)
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <SystemInit+0xd8>)
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <SystemInit+0xe4>)
 8000fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <SystemInit+0xd8>)
 8000fea:	4a17      	ldr	r2, [pc, #92]	; (8001048 <SystemInit+0xe8>)
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <SystemInit+0xd8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <SystemInit+0xd8>)
 8000ff6:	4a14      	ldr	r2, [pc, #80]	; (8001048 <SystemInit+0xe8>)
 8000ff8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <SystemInit+0xd8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <SystemInit+0xd8>)
 8001002:	4a11      	ldr	r2, [pc, #68]	; (8001048 <SystemInit+0xe8>)
 8001004:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <SystemInit+0xd8>)
 8001008:	2200      	movs	r2, #0
 800100a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <SystemInit+0xd8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a09      	ldr	r2, [pc, #36]	; (8001038 <SystemInit+0xd8>)
 8001012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001016:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <SystemInit+0xd8>)
 800101a:	2200      	movs	r2, #0
 800101c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <SystemInit+0xec>)
 8001020:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001024:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00
 8001034:	52002000 	.word	0x52002000
 8001038:	58024400 	.word	0x58024400
 800103c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001040:	02020200 	.word	0x02020200
 8001044:	01ff0000 	.word	0x01ff0000
 8001048:	01010280 	.word	0x01010280
 800104c:	52004000 	.word	0x52004000

08001050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001088 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001054:	f7ff ff84 	bl	8000f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800105a:	490d      	ldr	r1, [pc, #52]	; (8001090 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001070:	4c0a      	ldr	r4, [pc, #40]	; (800109c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107e:	f004 ff3b 	bl	8005ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001082:	f7ff fac1 	bl	8000608 <main>
  bx  lr
 8001086:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001088:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800108c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001090:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001094:	08005fa0 	.word	0x08005fa0
  ldr r2, =_sbss
 8001098:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800109c:	2400027c 	.word	0x2400027c

080010a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC3_IRQHandler>
	...

080010a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010aa:	2003      	movs	r0, #3
 80010ac:	f000 f970 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010b0:	f001 fda2 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 80010b4:	4602      	mov	r2, r0
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_Init+0x68>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	f003 030f 	and.w	r3, r3, #15
 80010c0:	4913      	ldr	r1, [pc, #76]	; (8001110 <HAL_Init+0x6c>)
 80010c2:	5ccb      	ldrb	r3, [r1, r3]
 80010c4:	f003 031f 	and.w	r3, r3, #31
 80010c8:	fa22 f303 	lsr.w	r3, r2, r3
 80010cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <HAL_Init+0x68>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <HAL_Init+0x6c>)
 80010d8:	5cd3      	ldrb	r3, [r2, r3]
 80010da:	f003 031f 	and.w	r3, r3, #31
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	fa22 f303 	lsr.w	r3, r2, r3
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_Init+0x70>)
 80010e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_Init+0x74>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ee:	2000      	movs	r0, #0
 80010f0:	f000 f814 	bl	800111c <HAL_InitTick>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e002      	b.n	8001104 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010fe:	f7ff fdab 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	58024400 	.word	0x58024400
 8001110:	08005f58 	.word	0x08005f58
 8001114:	24000004 	.word	0x24000004
 8001118:	24000000 	.word	0x24000000

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_InitTick+0x60>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e021      	b.n	8001174 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_InitTick+0x64>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_InitTick+0x60>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f955 	bl	80013f6 <HAL_SYSTICK_Config>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e00e      	b.n	8001174 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b0f      	cmp	r3, #15
 800115a:	d80a      	bhi.n	8001172 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115c:	2200      	movs	r2, #0
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001164:	f000 f91f 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_InitTick+0x68>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e000      	b.n	8001174 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2400000c 	.word	0x2400000c
 8001180:	24000000 	.word	0x24000000
 8001184:	24000008 	.word	0x24000008

08001188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x20>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x24>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_IncTick+0x24>)
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	2400000c 	.word	0x2400000c
 80011ac:	24000278 	.word	0x24000278

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	24000278 	.word	0x24000278

080011c8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80011d8:	4904      	ldr	r1, [pc, #16]	; (80011ec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4313      	orrs	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	58000400 	.word	0x58000400

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <__NVIC_SetPriorityGrouping+0x40>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	4313      	orrs	r3, r2
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x40>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00
 8001234:	05fa0000 	.word	0x05fa0000

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4907      	ldr	r1, [pc, #28]	; (800128c <__NVIC_EnableIRQ+0x38>)
 800126e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000e100 	.word	0xe000e100

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001370:	f7ff ff8e 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff29 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff40 	bl	8001238 <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff90 	bl	80012e4 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5f 	bl	8001290 <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff33 	bl	8001254 <__NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffa4 	bl	800134c <SysTick_Config>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e0e3      	b.n	80015ea <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001428:	2b00      	cmp	r3, #0
 800142a:	d106      	bne.n	800143a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2223      	movs	r2, #35	; 0x23
 8001430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fc29 	bl	8000c8c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b6e      	ldr	r3, [pc, #440]	; (80015f4 <HAL_ETH_Init+0x1e4>)
 800143c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001440:	4a6c      	ldr	r2, [pc, #432]	; (80015f4 <HAL_ETH_Init+0x1e4>)
 8001442:	f043 0302 	orr.w	r3, r3, #2
 8001446:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800144a:	4b6a      	ldr	r3, [pc, #424]	; (80015f4 <HAL_ETH_Init+0x1e4>)
 800144c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7a1b      	ldrb	r3, [r3, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff feb1 	bl	80011c8 <HAL_SYSCFG_ETHInterfaceSelect>
 8001466:	e003      	b.n	8001470 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001468:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800146c:	f7ff feac 	bl	80011c8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001470:	4b61      	ldr	r3, [pc, #388]	; (80015f8 <HAL_ETH_Init+0x1e8>)
 8001472:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800148a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800148c:	f7ff fe90 	bl	80011b0 <HAL_GetTick>
 8001490:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001492:	e011      	b.n	80014b8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001494:	f7ff fe8c 	bl	80011b0 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014a2:	d909      	bls.n	80014b8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2204      	movs	r2, #4
 80014a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	22e0      	movs	r2, #224	; 0xe0
 80014b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e098      	b.n	80015ea <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1e4      	bne.n	8001494 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f89e 	bl	800160c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80014d0:	f001 fd0c 	bl	8002eec <HAL_RCC_GetHCLKFreq>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a49      	ldr	r2, [pc, #292]	; (80015fc <HAL_ETH_Init+0x1ec>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	0c9a      	lsrs	r2, r3, #18
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3a01      	subs	r2, #1
 80014e4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fa81 	bl	80019f0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80014fa:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001506:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800150a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d009      	beq.n	800152e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	22e0      	movs	r2, #224	; 0xe0
 8001526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e05d      	b.n	80015ea <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001536:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <HAL_ETH_Init+0x1f0>)
 800153c:	4013      	ands	r3, r2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6952      	ldr	r2, [r2, #20]
 8001542:	0051      	lsls	r1, r2, #1
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	430b      	orrs	r3, r1
 800154a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800154e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 fae9 	bl	8001b2a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 fb2f 	bl	8001bbc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	3305      	adds	r3, #5
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	021a      	lsls	r2, r3, #8
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	3304      	adds	r3, #4
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	3303      	adds	r3, #3
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	061a      	lsls	r2, r3, #24
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	3302      	adds	r3, #2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	041b      	lsls	r3, r3, #16
 8001590:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	3301      	adds	r3, #1
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800159c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015aa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_ETH_Init+0x1f4>)
 80015be:	430b      	orrs	r3, r1
 80015c0:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_ETH_Init+0x1f8>)
 80015d2:	430b      	orrs	r3, r1
 80015d4:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2210      	movs	r2, #16
 80015e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	58024400 	.word	0x58024400
 80015f8:	58000400 	.word	0x58000400
 80015fc:	431bde83 	.word	0x431bde83
 8001600:	ffff8001 	.word	0xffff8001
 8001604:	0c020060 	.word	0x0c020060
 8001608:	0c20c000 	.word	0x0c20c000

0800160c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800161c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001624:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001626:	f001 fc61 	bl	8002eec <HAL_RCC_GetHCLKFreq>
 800162a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d804      	bhi.n	800163e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	e022      	b.n	8001684 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	4a16      	ldr	r2, [pc, #88]	; (800169c <HAL_ETH_SetMDIOClockRange+0x90>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d204      	bcs.n	8001650 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	e019      	b.n	8001684 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d915      	bls.n	8001684 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d804      	bhi.n	800166a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	e00c      	b.n	8001684 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d804      	bhi.n	800167c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	e003      	b.n	8001684 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001682:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	02160ebf 	.word	0x02160ebf
 800169c:	03938700 	.word	0x03938700
 80016a0:	05f5e0ff 	.word	0x05f5e0ff
 80016a4:	08f0d17f 	.word	0x08f0d17f
 80016a8:	0ee6b27f 	.word	0x0ee6b27f

080016ac <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80016be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	791b      	ldrb	r3, [r3, #4]
 80016c4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80016c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	7b1b      	ldrb	r3, [r3, #12]
 80016cc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80016ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	7b5b      	ldrb	r3, [r3, #13]
 80016d4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	7b9b      	ldrb	r3, [r3, #14]
 80016dc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80016de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	7bdb      	ldrb	r3, [r3, #15]
 80016e4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	7c12      	ldrb	r2, [r2, #16]
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	d102      	bne.n	80016f6 <ETH_SetMACConfig+0x4a>
 80016f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016f4:	e000      	b.n	80016f8 <ETH_SetMACConfig+0x4c>
 80016f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80016f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	7c52      	ldrb	r2, [r2, #17]
 80016fe:	2a00      	cmp	r2, #0
 8001700:	d102      	bne.n	8001708 <ETH_SetMACConfig+0x5c>
 8001702:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001706:	e000      	b.n	800170a <ETH_SetMACConfig+0x5e>
 8001708:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800170a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	7c9b      	ldrb	r3, [r3, #18]
 8001710:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001712:	431a      	orrs	r2, r3
               macconf->Speed |
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001718:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800171e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	7f1b      	ldrb	r3, [r3, #28]
 8001724:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001726:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	7f5b      	ldrb	r3, [r3, #29]
 800172c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800172e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	7f92      	ldrb	r2, [r2, #30]
 8001734:	2a00      	cmp	r2, #0
 8001736:	d102      	bne.n	800173e <ETH_SetMACConfig+0x92>
 8001738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800173c:	e000      	b.n	8001740 <ETH_SetMACConfig+0x94>
 800173e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001740:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	7fdb      	ldrb	r3, [r3, #31]
 8001746:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001748:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001750:	2a00      	cmp	r2, #0
 8001752:	d102      	bne.n	800175a <ETH_SetMACConfig+0xae>
 8001754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001758:	e000      	b.n	800175c <ETH_SetMACConfig+0xb0>
 800175a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800175c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001762:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800176a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800176c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001772:	4313      	orrs	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b56      	ldr	r3, [pc, #344]	; (80018d8 <ETH_SetMACConfig+0x22c>)
 800177e:	4013      	ands	r3, r2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	68f9      	ldr	r1, [r7, #12]
 8001786:	430b      	orrs	r3, r1
 8001788:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001796:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001798:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017a0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80017a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80017aa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80017ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	d102      	bne.n	80017be <ETH_SetMACConfig+0x112>
 80017b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017bc:	e000      	b.n	80017c0 <ETH_SetMACConfig+0x114>
 80017be:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80017c0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4b42      	ldr	r3, [pc, #264]	; (80018dc <ETH_SetMACConfig+0x230>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	68f9      	ldr	r1, [r7, #12]
 80017da:	430b      	orrs	r3, r1
 80017dc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017e4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017ea:	4313      	orrs	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	4b3a      	ldr	r3, [pc, #232]	; (80018e0 <ETH_SetMACConfig+0x234>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	68f9      	ldr	r1, [r7, #12]
 80017fe:	430b      	orrs	r3, r1
 8001800:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001808:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800180e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001816:	2a00      	cmp	r2, #0
 8001818:	d101      	bne.n	800181e <ETH_SetMACConfig+0x172>
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	e000      	b.n	8001820 <ETH_SetMACConfig+0x174>
 800181e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001820:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001826:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001828:	4313      	orrs	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001832:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001836:	4013      	ands	r3, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	68f9      	ldr	r1, [r7, #12]
 800183e:	430b      	orrs	r3, r1
 8001840:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001848:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001850:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001852:	4313      	orrs	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185e:	f023 0103 	bic.w	r1, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	430a      	orrs	r2, r1
 800186a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001876:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001892:	2a00      	cmp	r2, #0
 8001894:	d101      	bne.n	800189a <ETH_SetMACConfig+0x1ee>
 8001896:	2240      	movs	r2, #64	; 0x40
 8001898:	e000      	b.n	800189c <ETH_SetMACConfig+0x1f0>
 800189a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800189c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80018a4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80018ae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80018bc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	00048083 	.word	0x00048083
 80018dc:	c0f88000 	.word	0xc0f88000
 80018e0:	fffffef0 	.word	0xfffffef0

080018e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b38      	ldr	r3, [pc, #224]	; (80019dc <ETH_SetDMAConfig+0xf8>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	6811      	ldr	r1, [r2, #0]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	430b      	orrs	r3, r1
 8001906:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800190a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	791b      	ldrb	r3, [r3, #4]
 8001910:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001916:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	7b1b      	ldrb	r3, [r3, #12]
 800191c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800191e:	4313      	orrs	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <ETH_SetDMAConfig+0xfc>)
 800192e:	4013      	ands	r3, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	68f9      	ldr	r1, [r7, #12]
 8001936:	430b      	orrs	r3, r1
 8001938:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800193c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	7b5b      	ldrb	r3, [r3, #13]
 8001942:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001948:	4313      	orrs	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001954:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001958:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <ETH_SetDMAConfig+0x100>)
 800195a:	4013      	ands	r3, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	430b      	orrs	r3, r1
 8001964:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001968:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	7d1b      	ldrb	r3, [r3, #20]
 8001974:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001976:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	7f5b      	ldrb	r3, [r3, #29]
 800197c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800197e:	4313      	orrs	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800198a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <ETH_SetDMAConfig+0x104>)
 8001990:	4013      	ands	r3, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	68f9      	ldr	r1, [r7, #12]
 8001998:	430b      	orrs	r3, r1
 800199a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800199e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	7f1b      	ldrb	r3, [r3, #28]
 80019a6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <ETH_SetDMAConfig+0x108>)
 80019be:	4013      	ands	r3, r2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	68f9      	ldr	r1, [r7, #12]
 80019c6:	430b      	orrs	r3, r1
 80019c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019cc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	ffff87fd 	.word	0xffff87fd
 80019e0:	ffff2ffe 	.word	0xffff2ffe
 80019e4:	fffec000 	.word	0xfffec000
 80019e8:	ffc0efef 	.word	0xffc0efef
 80019ec:	7fc0ffff 	.word	0x7fc0ffff

080019f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b0a4      	sub	sp, #144	; 0x90
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80019f8:	2301      	movs	r3, #1
 80019fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019fe:	2300      	movs	r3, #0
 8001a00:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001a14:	2301      	movs	r3, #1
 8001a16:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001a26:	2301      	movs	r3, #1
 8001a28:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a30:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001a48:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001a4c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001a54:	2300      	movs	r3, #0
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001a72:	2300      	movs	r3, #0
 8001a74:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001a88:	2320      	movs	r3, #32
 8001a8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001a9a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001aa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aa4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001aac:	2302      	movs	r3, #2
 8001aae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001aca:	2300      	movs	r3, #0
 8001acc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fde6 	bl	80016ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001afa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001afe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b08:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001b10:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b16:	f107 0308 	add.w	r3, r7, #8
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fee1 	bl	80018e4 <ETH_SetDMAConfig>
}
 8001b22:	bf00      	nop
 8001b24:	3790      	adds	r7, #144	; 0x90
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e01d      	b.n	8001b74 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68d9      	ldr	r1, [r3, #12]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2200      	movs	r2, #0
 8001b54:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	3206      	adds	r2, #6
 8001b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3301      	adds	r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d9de      	bls.n	8001b38 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e023      	b.n	8001c12 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6919      	ldr	r1, [r3, #16]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	440b      	add	r3, r1
 8001bda:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2200      	movs	r2, #0
 8001be6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	3212      	adds	r2, #18
 8001c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d9d8      	bls.n	8001bca <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2303      	movs	r3, #3
 8001c42:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691a      	ldr	r2, [r3, #16]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c52:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c66:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c86:	4b86      	ldr	r3, [pc, #536]	; (8001ea0 <HAL_GPIO_Init+0x228>)
 8001c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c8a:	e18c      	b.n	8001fa6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2101      	movs	r1, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 817e 	beq.w	8001fa0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d005      	beq.n	8001cbc <HAL_GPIO_Init+0x44>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d130      	bne.n	8001d1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f003 0201 	and.w	r2, r3, #1
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d017      	beq.n	8001d5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d123      	bne.n	8001dae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3208      	adds	r2, #8
 8001d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	08da      	lsrs	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3208      	adds	r2, #8
 8001da8:	69b9      	ldr	r1, [r7, #24]
 8001daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 0203 	and.w	r2, r3, #3
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80d8 	beq.w	8001fa0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df0:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <HAL_GPIO_Init+0x22c>)
 8001df2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001df6:	4a2b      	ldr	r2, [pc, #172]	; (8001ea4 <HAL_GPIO_Init+0x22c>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e00:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <HAL_GPIO_Init+0x22c>)
 8001e02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0e:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <HAL_GPIO_Init+0x230>)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <HAL_GPIO_Init+0x234>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d04a      	beq.n	8001ed0 <HAL_GPIO_Init+0x258>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <HAL_GPIO_Init+0x238>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d02b      	beq.n	8001e9a <HAL_GPIO_Init+0x222>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a1b      	ldr	r2, [pc, #108]	; (8001eb4 <HAL_GPIO_Init+0x23c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d025      	beq.n	8001e96 <HAL_GPIO_Init+0x21e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a1a      	ldr	r2, [pc, #104]	; (8001eb8 <HAL_GPIO_Init+0x240>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01f      	beq.n	8001e92 <HAL_GPIO_Init+0x21a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a19      	ldr	r2, [pc, #100]	; (8001ebc <HAL_GPIO_Init+0x244>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d019      	beq.n	8001e8e <HAL_GPIO_Init+0x216>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <HAL_GPIO_Init+0x248>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0x212>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_GPIO_Init+0x24c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00d      	beq.n	8001e86 <HAL_GPIO_Init+0x20e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <HAL_GPIO_Init+0x250>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x20a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a15      	ldr	r2, [pc, #84]	; (8001ecc <HAL_GPIO_Init+0x254>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_GPIO_Init+0x206>
 8001e7a:	2309      	movs	r3, #9
 8001e7c:	e029      	b.n	8001ed2 <HAL_GPIO_Init+0x25a>
 8001e7e:	230a      	movs	r3, #10
 8001e80:	e027      	b.n	8001ed2 <HAL_GPIO_Init+0x25a>
 8001e82:	2307      	movs	r3, #7
 8001e84:	e025      	b.n	8001ed2 <HAL_GPIO_Init+0x25a>
 8001e86:	2306      	movs	r3, #6
 8001e88:	e023      	b.n	8001ed2 <HAL_GPIO_Init+0x25a>
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	e021      	b.n	8001ed2 <HAL_GPIO_Init+0x25a>
 8001e8e:	2304      	movs	r3, #4
 8001e90:	e01f      	b.n	8001ed2 <HAL_GPIO_Init+0x25a>
 8001e92:	2303      	movs	r3, #3
 8001e94:	e01d      	b.n	8001ed2 <HAL_GPIO_Init+0x25a>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e01b      	b.n	8001ed2 <HAL_GPIO_Init+0x25a>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e019      	b.n	8001ed2 <HAL_GPIO_Init+0x25a>
 8001e9e:	bf00      	nop
 8001ea0:	58000080 	.word	0x58000080
 8001ea4:	58024400 	.word	0x58024400
 8001ea8:	58000400 	.word	0x58000400
 8001eac:	58020000 	.word	0x58020000
 8001eb0:	58020400 	.word	0x58020400
 8001eb4:	58020800 	.word	0x58020800
 8001eb8:	58020c00 	.word	0x58020c00
 8001ebc:	58021000 	.word	0x58021000
 8001ec0:	58021400 	.word	0x58021400
 8001ec4:	58021800 	.word	0x58021800
 8001ec8:	58021c00 	.word	0x58021c00
 8001ecc:	58022400 	.word	0x58022400
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	f002 0203 	and.w	r2, r2, #3
 8001ed8:	0092      	lsls	r2, r2, #2
 8001eda:	4093      	lsls	r3, r2
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee2:	4938      	ldr	r1, [pc, #224]	; (8001fc4 <HAL_GPIO_Init+0x34c>)
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f47f ae6b 	bne.w	8001c8c <HAL_GPIO_Init+0x14>
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
 8001fba:	3724      	adds	r7, #36	; 0x24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	58000400 	.word	0x58000400

08001fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fd8:	787b      	ldrb	r3, [r7, #1]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001fe4:	e003      	b.n	8001fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fe6:	887b      	ldrh	r3, [r7, #2]
 8001fe8:	041a      	lsls	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	619a      	str	r2, [r3, #24]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b085      	sub	sp, #20
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800200c:	887a      	ldrh	r2, [r7, #2]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	041a      	lsls	r2, r3, #16
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43d9      	mvns	r1, r3
 8002018:	887b      	ldrh	r3, [r7, #2]
 800201a:	400b      	ands	r3, r1
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	619a      	str	r2, [r3, #24]
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fdb3 	bl	8000bc0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b04      	cmp	r3, #4
 8002076:	d00a      	beq.n	800208e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	d001      	beq.n	800208a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e01f      	b.n	80020ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e01d      	b.n	80020ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f023 0207 	bic.w	r2, r3, #7
 8002096:	490f      	ldr	r1, [pc, #60]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4313      	orrs	r3, r2
 800209c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800209e:	f7ff f887 	bl	80011b0 <HAL_GetTick>
 80020a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020a4:	e009      	b.n	80020ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020a6:	f7ff f883 	bl	80011b0 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020b4:	d901      	bls.n	80020ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e007      	b.n	80020ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c6:	d1ee      	bne.n	80020a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	58024800 	.word	0x58024800

080020d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08c      	sub	sp, #48	; 0x30
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e3c8      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8087 	beq.w	8002206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f8:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002102:	4b86      	ldr	r3, [pc, #536]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210a:	2b10      	cmp	r3, #16
 800210c:	d007      	beq.n	800211e <HAL_RCC_OscConfig+0x46>
 800210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002110:	2b18      	cmp	r3, #24
 8002112:	d110      	bne.n	8002136 <HAL_RCC_OscConfig+0x5e>
 8002114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d10b      	bne.n	8002136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211e:	4b7f      	ldr	r3, [pc, #508]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d06c      	beq.n	8002204 <HAL_RCC_OscConfig+0x12c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d168      	bne.n	8002204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e3a2      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x76>
 8002140:	4b76      	ldr	r3, [pc, #472]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a75      	ldr	r2, [pc, #468]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	e02e      	b.n	80021ac <HAL_RCC_OscConfig+0xd4>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x98>
 8002156:	4b71      	ldr	r3, [pc, #452]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a70      	ldr	r2, [pc, #448]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800215c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b6e      	ldr	r3, [pc, #440]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a6d      	ldr	r2, [pc, #436]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e01d      	b.n	80021ac <HAL_RCC_OscConfig+0xd4>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0xbc>
 800217a:	4b68      	ldr	r3, [pc, #416]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a67      	ldr	r2, [pc, #412]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b65      	ldr	r3, [pc, #404]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a64      	ldr	r2, [pc, #400]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0xd4>
 8002194:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a60      	ldr	r2, [pc, #384]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800219a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b5e      	ldr	r3, [pc, #376]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a5d      	ldr	r2, [pc, #372]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe fffc 	bl	80011b0 <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7fe fff8 	bl	80011b0 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e356      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021ce:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0xe4>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe ffe8 	bl	80011b0 <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7fe ffe4 	bl	80011b0 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e342      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021f6:	4b49      	ldr	r3, [pc, #292]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x10c>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 808c 	beq.w	800232c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002214:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800221c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800221e:	4b3f      	ldr	r3, [pc, #252]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_RCC_OscConfig+0x162>
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	2b18      	cmp	r3, #24
 800222e:	d137      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1c8>
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d132      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800223a:	4b38      	ldr	r3, [pc, #224]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x17a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e314      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002252:	4b32      	ldr	r3, [pc, #200]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 0219 	bic.w	r2, r3, #25
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	492f      	ldr	r1, [pc, #188]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe ffa4 	bl	80011b0 <HAL_GetTick>
 8002268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226c:	f7fe ffa0 	bl	80011b0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e2fe      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800227e:	4b27      	ldr	r3, [pc, #156]	; (800231c <HAL_RCC_OscConfig+0x244>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	061b      	lsls	r3, r3, #24
 8002298:	4920      	ldr	r1, [pc, #128]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800229e:	e045      	b.n	800232c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d026      	beq.n	80022f6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 0219 	bic.w	r2, r3, #25
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4919      	ldr	r1, [pc, #100]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7fe ff79 	bl	80011b0 <HAL_GetTick>
 80022be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c2:	f7fe ff75 	bl	80011b0 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e2d3      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	061b      	lsls	r3, r3, #24
 80022ee:	490b      	ldr	r1, [pc, #44]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
 80022f4:	e01a      	b.n	800232c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a08      	ldr	r2, [pc, #32]	; (800231c <HAL_RCC_OscConfig+0x244>)
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002302:	f7fe ff55 	bl	80011b0 <HAL_GetTick>
 8002306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230a:	f7fe ff51 	bl	80011b0 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d903      	bls.n	8002320 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e2af      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
 800231c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002320:	4b96      	ldr	r3, [pc, #600]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ee      	bne.n	800230a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	d06a      	beq.n	800240e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002338:	4b90      	ldr	r3, [pc, #576]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002340:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002342:	4b8e      	ldr	r3, [pc, #568]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b08      	cmp	r3, #8
 800234c:	d007      	beq.n	800235e <HAL_RCC_OscConfig+0x286>
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b18      	cmp	r3, #24
 8002352:	d11b      	bne.n	800238c <HAL_RCC_OscConfig+0x2b4>
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d116      	bne.n	800238c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800235e:	4b87      	ldr	r3, [pc, #540]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x29e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	2b80      	cmp	r3, #128	; 0x80
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e282      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002376:	4b81      	ldr	r3, [pc, #516]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	061b      	lsls	r3, r3, #24
 8002384:	497d      	ldr	r1, [pc, #500]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800238a:	e040      	b.n	800240e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d023      	beq.n	80023dc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002394:	4b79      	ldr	r3, [pc, #484]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a78      	ldr	r2, [pc, #480]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800239a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe ff06 	bl	80011b0 <HAL_GetTick>
 80023a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80023a8:	f7fe ff02 	bl	80011b0 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e260      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023ba:	4b70      	ldr	r3, [pc, #448]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023c6:	4b6d      	ldr	r3, [pc, #436]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	061b      	lsls	r3, r3, #24
 80023d4:	4969      	ldr	r1, [pc, #420]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60cb      	str	r3, [r1, #12]
 80023da:	e018      	b.n	800240e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80023dc:	4b67      	ldr	r3, [pc, #412]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a66      	ldr	r2, [pc, #408]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80023e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fee2 	bl	80011b0 <HAL_GetTick>
 80023ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80023f0:	f7fe fede 	bl	80011b0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e23c      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002402:	4b5e      	ldr	r3, [pc, #376]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d036      	beq.n	8002488 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d019      	beq.n	8002456 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002422:	4b56      	ldr	r3, [pc, #344]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002426:	4a55      	ldr	r2, [pc, #340]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe febf 	bl	80011b0 <HAL_GetTick>
 8002432:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002436:	f7fe febb 	bl	80011b0 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e219      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002448:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800244a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x35e>
 8002454:	e018      	b.n	8002488 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002456:	4b49      	ldr	r3, [pc, #292]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245a:	4a48      	ldr	r2, [pc, #288]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7fe fea5 	bl	80011b0 <HAL_GetTick>
 8002466:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246a:	f7fe fea1 	bl	80011b0 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1ff      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800247c:	4b3f      	ldr	r3, [pc, #252]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800247e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d036      	beq.n	8002502 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d019      	beq.n	80024d0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800249c:	4b37      	ldr	r3, [pc, #220]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a36      	ldr	r2, [pc, #216]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80024a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024a8:	f7fe fe82 	bl	80011b0 <HAL_GetTick>
 80024ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024b0:	f7fe fe7e 	bl	80011b0 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e1dc      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x3d8>
 80024ce:	e018      	b.n	8002502 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a29      	ldr	r2, [pc, #164]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80024d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024dc:	f7fe fe68 	bl	80011b0 <HAL_GetTick>
 80024e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024e4:	f7fe fe64 	bl	80011b0 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e1c2      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8086 	beq.w	800261c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_RCC_OscConfig+0x4a8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1a      	ldr	r2, [pc, #104]	; (8002580 <HAL_RCC_OscConfig+0x4a8>)
 8002516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800251c:	f7fe fe48 	bl	80011b0 <HAL_GetTick>
 8002520:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002524:	f7fe fe44 	bl	80011b0 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	; 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e1a2      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_RCC_OscConfig+0x4a8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d106      	bne.n	8002558 <HAL_RCC_OscConfig+0x480>
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a0b      	ldr	r2, [pc, #44]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
 8002556:	e032      	b.n	80025be <HAL_RCC_OscConfig+0x4e6>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d111      	bne.n	8002584 <HAL_RCC_OscConfig+0x4ac>
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	4a05      	ldr	r2, [pc, #20]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	6713      	str	r3, [r2, #112]	; 0x70
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4a02      	ldr	r2, [pc, #8]	; (800257c <HAL_RCC_OscConfig+0x4a4>)
 8002572:	f023 0304 	bic.w	r3, r3, #4
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
 8002578:	e021      	b.n	80025be <HAL_RCC_OscConfig+0x4e6>
 800257a:	bf00      	nop
 800257c:	58024400 	.word	0x58024400
 8002580:	58024800 	.word	0x58024800
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b05      	cmp	r3, #5
 800258a:	d10c      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4ce>
 800258c:	4b83      	ldr	r3, [pc, #524]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	4a82      	ldr	r2, [pc, #520]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002592:	f043 0304 	orr.w	r3, r3, #4
 8002596:	6713      	str	r3, [r2, #112]	; 0x70
 8002598:	4b80      	ldr	r3, [pc, #512]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	4a7f      	ldr	r2, [pc, #508]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6713      	str	r3, [r2, #112]	; 0x70
 80025a4:	e00b      	b.n	80025be <HAL_RCC_OscConfig+0x4e6>
 80025a6:	4b7d      	ldr	r3, [pc, #500]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	4a7c      	ldr	r2, [pc, #496]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6713      	str	r3, [r2, #112]	; 0x70
 80025b2:	4b7a      	ldr	r3, [pc, #488]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	4a79      	ldr	r2, [pc, #484]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d015      	beq.n	80025f2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7fe fdf3 	bl	80011b0 <HAL_GetTick>
 80025ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7fe fdef 	bl	80011b0 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e14b      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025e4:	4b6d      	ldr	r3, [pc, #436]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ee      	beq.n	80025ce <HAL_RCC_OscConfig+0x4f6>
 80025f0:	e014      	b.n	800261c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f2:	f7fe fddd 	bl	80011b0 <HAL_GetTick>
 80025f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fe fdd9 	bl	80011b0 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	; 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e135      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002610:	4b62      	ldr	r3, [pc, #392]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ee      	bne.n	80025fa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 812a 	beq.w	800287a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002626:	4b5d      	ldr	r3, [pc, #372]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800262e:	2b18      	cmp	r3, #24
 8002630:	f000 80ba 	beq.w	80027a8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	2b02      	cmp	r3, #2
 800263a:	f040 8095 	bne.w	8002768 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263e:	4b57      	ldr	r3, [pc, #348]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a56      	ldr	r2, [pc, #344]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7fe fdb1 	bl	80011b0 <HAL_GetTick>
 800264e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002652:	f7fe fdad 	bl	80011b0 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e10b      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002664:	4b4d      	ldr	r3, [pc, #308]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002670:	4b4a      	ldr	r3, [pc, #296]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002674:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <HAL_RCC_OscConfig+0x6c8>)
 8002676:	4013      	ands	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002680:	0112      	lsls	r2, r2, #4
 8002682:	430a      	orrs	r2, r1
 8002684:	4945      	ldr	r1, [pc, #276]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	628b      	str	r3, [r1, #40]	; 0x28
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	3b01      	subs	r3, #1
 8002690:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002698:	3b01      	subs	r3, #1
 800269a:	025b      	lsls	r3, r3, #9
 800269c:	b29b      	uxth	r3, r3
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	3b01      	subs	r3, #1
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b2:	3b01      	subs	r3, #1
 80026b4:	061b      	lsls	r3, r3, #24
 80026b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80026ba:	4938      	ldr	r1, [pc, #224]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80026c0:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	4a35      	ldr	r2, [pc, #212]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026cc:	4b33      	ldr	r3, [pc, #204]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <HAL_RCC_OscConfig+0x6cc>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026d8:	00d2      	lsls	r2, r2, #3
 80026da:	4930      	ldr	r1, [pc, #192]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80026e0:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	f023 020c 	bic.w	r2, r3, #12
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	492b      	ldr	r1, [pc, #172]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	f023 0202 	bic.w	r2, r3, #2
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4927      	ldr	r1, [pc, #156]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002704:	4b25      	ldr	r3, [pc, #148]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	4a24      	ldr	r2, [pc, #144]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800270a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800271c:	4b1f      	ldr	r3, [pc, #124]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	4a1e      	ldr	r2, [pc, #120]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002722:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002728:	4b1c      	ldr	r3, [pc, #112]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	4a1b      	ldr	r2, [pc, #108]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800273a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe fd36 	bl	80011b0 <HAL_GetTick>
 8002744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe fd32 	bl	80011b0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e090      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x670>
 8002766:	e088      	b.n	800287a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0b      	ldr	r2, [pc, #44]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 800276e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fd1c 	bl	80011b0 <HAL_GetTick>
 8002778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fd18 	bl	80011b0 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e076      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800278e:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_RCC_OscConfig+0x6c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x6a4>
 800279a:	e06e      	b.n	800287a <HAL_RCC_OscConfig+0x7a2>
 800279c:	58024400 	.word	0x58024400
 80027a0:	fffffc0c 	.word	0xfffffc0c
 80027a4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80027a8:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCC_OscConfig+0x7ac>)
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027ae:	4b35      	ldr	r3, [pc, #212]	; (8002884 <HAL_RCC_OscConfig+0x7ac>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d031      	beq.n	8002820 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f003 0203 	and.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d12a      	bne.n	8002820 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d122      	bne.n	8002820 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d11a      	bne.n	8002820 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	0a5b      	lsrs	r3, r3, #9
 80027ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d111      	bne.n	8002820 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d108      	bne.n	8002820 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	0e1b      	lsrs	r3, r3, #24
 8002812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e02b      	b.n	800287c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002824:	4b17      	ldr	r3, [pc, #92]	; (8002884 <HAL_RCC_OscConfig+0x7ac>)
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800282e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	429a      	cmp	r2, r3
 8002838:	d01f      	beq.n	800287a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_OscConfig+0x7ac>)
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	4a11      	ldr	r2, [pc, #68]	; (8002884 <HAL_RCC_OscConfig+0x7ac>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002846:	f7fe fcb3 	bl	80011b0 <HAL_GetTick>
 800284a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800284c:	bf00      	nop
 800284e:	f7fe fcaf 	bl	80011b0 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	4293      	cmp	r3, r2
 8002858:	d0f9      	beq.n	800284e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_RCC_OscConfig+0x7ac>)
 800285c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_RCC_OscConfig+0x7b0>)
 8002860:	4013      	ands	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002866:	00d2      	lsls	r2, r2, #3
 8002868:	4906      	ldr	r1, [pc, #24]	; (8002884 <HAL_RCC_OscConfig+0x7ac>)
 800286a:	4313      	orrs	r3, r2
 800286c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RCC_OscConfig+0x7ac>)
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	4a04      	ldr	r2, [pc, #16]	; (8002884 <HAL_RCC_OscConfig+0x7ac>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3730      	adds	r7, #48	; 0x30
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	58024400 	.word	0x58024400
 8002888:	ffff0007 	.word	0xffff0007

0800288c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e19c      	b.n	8002bda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a0:	4b8a      	ldr	r3, [pc, #552]	; (8002acc <HAL_RCC_ClockConfig+0x240>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d910      	bls.n	80028d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b87      	ldr	r3, [pc, #540]	; (8002acc <HAL_RCC_ClockConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 020f 	bic.w	r2, r3, #15
 80028b6:	4985      	ldr	r1, [pc, #532]	; (8002acc <HAL_RCC_ClockConfig+0x240>)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b83      	ldr	r3, [pc, #524]	; (8002acc <HAL_RCC_ClockConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e184      	b.n	8002bda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d010      	beq.n	80028fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	4b7b      	ldr	r3, [pc, #492]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d908      	bls.n	80028fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028ec:	4b78      	ldr	r3, [pc, #480]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	4975      	ldr	r1, [pc, #468]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d010      	beq.n	800292c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	4b70      	ldr	r3, [pc, #448]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002916:	429a      	cmp	r2, r3
 8002918:	d908      	bls.n	800292c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800291a:	4b6d      	ldr	r3, [pc, #436]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	496a      	ldr	r1, [pc, #424]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 8002928:	4313      	orrs	r3, r2
 800292a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	d010      	beq.n	800295a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	4b64      	ldr	r3, [pc, #400]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002944:	429a      	cmp	r2, r3
 8002946:	d908      	bls.n	800295a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002948:	4b61      	ldr	r3, [pc, #388]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	495e      	ldr	r1, [pc, #376]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 8002956:	4313      	orrs	r3, r2
 8002958:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b00      	cmp	r3, #0
 8002964:	d010      	beq.n	8002988 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69da      	ldr	r2, [r3, #28]
 800296a:	4b59      	ldr	r3, [pc, #356]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002972:	429a      	cmp	r2, r3
 8002974:	d908      	bls.n	8002988 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002976:	4b56      	ldr	r3, [pc, #344]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	4953      	ldr	r1, [pc, #332]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 8002984:	4313      	orrs	r3, r2
 8002986:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d010      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	4b4d      	ldr	r3, [pc, #308]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d908      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a4:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f023 020f 	bic.w	r2, r3, #15
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4947      	ldr	r1, [pc, #284]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d055      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80029c2:	4b43      	ldr	r3, [pc, #268]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	4940      	ldr	r1, [pc, #256]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d107      	bne.n	80029ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029dc:	4b3c      	ldr	r3, [pc, #240]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d121      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0f6      	b.n	8002bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029f4:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d115      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0ea      	b.n	8002bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a0c:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0de      	b.n	8002bda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0d6      	b.n	8002bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a2c:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f023 0207 	bic.w	r2, r3, #7
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4925      	ldr	r1, [pc, #148]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a3e:	f7fe fbb7 	bl	80011b0 <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a46:	f7fe fbb3 	bl	80011b0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e0be      	b.n	8002bda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d1eb      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d010      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d208      	bcs.n	8002a9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f023 020f 	bic.w	r2, r3, #15
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	490e      	ldr	r1, [pc, #56]	; (8002ad0 <HAL_RCC_ClockConfig+0x244>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_ClockConfig+0x240>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d214      	bcs.n	8002ad4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_RCC_ClockConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 020f 	bic.w	r2, r3, #15
 8002ab2:	4906      	ldr	r1, [pc, #24]	; (8002acc <HAL_RCC_ClockConfig+0x240>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b04      	ldr	r3, [pc, #16]	; (8002acc <HAL_RCC_ClockConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e086      	b.n	8002bda <HAL_RCC_ClockConfig+0x34e>
 8002acc:	52002000 	.word	0x52002000
 8002ad0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d010      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_ClockConfig+0x358>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d208      	bcs.n	8002b02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002af0:	4b3c      	ldr	r3, [pc, #240]	; (8002be4 <HAL_RCC_ClockConfig+0x358>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	4939      	ldr	r1, [pc, #228]	; (8002be4 <HAL_RCC_ClockConfig+0x358>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d010      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <HAL_RCC_ClockConfig+0x358>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d208      	bcs.n	8002b30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b1e:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <HAL_RCC_ClockConfig+0x358>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	492e      	ldr	r1, [pc, #184]	; (8002be4 <HAL_RCC_ClockConfig+0x358>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d010      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699a      	ldr	r2, [r3, #24]
 8002b40:	4b28      	ldr	r3, [pc, #160]	; (8002be4 <HAL_RCC_ClockConfig+0x358>)
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d208      	bcs.n	8002b5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_RCC_ClockConfig+0x358>)
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	4922      	ldr	r1, [pc, #136]	; (8002be4 <HAL_RCC_ClockConfig+0x358>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d010      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_RCC_ClockConfig+0x358>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d208      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_RCC_ClockConfig+0x358>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	4917      	ldr	r1, [pc, #92]	; (8002be4 <HAL_RCC_ClockConfig+0x358>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b8c:	f000 f834 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <HAL_RCC_ClockConfig+0x358>)
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	4912      	ldr	r1, [pc, #72]	; (8002be8 <HAL_RCC_ClockConfig+0x35c>)
 8002b9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_RCC_ClockConfig+0x358>)
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	4a0d      	ldr	r2, [pc, #52]	; (8002be8 <HAL_RCC_ClockConfig+0x35c>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc0:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <HAL_RCC_ClockConfig+0x360>)
 8002bc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <HAL_RCC_ClockConfig+0x364>)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_RCC_ClockConfig+0x368>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe faa4 	bl	800111c <HAL_InitTick>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	58024400 	.word	0x58024400
 8002be8:	08005f58 	.word	0x08005f58
 8002bec:	24000004 	.word	0x24000004
 8002bf0:	24000000 	.word	0x24000000
 8002bf4:	24000008 	.word	0x24000008

08002bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	; 0x24
 8002bfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bfe:	4bb3      	ldr	r3, [pc, #716]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c06:	2b18      	cmp	r3, #24
 8002c08:	f200 8155 	bhi.w	8002eb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002c0c:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c12:	bf00      	nop
 8002c14:	08002c79 	.word	0x08002c79
 8002c18:	08002eb7 	.word	0x08002eb7
 8002c1c:	08002eb7 	.word	0x08002eb7
 8002c20:	08002eb7 	.word	0x08002eb7
 8002c24:	08002eb7 	.word	0x08002eb7
 8002c28:	08002eb7 	.word	0x08002eb7
 8002c2c:	08002eb7 	.word	0x08002eb7
 8002c30:	08002eb7 	.word	0x08002eb7
 8002c34:	08002c9f 	.word	0x08002c9f
 8002c38:	08002eb7 	.word	0x08002eb7
 8002c3c:	08002eb7 	.word	0x08002eb7
 8002c40:	08002eb7 	.word	0x08002eb7
 8002c44:	08002eb7 	.word	0x08002eb7
 8002c48:	08002eb7 	.word	0x08002eb7
 8002c4c:	08002eb7 	.word	0x08002eb7
 8002c50:	08002eb7 	.word	0x08002eb7
 8002c54:	08002ca5 	.word	0x08002ca5
 8002c58:	08002eb7 	.word	0x08002eb7
 8002c5c:	08002eb7 	.word	0x08002eb7
 8002c60:	08002eb7 	.word	0x08002eb7
 8002c64:	08002eb7 	.word	0x08002eb7
 8002c68:	08002eb7 	.word	0x08002eb7
 8002c6c:	08002eb7 	.word	0x08002eb7
 8002c70:	08002eb7 	.word	0x08002eb7
 8002c74:	08002cab 	.word	0x08002cab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c78:	4b94      	ldr	r3, [pc, #592]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d009      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c84:	4b91      	ldr	r3, [pc, #580]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	08db      	lsrs	r3, r3, #3
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	4a90      	ldr	r2, [pc, #576]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
 8002c94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002c96:	e111      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c98:	4b8d      	ldr	r3, [pc, #564]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c9a:	61bb      	str	r3, [r7, #24]
      break;
 8002c9c:	e10e      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002c9e:	4b8d      	ldr	r3, [pc, #564]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ca0:	61bb      	str	r3, [r7, #24]
      break;
 8002ca2:	e10b      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ca4:	4b8c      	ldr	r3, [pc, #560]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ca6:	61bb      	str	r3, [r7, #24]
      break;
 8002ca8:	e108      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002caa:	4b88      	ldr	r3, [pc, #544]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002cb4:	4b85      	ldr	r3, [pc, #532]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002cc0:	4b82      	ldr	r3, [pc, #520]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002cca:	4b80      	ldr	r3, [pc, #512]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cce:	08db      	lsrs	r3, r3, #3
 8002cd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80e1 	beq.w	8002eb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	f000 8083 	beq.w	8002dfc <HAL_RCC_GetSysClockFreq+0x204>
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	f200 80a1 	bhi.w	8002e40 <HAL_RCC_GetSysClockFreq+0x248>
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x114>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d056      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d0a:	e099      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d02d      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d18:	4b6c      	ldr	r3, [pc, #432]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	08db      	lsrs	r3, r3, #3
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	4a6b      	ldr	r2, [pc, #428]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
 8002d28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	ee07 3a90 	vmov	s15, r3
 8002d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d42:	4b62      	ldr	r3, [pc, #392]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d56:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002d72:	e087      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002ee0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d86:	4b51      	ldr	r3, [pc, #324]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d8e:	ee07 3a90 	vmov	s15, r3
 8002d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002db6:	e065      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002ee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dca:	4b40      	ldr	r3, [pc, #256]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dde:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002dfa:	e043      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e06:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ee8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e3e:	e021      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e52:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	0a5b      	lsrs	r3, r3, #9
 8002e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e8e:	3301      	adds	r3, #1
 8002e90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	ee07 3a90 	vmov	s15, r3
 8002e98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ea8:	ee17 3a90 	vmov	r3, s15
 8002eac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002eae:	e005      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61bb      	str	r3, [r7, #24]
      break;
 8002eb4:	e002      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002eb8:	61bb      	str	r3, [r7, #24]
      break;
 8002eba:	bf00      	nop
  }

  return sysclockfreq;
 8002ebc:	69bb      	ldr	r3, [r7, #24]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3724      	adds	r7, #36	; 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	58024400 	.word	0x58024400
 8002ed0:	03d09000 	.word	0x03d09000
 8002ed4:	003d0900 	.word	0x003d0900
 8002ed8:	007a1200 	.word	0x007a1200
 8002edc:	46000000 	.word	0x46000000
 8002ee0:	4c742400 	.word	0x4c742400
 8002ee4:	4a742400 	.word	0x4a742400
 8002ee8:	4af42400 	.word	0x4af42400

08002eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ef2:	f7ff fe81 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	490f      	ldr	r1, [pc, #60]	; (8002f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f04:	5ccb      	ldrb	r3, [r1, r3]
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	f003 031f 	and.w	r3, r3, #31
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f2a:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f32:	681b      	ldr	r3, [r3, #0]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	58024400 	.word	0x58024400
 8002f40:	08005f58 	.word	0x08005f58
 8002f44:	24000004 	.word	0x24000004
 8002f48:	24000000 	.word	0x24000000

08002f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002f50:	f7ff ffcc 	bl	8002eec <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4904      	ldr	r1, [pc, #16]	; (8002f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	58024400 	.word	0x58024400
 8002f74:	08005f58 	.word	0x08005f58

08002f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002f7c:	f7ff ffb6 	bl	8002eec <HAL_RCC_GetHCLKFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	4904      	ldr	r1, [pc, #16]	; (8002fa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	58024400 	.word	0x58024400
 8002fa0:	08005f58 	.word	0x08005f58

08002fa4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa8:	b0c6      	sub	sp, #280	; 0x118
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002fc8:	2500      	movs	r5, #0
 8002fca:	ea54 0305 	orrs.w	r3, r4, r5
 8002fce:	d049      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fda:	d02f      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002fdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fe0:	d828      	bhi.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002fe2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fe6:	d01a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fec:	d822      	bhi.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff6:	d007      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ff8:	e01c      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ffa:	4bab      	ldr	r3, [pc, #684]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	4aaa      	ldr	r2, [pc, #680]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003006:	e01a      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800300c:	3308      	adds	r3, #8
 800300e:	2102      	movs	r1, #2
 8003010:	4618      	mov	r0, r3
 8003012:	f001 fc25 	bl	8004860 <RCCEx_PLL2_Config>
 8003016:	4603      	mov	r3, r0
 8003018:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800301c:	e00f      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800301e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003022:	3328      	adds	r3, #40	; 0x28
 8003024:	2102      	movs	r1, #2
 8003026:	4618      	mov	r0, r3
 8003028:	f001 fccc 	bl	80049c4 <RCCEx_PLL3_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003032:	e004      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800303c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800303e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003046:	4b98      	ldr	r3, [pc, #608]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800304e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003054:	4a94      	ldr	r2, [pc, #592]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003056:	430b      	orrs	r3, r1
 8003058:	6513      	str	r3, [r2, #80]	; 0x50
 800305a:	e003      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003060:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003070:	f04f 0900 	mov.w	r9, #0
 8003074:	ea58 0309 	orrs.w	r3, r8, r9
 8003078:	d047      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800307a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	2b04      	cmp	r3, #4
 8003082:	d82a      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003084:	a201      	add	r2, pc, #4	; (adr r2, 800308c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	080030a1 	.word	0x080030a1
 8003090:	080030af 	.word	0x080030af
 8003094:	080030c5 	.word	0x080030c5
 8003098:	080030e3 	.word	0x080030e3
 800309c:	080030e3 	.word	0x080030e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030a0:	4b81      	ldr	r3, [pc, #516]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	4a80      	ldr	r2, [pc, #512]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030ac:	e01a      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030b2:	3308      	adds	r3, #8
 80030b4:	2100      	movs	r1, #0
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 fbd2 	bl	8004860 <RCCEx_PLL2_Config>
 80030bc:	4603      	mov	r3, r0
 80030be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030c2:	e00f      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030c8:	3328      	adds	r3, #40	; 0x28
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 fc79 	bl	80049c4 <RCCEx_PLL3_Config>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030d8:	e004      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80030e0:	e000      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80030e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030ec:	4b6e      	ldr	r3, [pc, #440]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f0:	f023 0107 	bic.w	r1, r3, #7
 80030f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	4a6b      	ldr	r2, [pc, #428]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6513      	str	r3, [r2, #80]	; 0x50
 8003100:	e003      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003102:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003106:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800310a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8003116:	f04f 0b00 	mov.w	fp, #0
 800311a:	ea5a 030b 	orrs.w	r3, sl, fp
 800311e:	d05b      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003124:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003128:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800312c:	d03b      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800312e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003132:	d834      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003134:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003138:	d037      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800313a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800313e:	d82e      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003140:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003144:	d033      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003146:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800314a:	d828      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800314c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003150:	d01a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003156:	d822      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800315c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003160:	d007      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003162:	e01c      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003164:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	4a4f      	ldr	r2, [pc, #316]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800316a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003170:	e01e      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003176:	3308      	adds	r3, #8
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f001 fb70 	bl	8004860 <RCCEx_PLL2_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003186:	e013      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800318c:	3328      	adds	r3, #40	; 0x28
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f001 fc17 	bl	80049c4 <RCCEx_PLL3_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800319c:	e008      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80031a4:	e004      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80031a6:	bf00      	nop
 80031a8:	e002      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80031ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10b      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80031b8:	4b3b      	ldr	r3, [pc, #236]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80031c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031c8:	4a37      	ldr	r2, [pc, #220]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031ca:	430b      	orrs	r3, r1
 80031cc:	6593      	str	r3, [r2, #88]	; 0x58
 80031ce:	e003      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80031d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80031e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80031ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80031f2:	460b      	mov	r3, r1
 80031f4:	4313      	orrs	r3, r2
 80031f6:	d05d      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80031f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003200:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003204:	d03b      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003206:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800320a:	d834      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800320c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003210:	d037      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003212:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003216:	d82e      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003218:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800321c:	d033      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800321e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003222:	d828      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003228:	d01a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800322a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800322e:	d822      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003238:	d007      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800323a:	e01c      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003246:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003248:	e01e      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800324a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800324e:	3308      	adds	r3, #8
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f001 fb04 	bl	8004860 <RCCEx_PLL2_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800325e:	e013      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003264:	3328      	adds	r3, #40	; 0x28
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f001 fbab 	bl	80049c4 <RCCEx_PLL3_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003274:	e008      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800327c:	e004      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800327e:	bf00      	nop
 8003280:	e002      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003282:	bf00      	nop
 8003284:	e000      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003288:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10d      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800329c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032a0:	4a01      	ldr	r2, [pc, #4]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032a2:	430b      	orrs	r3, r1
 80032a4:	6593      	str	r3, [r2, #88]	; 0x58
 80032a6:	e005      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80032a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80032b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80032b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80032c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80032ca:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4313      	orrs	r3, r2
 80032d2:	d03a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80032d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032da:	2b30      	cmp	r3, #48	; 0x30
 80032dc:	d01f      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80032de:	2b30      	cmp	r3, #48	; 0x30
 80032e0:	d819      	bhi.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d00c      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d815      	bhi.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d019      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d111      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f2:	4baa      	ldr	r3, [pc, #680]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	4aa9      	ldr	r2, [pc, #676]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80032fe:	e011      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003304:	3308      	adds	r3, #8
 8003306:	2102      	movs	r1, #2
 8003308:	4618      	mov	r0, r3
 800330a:	f001 faa9 	bl	8004860 <RCCEx_PLL2_Config>
 800330e:	4603      	mov	r3, r0
 8003310:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003314:	e006      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800331c:	e002      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800331e:	bf00      	nop
 8003320:	e000      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003324:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800332c:	4b9b      	ldr	r3, [pc, #620]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800332e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003330:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333a:	4a98      	ldr	r2, [pc, #608]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800333c:	430b      	orrs	r3, r1
 800333e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003340:	e003      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003342:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003346:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800334a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003356:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003360:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003364:	460b      	mov	r3, r1
 8003366:	4313      	orrs	r3, r2
 8003368:	d051      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800336a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003374:	d035      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003376:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800337a:	d82e      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x436>
 800337c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003380:	d031      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003382:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003386:	d828      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338c:	d01a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800338e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003392:	d822      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339c:	d007      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800339e:	e01c      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a0:	4b7e      	ldr	r3, [pc, #504]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	4a7d      	ldr	r2, [pc, #500]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033ac:	e01c      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033b2:	3308      	adds	r3, #8
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 fa52 	bl	8004860 <RCCEx_PLL2_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033c2:	e011      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033c8:	3328      	adds	r3, #40	; 0x28
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 faf9 	bl	80049c4 <RCCEx_PLL3_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033d8:	e006      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80033e0:	e002      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80033e2:	bf00      	nop
 80033e4:	e000      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80033e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80033f0:	4b6a      	ldr	r3, [pc, #424]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80033f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	4a67      	ldr	r2, [pc, #412]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003400:	430b      	orrs	r3, r1
 8003402:	6513      	str	r3, [r2, #80]	; 0x50
 8003404:	e003      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003406:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800340a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800340e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800341a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800341e:	2300      	movs	r3, #0
 8003420:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003424:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003428:	460b      	mov	r3, r1
 800342a:	4313      	orrs	r3, r2
 800342c:	d053      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800342e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003438:	d033      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800343a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800343e:	d82c      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003440:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003444:	d02f      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003446:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800344a:	d826      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800344c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003450:	d02b      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003452:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003456:	d820      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003458:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800345c:	d012      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800345e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003462:	d81a      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d022      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346c:	d115      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800346e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003472:	3308      	adds	r3, #8
 8003474:	2101      	movs	r1, #1
 8003476:	4618      	mov	r0, r3
 8003478:	f001 f9f2 	bl	8004860 <RCCEx_PLL2_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003482:	e015      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003488:	3328      	adds	r3, #40	; 0x28
 800348a:	2101      	movs	r1, #1
 800348c:	4618      	mov	r0, r3
 800348e:	f001 fa99 	bl	80049c4 <RCCEx_PLL3_Config>
 8003492:	4603      	mov	r3, r0
 8003494:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003498:	e00a      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80034a0:	e006      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80034a2:	bf00      	nop
 80034a4:	e004      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80034a6:	bf00      	nop
 80034a8:	e002      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80034aa:	bf00      	nop
 80034ac:	e000      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80034ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80034b8:	4b38      	ldr	r3, [pc, #224]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034bc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80034c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c6:	4a35      	ldr	r2, [pc, #212]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6513      	str	r3, [r2, #80]	; 0x50
 80034cc:	e003      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80034d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80034e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80034ec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034f0:	460b      	mov	r3, r1
 80034f2:	4313      	orrs	r3, r2
 80034f4:	d058      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80034f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003502:	d033      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003508:	d82c      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350e:	d02f      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003514:	d826      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003516:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800351a:	d02b      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800351c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003520:	d820      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003526:	d012      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800352c:	d81a      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d022      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003536:	d115      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800353c:	3308      	adds	r3, #8
 800353e:	2101      	movs	r1, #1
 8003540:	4618      	mov	r0, r3
 8003542:	f001 f98d 	bl	8004860 <RCCEx_PLL2_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800354c:	e015      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800354e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003552:	3328      	adds	r3, #40	; 0x28
 8003554:	2101      	movs	r1, #1
 8003556:	4618      	mov	r0, r3
 8003558:	f001 fa34 	bl	80049c4 <RCCEx_PLL3_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003562:	e00a      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800356a:	e006      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800356c:	bf00      	nop
 800356e:	e004      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003570:	bf00      	nop
 8003572:	e002      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003574:	bf00      	nop
 8003576:	e000      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800357a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10e      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800358a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800358e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003592:	4a02      	ldr	r2, [pc, #8]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003594:	430b      	orrs	r3, r1
 8003596:	6593      	str	r3, [r2, #88]	; 0x58
 8003598:	e006      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800359a:	bf00      	nop
 800359c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80035b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035b8:	2300      	movs	r3, #0
 80035ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80035be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4313      	orrs	r3, r2
 80035c6:	d037      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80035c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035d2:	d00e      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80035d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035d8:	d816      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d018      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80035de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035e2:	d111      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e4:	4bc4      	ldr	r3, [pc, #784]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	4ac3      	ldr	r2, [pc, #780]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035f0:	e00f      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035f6:	3308      	adds	r3, #8
 80035f8:	2101      	movs	r1, #1
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 f930 	bl	8004860 <RCCEx_PLL2_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003606:	e004      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800360e:	e000      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003612:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800361a:	4bb7      	ldr	r3, [pc, #732]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800361c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003628:	4ab3      	ldr	r2, [pc, #716]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800362a:	430b      	orrs	r3, r1
 800362c:	6513      	str	r3, [r2, #80]	; 0x50
 800362e:	e003      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003630:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003634:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003644:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800364e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003652:	460b      	mov	r3, r1
 8003654:	4313      	orrs	r3, r2
 8003656:	d039      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800365c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365e:	2b03      	cmp	r3, #3
 8003660:	d81c      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003662:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003668:	080036a5 	.word	0x080036a5
 800366c:	08003679 	.word	0x08003679
 8003670:	08003687 	.word	0x08003687
 8003674:	080036a5 	.word	0x080036a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003678:	4b9f      	ldr	r3, [pc, #636]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	4a9e      	ldr	r2, [pc, #632]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800367e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003682:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003684:	e00f      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800368a:	3308      	adds	r3, #8
 800368c:	2102      	movs	r1, #2
 800368e:	4618      	mov	r0, r3
 8003690:	f001 f8e6 	bl	8004860 <RCCEx_PLL2_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800369a:	e004      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80036a2:	e000      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80036a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10a      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80036ae:	4b92      	ldr	r3, [pc, #584]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b2:	f023 0103 	bic.w	r1, r3, #3
 80036b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036bc:	4a8e      	ldr	r2, [pc, #568]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036be:	430b      	orrs	r3, r1
 80036c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036c2:	e003      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80036d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f000 8099 	beq.w	8003820 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036ee:	4b83      	ldr	r3, [pc, #524]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a82      	ldr	r2, [pc, #520]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036fa:	f7fd fd59 	bl	80011b0 <HAL_GetTick>
 80036fe:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003702:	e00b      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003704:	f7fd fd54 	bl	80011b0 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b64      	cmp	r3, #100	; 0x64
 8003712:	d903      	bls.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800371a:	e005      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800371c:	4b77      	ldr	r3, [pc, #476]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ed      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003728:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800372c:	2b00      	cmp	r3, #0
 800372e:	d173      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003730:	4b71      	ldr	r3, [pc, #452]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003732:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003738:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800373c:	4053      	eors	r3, r2
 800373e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003742:	2b00      	cmp	r3, #0
 8003744:	d015      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003746:	4b6c      	ldr	r3, [pc, #432]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003752:	4b69      	ldr	r3, [pc, #420]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	4a68      	ldr	r2, [pc, #416]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800375e:	4b66      	ldr	r3, [pc, #408]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	4a65      	ldr	r2, [pc, #404]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003768:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800376a:	4a63      	ldr	r2, [pc, #396]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800376c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003770:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003776:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800377a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377e:	d118      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fd fd16 	bl	80011b0 <HAL_GetTick>
 8003784:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003788:	e00d      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fd fd11 	bl	80011b0 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003794:	1ad2      	subs	r2, r2, r3
 8003796:	f241 3388 	movw	r3, #5000	; 0x1388
 800379a:	429a      	cmp	r2, r3
 800379c:	d903      	bls.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80037a4:	e005      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037a6:	4b54      	ldr	r3, [pc, #336]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0eb      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80037b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d129      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ca:	d10e      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x846>
 80037cc:	4b4a      	ldr	r3, [pc, #296]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80037d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037dc:	091a      	lsrs	r2, r3, #4
 80037de:	4b48      	ldr	r3, [pc, #288]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	4a45      	ldr	r2, [pc, #276]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6113      	str	r3, [r2, #16]
 80037e8:	e005      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80037ea:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	4a42      	ldr	r2, [pc, #264]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037f4:	6113      	str	r3, [r2, #16]
 80037f6:	4b40      	ldr	r3, [pc, #256]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80037fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003806:	4a3c      	ldr	r2, [pc, #240]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003808:	430b      	orrs	r3, r1
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	e008      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800380e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003812:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003816:	e003      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003818:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800381c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003828:	f002 0301 	and.w	r3, r2, #1
 800382c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003830:	2300      	movs	r3, #0
 8003832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003836:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800383a:	460b      	mov	r3, r1
 800383c:	4313      	orrs	r3, r2
 800383e:	f000 808f 	beq.w	8003960 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003848:	2b28      	cmp	r3, #40	; 0x28
 800384a:	d871      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800384c:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003939 	.word	0x08003939
 8003858:	08003931 	.word	0x08003931
 800385c:	08003931 	.word	0x08003931
 8003860:	08003931 	.word	0x08003931
 8003864:	08003931 	.word	0x08003931
 8003868:	08003931 	.word	0x08003931
 800386c:	08003931 	.word	0x08003931
 8003870:	08003931 	.word	0x08003931
 8003874:	08003905 	.word	0x08003905
 8003878:	08003931 	.word	0x08003931
 800387c:	08003931 	.word	0x08003931
 8003880:	08003931 	.word	0x08003931
 8003884:	08003931 	.word	0x08003931
 8003888:	08003931 	.word	0x08003931
 800388c:	08003931 	.word	0x08003931
 8003890:	08003931 	.word	0x08003931
 8003894:	0800391b 	.word	0x0800391b
 8003898:	08003931 	.word	0x08003931
 800389c:	08003931 	.word	0x08003931
 80038a0:	08003931 	.word	0x08003931
 80038a4:	08003931 	.word	0x08003931
 80038a8:	08003931 	.word	0x08003931
 80038ac:	08003931 	.word	0x08003931
 80038b0:	08003931 	.word	0x08003931
 80038b4:	08003939 	.word	0x08003939
 80038b8:	08003931 	.word	0x08003931
 80038bc:	08003931 	.word	0x08003931
 80038c0:	08003931 	.word	0x08003931
 80038c4:	08003931 	.word	0x08003931
 80038c8:	08003931 	.word	0x08003931
 80038cc:	08003931 	.word	0x08003931
 80038d0:	08003931 	.word	0x08003931
 80038d4:	08003939 	.word	0x08003939
 80038d8:	08003931 	.word	0x08003931
 80038dc:	08003931 	.word	0x08003931
 80038e0:	08003931 	.word	0x08003931
 80038e4:	08003931 	.word	0x08003931
 80038e8:	08003931 	.word	0x08003931
 80038ec:	08003931 	.word	0x08003931
 80038f0:	08003931 	.word	0x08003931
 80038f4:	08003939 	.word	0x08003939
 80038f8:	58024400 	.word	0x58024400
 80038fc:	58024800 	.word	0x58024800
 8003900:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003908:	3308      	adds	r3, #8
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f000 ffa7 	bl	8004860 <RCCEx_PLL2_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003918:	e00f      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800391a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800391e:	3328      	adds	r3, #40	; 0x28
 8003920:	2101      	movs	r1, #1
 8003922:	4618      	mov	r0, r3
 8003924:	f001 f84e 	bl	80049c4 <RCCEx_PLL3_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800392e:	e004      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003936:	e000      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10a      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003942:	4bbf      	ldr	r3, [pc, #764]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800394a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800394e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003950:	4abb      	ldr	r2, [pc, #748]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003952:	430b      	orrs	r3, r1
 8003954:	6553      	str	r3, [r2, #84]	; 0x54
 8003956:	e003      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800395c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f002 0302 	and.w	r3, r2, #2
 800396c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003970:	2300      	movs	r3, #0
 8003972:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003976:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800397a:	460b      	mov	r3, r1
 800397c:	4313      	orrs	r3, r2
 800397e:	d041      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003986:	2b05      	cmp	r3, #5
 8003988:	d824      	bhi.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800398a:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039dd 	.word	0x080039dd
 8003994:	080039a9 	.word	0x080039a9
 8003998:	080039bf 	.word	0x080039bf
 800399c:	080039dd 	.word	0x080039dd
 80039a0:	080039dd 	.word	0x080039dd
 80039a4:	080039dd 	.word	0x080039dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ac:	3308      	adds	r3, #8
 80039ae:	2101      	movs	r1, #1
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 ff55 	bl	8004860 <RCCEx_PLL2_Config>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039bc:	e00f      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039c2:	3328      	adds	r3, #40	; 0x28
 80039c4:	2101      	movs	r1, #1
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fffc 	bl	80049c4 <RCCEx_PLL3_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039d2:	e004      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80039dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039e6:	4b96      	ldr	r3, [pc, #600]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ea:	f023 0107 	bic.w	r1, r3, #7
 80039ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f4:	4a92      	ldr	r2, [pc, #584]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	6553      	str	r3, [r2, #84]	; 0x54
 80039fa:	e003      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0c:	f002 0304 	and.w	r3, r2, #4
 8003a10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a1a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4313      	orrs	r3, r2
 8003a22:	d044      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d825      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003a30:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003a85 	.word	0x08003a85
 8003a3c:	08003a51 	.word	0x08003a51
 8003a40:	08003a67 	.word	0x08003a67
 8003a44:	08003a85 	.word	0x08003a85
 8003a48:	08003a85 	.word	0x08003a85
 8003a4c:	08003a85 	.word	0x08003a85
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a54:	3308      	adds	r3, #8
 8003a56:	2101      	movs	r1, #1
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 ff01 	bl	8004860 <RCCEx_PLL2_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a64:	e00f      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a6a:	3328      	adds	r3, #40	; 0x28
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 ffa8 	bl	80049c4 <RCCEx_PLL3_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a7a:	e004      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a82:	e000      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a8e:	4b6c      	ldr	r3, [pc, #432]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	f023 0107 	bic.w	r1, r3, #7
 8003a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9e:	4a68      	ldr	r2, [pc, #416]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8003aa4:	e003      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003aaa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	f002 0320 	and.w	r3, r2, #32
 8003aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ac4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4313      	orrs	r3, r2
 8003acc:	d055      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ada:	d033      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ae0:	d82c      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae6:	d02f      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aec:	d826      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003aee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003af2:	d02b      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003af4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003af8:	d820      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003afe:	d012      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b04:	d81a      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d022      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0e:	d115      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b14:	3308      	adds	r3, #8
 8003b16:	2100      	movs	r1, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fea1 	bl	8004860 <RCCEx_PLL2_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b24:	e015      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b2a:	3328      	adds	r3, #40	; 0x28
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 ff48 	bl	80049c4 <RCCEx_PLL3_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b42:	e006      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b44:	bf00      	nop
 8003b46:	e004      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b48:	bf00      	nop
 8003b4a:	e002      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b4c:	bf00      	nop
 8003b4e:	e000      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10b      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b5a:	4b39      	ldr	r3, [pc, #228]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b6a:	4a35      	ldr	r2, [pc, #212]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6553      	str	r3, [r2, #84]	; 0x54
 8003b70:	e003      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b76:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003b86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b90:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003b94:	460b      	mov	r3, r1
 8003b96:	4313      	orrs	r3, r2
 8003b98:	d058      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ba2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ba6:	d033      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003ba8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003bac:	d82c      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb2:	d02f      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb8:	d826      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003bba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bbe:	d02b      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bc4:	d820      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bca:	d012      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd0:	d81a      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d022      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d115      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003be0:	3308      	adds	r3, #8
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fe3b 	bl	8004860 <RCCEx_PLL2_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003bf0:	e015      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bf6:	3328      	adds	r3, #40	; 0x28
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fee2 	bl	80049c4 <RCCEx_PLL3_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c06:	e00a      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003c0e:	e006      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c10:	bf00      	nop
 8003c12:	e004      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c14:	bf00      	nop
 8003c16:	e002      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c18:	bf00      	nop
 8003c1a:	e000      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10e      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c36:	4a02      	ldr	r2, [pc, #8]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c3c:	e006      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003c3e:	bf00      	nop
 8003c40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003c58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003c66:	460b      	mov	r3, r1
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	d055      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c74:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c78:	d033      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003c7a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c7e:	d82c      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c84:	d02f      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8a:	d826      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c8c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c90:	d02b      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003c92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c96:	d820      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c9c:	d012      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca2:	d81a      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d022      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cac:	d115      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fdd2 	bl	8004860 <RCCEx_PLL2_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003cc2:	e015      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cc8:	3328      	adds	r3, #40	; 0x28
 8003cca:	2102      	movs	r1, #2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fe79 	bl	80049c4 <RCCEx_PLL3_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003cd8:	e00a      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003ce2:	bf00      	nop
 8003ce4:	e004      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003ce6:	bf00      	nop
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003cf8:	4ba0      	ldr	r3, [pc, #640]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d08:	4a9c      	ldr	r2, [pc, #624]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d0e:	e003      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d20:	f002 0308 	and.w	r3, r2, #8
 8003d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003d2e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003d32:	460b      	mov	r3, r1
 8003d34:	4313      	orrs	r3, r2
 8003d36:	d01e      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d4a:	3328      	adds	r3, #40	; 0x28
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fe38 	bl	80049c4 <RCCEx_PLL3_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003d60:	4b86      	ldr	r3, [pc, #536]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d70:	4a82      	ldr	r2, [pc, #520]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d72:	430b      	orrs	r3, r1
 8003d74:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f002 0310 	and.w	r3, r2, #16
 8003d82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d8c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003d90:	460b      	mov	r3, r1
 8003d92:	4313      	orrs	r3, r2
 8003d94:	d01e      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da2:	d10c      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003da8:	3328      	adds	r3, #40	; 0x28
 8003daa:	2102      	movs	r1, #2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fe09 	bl	80049c4 <RCCEx_PLL3_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dbe:	4b6f      	ldr	r3, [pc, #444]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dce:	4a6b      	ldr	r2, [pc, #428]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003de2:	2300      	movs	r3, #0
 8003de4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003de6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003dea:	460b      	mov	r3, r1
 8003dec:	4313      	orrs	r3, r2
 8003dee:	d03e      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003df4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dfc:	d022      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003dfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e02:	d81b      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e0c:	d00b      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003e0e:	e015      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e14:	3308      	adds	r3, #8
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fd21 	bl	8004860 <RCCEx_PLL2_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e24:	e00f      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e2a:	3328      	adds	r3, #40	; 0x28
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fdc8 	bl	80049c4 <RCCEx_PLL3_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e3a:	e004      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003e42:	e000      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10b      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e4e:	4b4b      	ldr	r3, [pc, #300]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e5e:	4a47      	ldr	r2, [pc, #284]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e60:	430b      	orrs	r3, r1
 8003e62:	6593      	str	r3, [r2, #88]	; 0x58
 8003e64:	e003      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003e7a:	673b      	str	r3, [r7, #112]	; 0x70
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	677b      	str	r3, [r7, #116]	; 0x74
 8003e80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003e84:	460b      	mov	r3, r1
 8003e86:	4313      	orrs	r3, r2
 8003e88:	d03b      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e96:	d01f      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003e98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e9c:	d818      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea2:	d003      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003ea4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ea8:	d007      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003eaa:	e011      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eac:	4b33      	ldr	r3, [pc, #204]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	4a32      	ldr	r2, [pc, #200]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003eb8:	e00f      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ebe:	3328      	adds	r3, #40	; 0x28
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fd7e 	bl	80049c4 <RCCEx_PLL3_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ece:	e004      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ed6:	e000      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10b      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ee2:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef2:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	6553      	str	r3, [r2, #84]	; 0x54
 8003ef8:	e003      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003efe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f10:	2300      	movs	r3, #0
 8003f12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f14:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	d034      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2c:	d007      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003f2e:	e011      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f30:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	4a11      	ldr	r2, [pc, #68]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f3c:	e00e      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f42:	3308      	adds	r3, #8
 8003f44:	2102      	movs	r1, #2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fc8a 	bl	8004860 <RCCEx_PLL2_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f52:	e003      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10d      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f72:	4a02      	ldr	r2, [pc, #8]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f74:	430b      	orrs	r3, r1
 8003f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f78:	e006      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003f7a:	bf00      	nop
 8003f7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003f94:	663b      	str	r3, [r7, #96]	; 0x60
 8003f96:	2300      	movs	r3, #0
 8003f98:	667b      	str	r3, [r7, #100]	; 0x64
 8003f9a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	d00c      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fa8:	3328      	adds	r3, #40	; 0x28
 8003faa:	2102      	movs	r1, #2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fd09 	bl	80049c4 <RCCEx_PLL3_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003fca:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fcc:	2300      	movs	r3, #0
 8003fce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fd0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	d036      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe4:	d018      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fea:	d811      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff0:	d014      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff6:	d80b      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d011      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004000:	d106      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004002:	4bb7      	ldr	r3, [pc, #732]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	4ab6      	ldr	r2, [pc, #728]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800400e:	e008      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004016:	e004      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004018:	bf00      	nop
 800401a:	e002      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800401c:	bf00      	nop
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004022:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800402a:	4bad      	ldr	r3, [pc, #692]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004038:	4aa9      	ldr	r2, [pc, #676]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800403a:	430b      	orrs	r3, r1
 800403c:	6553      	str	r3, [r2, #84]	; 0x54
 800403e:	e003      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004044:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004054:	653b      	str	r3, [r7, #80]	; 0x50
 8004056:	2300      	movs	r3, #0
 8004058:	657b      	str	r3, [r7, #84]	; 0x54
 800405a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800405e:	460b      	mov	r3, r1
 8004060:	4313      	orrs	r3, r2
 8004062:	d009      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004064:	4b9e      	ldr	r3, [pc, #632]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004068:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800406c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	4a9b      	ldr	r2, [pc, #620]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004074:	430b      	orrs	r3, r1
 8004076:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004084:	64bb      	str	r3, [r7, #72]	; 0x48
 8004086:	2300      	movs	r3, #0
 8004088:	64fb      	str	r3, [r7, #76]	; 0x4c
 800408a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800408e:	460b      	mov	r3, r1
 8004090:	4313      	orrs	r3, r2
 8004092:	d009      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004094:	4b92      	ldr	r3, [pc, #584]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004098:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800409c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040a2:	4a8f      	ldr	r2, [pc, #572]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80040a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80040b4:	643b      	str	r3, [r7, #64]	; 0x40
 80040b6:	2300      	movs	r3, #0
 80040b8:	647b      	str	r3, [r7, #68]	; 0x44
 80040ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80040be:	460b      	mov	r3, r1
 80040c0:	4313      	orrs	r3, r2
 80040c2:	d00e      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040c4:	4b86      	ldr	r3, [pc, #536]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	4a85      	ldr	r2, [pc, #532]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040ce:	6113      	str	r3, [r2, #16]
 80040d0:	4b83      	ldr	r3, [pc, #524]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040d2:	6919      	ldr	r1, [r3, #16]
 80040d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040dc:	4a80      	ldr	r2, [pc, #512]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040de:	430b      	orrs	r3, r1
 80040e0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80040e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80040ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80040f0:	2300      	movs	r3, #0
 80040f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80040f8:	460b      	mov	r3, r1
 80040fa:	4313      	orrs	r3, r2
 80040fc:	d009      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80040fe:	4b78      	ldr	r3, [pc, #480]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800410a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410c:	4a74      	ldr	r2, [pc, #464]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800410e:	430b      	orrs	r3, r1
 8004110:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800411e:	633b      	str	r3, [r7, #48]	; 0x30
 8004120:	2300      	movs	r3, #0
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
 8004124:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004128:	460b      	mov	r3, r1
 800412a:	4313      	orrs	r3, r2
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800412e:	4b6c      	ldr	r3, [pc, #432]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004132:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	4a68      	ldr	r2, [pc, #416]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004140:	430b      	orrs	r3, r1
 8004142:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	2100      	movs	r1, #0
 800414e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004156:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800415a:	460b      	mov	r3, r1
 800415c:	4313      	orrs	r3, r2
 800415e:	d011      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004164:	3308      	adds	r3, #8
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fb79 	bl	8004860 <RCCEx_PLL2_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004174:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004180:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	2100      	movs	r1, #0
 800418e:	6239      	str	r1, [r7, #32]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800419a:	460b      	mov	r3, r1
 800419c:	4313      	orrs	r3, r2
 800419e:	d011      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041a4:	3308      	adds	r3, #8
 80041a6:	2101      	movs	r1, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fb59 	bl	8004860 <RCCEx_PLL2_Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80041b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80041c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041cc:	2100      	movs	r1, #0
 80041ce:	61b9      	str	r1, [r7, #24]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80041da:	460b      	mov	r3, r1
 80041dc:	4313      	orrs	r3, r2
 80041de:	d011      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e4:	3308      	adds	r3, #8
 80041e6:	2102      	movs	r1, #2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fb39 	bl	8004860 <RCCEx_PLL2_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80041f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004200:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	2100      	movs	r1, #0
 800420e:	6139      	str	r1, [r7, #16]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800421a:	460b      	mov	r3, r1
 800421c:	4313      	orrs	r3, r2
 800421e:	d011      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004224:	3328      	adds	r3, #40	; 0x28
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fbcb 	bl	80049c4 <RCCEx_PLL3_Config>
 800422e:	4603      	mov	r3, r0
 8004230:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8004234:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004240:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	2100      	movs	r1, #0
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800425a:	460b      	mov	r3, r1
 800425c:	4313      	orrs	r3, r2
 800425e:	d011      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004264:	3328      	adds	r3, #40	; 0x28
 8004266:	2101      	movs	r1, #1
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fbab 	bl	80049c4 <RCCEx_PLL3_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004274:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004280:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	2100      	movs	r1, #0
 800428e:	6039      	str	r1, [r7, #0]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	e9d7 1200 	ldrd	r1, r2, [r7]
 800429a:	460b      	mov	r3, r1
 800429c:	4313      	orrs	r3, r2
 800429e:	d011      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042a4:	3328      	adds	r3, #40	; 0x28
 80042a6:	2102      	movs	r1, #2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fb8b 	bl	80049c4 <RCCEx_PLL3_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80042b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80042c4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	e000      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80042d8:	46bd      	mov	sp, r7
 80042da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042de:	bf00      	nop
 80042e0:	58024400 	.word	0x58024400

080042e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80042e8:	f7fe fe00 	bl	8002eec <HAL_RCC_GetHCLKFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	091b      	lsrs	r3, r3, #4
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	4904      	ldr	r1, [pc, #16]	; (800430c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80042fa:	5ccb      	ldrb	r3, [r1, r3]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004304:	4618      	mov	r0, r3
 8004306:	bd80      	pop	{r7, pc}
 8004308:	58024400 	.word	0x58024400
 800430c:	08005f58 	.word	0x08005f58

08004310 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004310:	b480      	push	{r7}
 8004312:	b089      	sub	sp, #36	; 0x24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004318:	4ba1      	ldr	r3, [pc, #644]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004322:	4b9f      	ldr	r3, [pc, #636]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	0b1b      	lsrs	r3, r3, #12
 8004328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800432c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800432e:	4b9c      	ldr	r3, [pc, #624]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800433a:	4b99      	ldr	r3, [pc, #612]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800433c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433e:	08db      	lsrs	r3, r3, #3
 8004340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8111 	beq.w	8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b02      	cmp	r3, #2
 8004362:	f000 8083 	beq.w	800446c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b02      	cmp	r3, #2
 800436a:	f200 80a1 	bhi.w	80044b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d056      	beq.n	8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800437a:	e099      	b.n	80044b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800437c:	4b88      	ldr	r3, [pc, #544]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d02d      	beq.n	80043e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004388:	4b85      	ldr	r3, [pc, #532]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	08db      	lsrs	r3, r3, #3
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	4a84      	ldr	r2, [pc, #528]	; (80045a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
 8004398:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	ee07 3a90 	vmov	s15, r3
 80043a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b2:	4b7b      	ldr	r3, [pc, #492]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80043e2:	e087      	b.n	80044f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80043f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043f6:	4b6a      	ldr	r3, [pc, #424]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004406:	ed97 6a03 	vldr	s12, [r7, #12]
 800440a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800440e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800441a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800441e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004426:	e065      	b.n	80044f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004432:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443a:	4b59      	ldr	r3, [pc, #356]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444a:	ed97 6a03 	vldr	s12, [r7, #12]
 800444e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800445e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800446a:	e043      	b.n	80044f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004476:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800447a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800447e:	4b48      	ldr	r3, [pc, #288]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800448e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004492:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800449a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044ae:	e021      	b.n	80044f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c2:	4b37      	ldr	r3, [pc, #220]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80044f4:	4b2a      	ldr	r3, [pc, #168]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	0a5b      	lsrs	r3, r3, #9
 80044fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004506:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800450a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800450e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800451a:	ee17 2a90 	vmov	r2, s15
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004522:	4b1f      	ldr	r3, [pc, #124]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	0c1b      	lsrs	r3, r3, #16
 8004528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800452c:	ee07 3a90 	vmov	s15, r3
 8004530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004534:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004538:	ee37 7a87 	vadd.f32	s14, s15, s14
 800453c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004548:	ee17 2a90 	vmov	r2, s15
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004550:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	0e1b      	lsrs	r3, r3, #24
 8004556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800456a:	edd7 6a07 	vldr	s13, [r7, #28]
 800456e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004576:	ee17 2a90 	vmov	r2, s15
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800457e:	e008      	b.n	8004592 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]
}
 8004592:	bf00      	nop
 8004594:	3724      	adds	r7, #36	; 0x24
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	58024400 	.word	0x58024400
 80045a4:	03d09000 	.word	0x03d09000
 80045a8:	46000000 	.word	0x46000000
 80045ac:	4c742400 	.word	0x4c742400
 80045b0:	4a742400 	.word	0x4a742400
 80045b4:	4af42400 	.word	0x4af42400

080045b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b089      	sub	sp, #36	; 0x24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045c0:	4ba1      	ldr	r3, [pc, #644]	; (8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80045ca:	4b9f      	ldr	r3, [pc, #636]	; (8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ce:	0d1b      	lsrs	r3, r3, #20
 80045d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80045d6:	4b9c      	ldr	r3, [pc, #624]	; (8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80045e2:	4b99      	ldr	r3, [pc, #612]	; (8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	08db      	lsrs	r3, r3, #3
 80045e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8111 	beq.w	8004828 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2b02      	cmp	r3, #2
 800460a:	f000 8083 	beq.w	8004714 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b02      	cmp	r3, #2
 8004612:	f200 80a1 	bhi.w	8004758 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d056      	beq.n	80046d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004622:	e099      	b.n	8004758 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004624:	4b88      	ldr	r3, [pc, #544]	; (8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d02d      	beq.n	800468c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004630:	4b85      	ldr	r3, [pc, #532]	; (8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	08db      	lsrs	r3, r3, #3
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	4a84      	ldr	r2, [pc, #528]	; (800484c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
 8004640:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	ee07 3a90 	vmov	s15, r3
 8004648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465a:	4b7b      	ldr	r3, [pc, #492]	; (8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004662:	ee07 3a90 	vmov	s15, r3
 8004666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466a:	ed97 6a03 	vldr	s12, [r7, #12]
 800466e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004850 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800467a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800467e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004686:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800468a:	e087      	b.n	800479c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004696:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004854 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800469a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800469e:	4b6a      	ldr	r3, [pc, #424]	; (8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80046b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004850 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ce:	e065      	b.n	800479c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e2:	4b59      	ldr	r3, [pc, #356]	; (8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004850 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800470a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004712:	e043      	b.n	800479c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800485c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004726:	4b48      	ldr	r3, [pc, #288]	; (8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004736:	ed97 6a03 	vldr	s12, [r7, #12]
 800473a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004850 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800473e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800474a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800474e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004752:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004756:	e021      	b.n	800479c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004762:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800476a:	4b37      	ldr	r3, [pc, #220]	; (8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477a:	ed97 6a03 	vldr	s12, [r7, #12]
 800477e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004850 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800478a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800478e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004796:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800479a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800479c:	4b2a      	ldr	r3, [pc, #168]	; (8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	0a5b      	lsrs	r3, r3, #9
 80047a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c2:	ee17 2a90 	vmov	r2, s15
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80047ca:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d4:	ee07 3a90 	vmov	s15, r3
 80047d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80047e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047f0:	ee17 2a90 	vmov	r2, s15
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80047f8:	4b13      	ldr	r3, [pc, #76]	; (8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	0e1b      	lsrs	r3, r3, #24
 80047fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800480e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004812:	edd7 6a07 	vldr	s13, [r7, #28]
 8004816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800481a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800481e:	ee17 2a90 	vmov	r2, s15
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004826:	e008      	b.n	800483a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	609a      	str	r2, [r3, #8]
}
 800483a:	bf00      	nop
 800483c:	3724      	adds	r7, #36	; 0x24
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	58024400 	.word	0x58024400
 800484c:	03d09000 	.word	0x03d09000
 8004850:	46000000 	.word	0x46000000
 8004854:	4c742400 	.word	0x4c742400
 8004858:	4a742400 	.word	0x4a742400
 800485c:	4af42400 	.word	0x4af42400

08004860 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800486e:	4b53      	ldr	r3, [pc, #332]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b03      	cmp	r3, #3
 8004878:	d101      	bne.n	800487e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e099      	b.n	80049b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800487e:	4b4f      	ldr	r3, [pc, #316]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a4e      	ldr	r2, [pc, #312]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004884:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488a:	f7fc fc91 	bl	80011b0 <HAL_GetTick>
 800488e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004890:	e008      	b.n	80048a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004892:	f7fc fc8d 	bl	80011b0 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e086      	b.n	80049b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048a4:	4b45      	ldr	r3, [pc, #276]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f0      	bne.n	8004892 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80048b0:	4b42      	ldr	r3, [pc, #264]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	031b      	lsls	r3, r3, #12
 80048be:	493f      	ldr	r1, [pc, #252]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	628b      	str	r3, [r1, #40]	; 0x28
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	025b      	lsls	r3, r3, #9
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	3b01      	subs	r3, #1
 80048e0:	041b      	lsls	r3, r3, #16
 80048e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	061b      	lsls	r3, r3, #24
 80048f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048f4:	4931      	ldr	r1, [pc, #196]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80048fa:	4b30      	ldr	r3, [pc, #192]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	492d      	ldr	r1, [pc, #180]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004908:	4313      	orrs	r3, r2
 800490a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800490c:	4b2b      	ldr	r3, [pc, #172]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	f023 0220 	bic.w	r2, r3, #32
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	4928      	ldr	r1, [pc, #160]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 800491a:	4313      	orrs	r3, r2
 800491c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800491e:	4b27      	ldr	r3, [pc, #156]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	4a26      	ldr	r2, [pc, #152]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004924:	f023 0310 	bic.w	r3, r3, #16
 8004928:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800492a:	4b24      	ldr	r3, [pc, #144]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 800492c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800492e:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <RCCEx_PLL2_Config+0x160>)
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	69d2      	ldr	r2, [r2, #28]
 8004936:	00d2      	lsls	r2, r2, #3
 8004938:	4920      	ldr	r1, [pc, #128]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 800493a:	4313      	orrs	r3, r2
 800493c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800493e:	4b1f      	ldr	r3, [pc, #124]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	4a1e      	ldr	r2, [pc, #120]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004944:	f043 0310 	orr.w	r3, r3, #16
 8004948:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004950:	4b1a      	ldr	r3, [pc, #104]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	4a19      	ldr	r2, [pc, #100]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800495a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800495c:	e00f      	b.n	800497e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d106      	bne.n	8004972 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004964:	4b15      	ldr	r3, [pc, #84]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	4a14      	ldr	r2, [pc, #80]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 800496a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800496e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004970:	e005      	b.n	800497e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004972:	4b12      	ldr	r3, [pc, #72]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	4a11      	ldr	r2, [pc, #68]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800497c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a0e      	ldr	r2, [pc, #56]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 8004984:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498a:	f7fc fc11 	bl	80011b0 <HAL_GetTick>
 800498e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004990:	e008      	b.n	80049a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004992:	f7fc fc0d 	bl	80011b0 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e006      	b.n	80049b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <RCCEx_PLL2_Config+0x15c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f0      	beq.n	8004992 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	58024400 	.word	0x58024400
 80049c0:	ffff0007 	.word	0xffff0007

080049c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049d2:	4b53      	ldr	r3, [pc, #332]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d101      	bne.n	80049e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e099      	b.n	8004b16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80049e2:	4b4f      	ldr	r3, [pc, #316]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a4e      	ldr	r2, [pc, #312]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 80049e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ee:	f7fc fbdf 	bl	80011b0 <HAL_GetTick>
 80049f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049f4:	e008      	b.n	8004a08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80049f6:	f7fc fbdb 	bl	80011b0 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e086      	b.n	8004b16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a08:	4b45      	ldr	r3, [pc, #276]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f0      	bne.n	80049f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a14:	4b42      	ldr	r3, [pc, #264]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	051b      	lsls	r3, r3, #20
 8004a22:	493f      	ldr	r1, [pc, #252]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	628b      	str	r3, [r1, #40]	; 0x28
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	025b      	lsls	r3, r3, #9
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	061b      	lsls	r3, r3, #24
 8004a54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a58:	4931      	ldr	r1, [pc, #196]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a5e:	4b30      	ldr	r3, [pc, #192]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	492d      	ldr	r1, [pc, #180]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a70:	4b2b      	ldr	r3, [pc, #172]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	4928      	ldr	r1, [pc, #160]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a82:	4b27      	ldr	r3, [pc, #156]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a86:	4a26      	ldr	r2, [pc, #152]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a8e:	4b24      	ldr	r3, [pc, #144]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a92:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <RCCEx_PLL3_Config+0x160>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	69d2      	ldr	r2, [r2, #28]
 8004a9a:	00d2      	lsls	r2, r2, #3
 8004a9c:	4920      	ldr	r1, [pc, #128]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004aa2:	4b1f      	ldr	r3, [pc, #124]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d106      	bne.n	8004ac2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ab4:	4b1a      	ldr	r3, [pc, #104]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	4a19      	ldr	r2, [pc, #100]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004aba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004abe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ac0:	e00f      	b.n	8004ae2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d106      	bne.n	8004ad6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ac8:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	4a14      	ldr	r2, [pc, #80]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004ace:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ad4:	e005      	b.n	8004ae2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ad6:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	4a11      	ldr	r2, [pc, #68]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004adc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ae2:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a0e      	ldr	r2, [pc, #56]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aee:	f7fc fb5f 	bl	80011b0 <HAL_GetTick>
 8004af2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004af4:	e008      	b.n	8004b08 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004af6:	f7fc fb5b 	bl	80011b0 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e006      	b.n	8004b16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b08:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <RCCEx_PLL3_Config+0x15c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0f0      	beq.n	8004af6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	58024400 	.word	0x58024400
 8004b24:	ffff0007 	.word	0xffff0007

08004b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e042      	b.n	8004bc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d106      	bne.n	8004b52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fc f96b 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2224      	movs	r2, #36	; 0x24
 8004b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0201 	bic.w	r2, r2, #1
 8004b68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fe94 	bl	80058a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f825 	bl	8004bc8 <UART_SetConfig>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e01b      	b.n	8004bc0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ba6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 ff13 	bl	80059e4 <UART_CheckIdleState>
 8004bbe:	4603      	mov	r3, r0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bcc:	b092      	sub	sp, #72	; 0x48
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4bbe      	ldr	r3, [pc, #760]	; (8004ef0 <UART_SetConfig+0x328>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4ab3      	ldr	r2, [pc, #716]	; (8004ef4 <UART_SetConfig+0x32c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d004      	beq.n	8004c34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c30:	4313      	orrs	r3, r2
 8004c32:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	4baf      	ldr	r3, [pc, #700]	; (8004ef8 <UART_SetConfig+0x330>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	f023 010f 	bic.w	r1, r3, #15
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4aa6      	ldr	r2, [pc, #664]	; (8004efc <UART_SetConfig+0x334>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d177      	bne.n	8004d58 <UART_SetConfig+0x190>
 8004c68:	4ba5      	ldr	r3, [pc, #660]	; (8004f00 <UART_SetConfig+0x338>)
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c70:	2b28      	cmp	r3, #40	; 0x28
 8004c72:	d86d      	bhi.n	8004d50 <UART_SetConfig+0x188>
 8004c74:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <UART_SetConfig+0xb4>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004d21 	.word	0x08004d21
 8004c80:	08004d51 	.word	0x08004d51
 8004c84:	08004d51 	.word	0x08004d51
 8004c88:	08004d51 	.word	0x08004d51
 8004c8c:	08004d51 	.word	0x08004d51
 8004c90:	08004d51 	.word	0x08004d51
 8004c94:	08004d51 	.word	0x08004d51
 8004c98:	08004d51 	.word	0x08004d51
 8004c9c:	08004d29 	.word	0x08004d29
 8004ca0:	08004d51 	.word	0x08004d51
 8004ca4:	08004d51 	.word	0x08004d51
 8004ca8:	08004d51 	.word	0x08004d51
 8004cac:	08004d51 	.word	0x08004d51
 8004cb0:	08004d51 	.word	0x08004d51
 8004cb4:	08004d51 	.word	0x08004d51
 8004cb8:	08004d51 	.word	0x08004d51
 8004cbc:	08004d31 	.word	0x08004d31
 8004cc0:	08004d51 	.word	0x08004d51
 8004cc4:	08004d51 	.word	0x08004d51
 8004cc8:	08004d51 	.word	0x08004d51
 8004ccc:	08004d51 	.word	0x08004d51
 8004cd0:	08004d51 	.word	0x08004d51
 8004cd4:	08004d51 	.word	0x08004d51
 8004cd8:	08004d51 	.word	0x08004d51
 8004cdc:	08004d39 	.word	0x08004d39
 8004ce0:	08004d51 	.word	0x08004d51
 8004ce4:	08004d51 	.word	0x08004d51
 8004ce8:	08004d51 	.word	0x08004d51
 8004cec:	08004d51 	.word	0x08004d51
 8004cf0:	08004d51 	.word	0x08004d51
 8004cf4:	08004d51 	.word	0x08004d51
 8004cf8:	08004d51 	.word	0x08004d51
 8004cfc:	08004d41 	.word	0x08004d41
 8004d00:	08004d51 	.word	0x08004d51
 8004d04:	08004d51 	.word	0x08004d51
 8004d08:	08004d51 	.word	0x08004d51
 8004d0c:	08004d51 	.word	0x08004d51
 8004d10:	08004d51 	.word	0x08004d51
 8004d14:	08004d51 	.word	0x08004d51
 8004d18:	08004d51 	.word	0x08004d51
 8004d1c:	08004d49 	.word	0x08004d49
 8004d20:	2301      	movs	r3, #1
 8004d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d26:	e326      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d2e:	e322      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004d30:	2308      	movs	r3, #8
 8004d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d36:	e31e      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004d38:	2310      	movs	r3, #16
 8004d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d3e:	e31a      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004d40:	2320      	movs	r3, #32
 8004d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d46:	e316      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004d48:	2340      	movs	r3, #64	; 0x40
 8004d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4e:	e312      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d56:	e30e      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a69      	ldr	r2, [pc, #420]	; (8004f04 <UART_SetConfig+0x33c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d130      	bne.n	8004dc4 <UART_SetConfig+0x1fc>
 8004d62:	4b67      	ldr	r3, [pc, #412]	; (8004f00 <UART_SetConfig+0x338>)
 8004d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	2b05      	cmp	r3, #5
 8004d6c:	d826      	bhi.n	8004dbc <UART_SetConfig+0x1f4>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <UART_SetConfig+0x1ac>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d8d 	.word	0x08004d8d
 8004d78:	08004d95 	.word	0x08004d95
 8004d7c:	08004d9d 	.word	0x08004d9d
 8004d80:	08004da5 	.word	0x08004da5
 8004d84:	08004dad 	.word	0x08004dad
 8004d88:	08004db5 	.word	0x08004db5
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d92:	e2f0      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004d94:	2304      	movs	r3, #4
 8004d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d9a:	e2ec      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004da2:	e2e8      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004da4:	2310      	movs	r3, #16
 8004da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004daa:	e2e4      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004dac:	2320      	movs	r3, #32
 8004dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004db2:	e2e0      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004db4:	2340      	movs	r3, #64	; 0x40
 8004db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dba:	e2dc      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc2:	e2d8      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a4f      	ldr	r2, [pc, #316]	; (8004f08 <UART_SetConfig+0x340>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d130      	bne.n	8004e30 <UART_SetConfig+0x268>
 8004dce:	4b4c      	ldr	r3, [pc, #304]	; (8004f00 <UART_SetConfig+0x338>)
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	2b05      	cmp	r3, #5
 8004dd8:	d826      	bhi.n	8004e28 <UART_SetConfig+0x260>
 8004dda:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <UART_SetConfig+0x218>)
 8004ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de0:	08004df9 	.word	0x08004df9
 8004de4:	08004e01 	.word	0x08004e01
 8004de8:	08004e09 	.word	0x08004e09
 8004dec:	08004e11 	.word	0x08004e11
 8004df0:	08004e19 	.word	0x08004e19
 8004df4:	08004e21 	.word	0x08004e21
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dfe:	e2ba      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004e00:	2304      	movs	r3, #4
 8004e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e06:	e2b6      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e0e:	e2b2      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004e10:	2310      	movs	r3, #16
 8004e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e16:	e2ae      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004e18:	2320      	movs	r3, #32
 8004e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e1e:	e2aa      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004e20:	2340      	movs	r3, #64	; 0x40
 8004e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e26:	e2a6      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004e28:	2380      	movs	r3, #128	; 0x80
 8004e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e2e:	e2a2      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a35      	ldr	r2, [pc, #212]	; (8004f0c <UART_SetConfig+0x344>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d130      	bne.n	8004e9c <UART_SetConfig+0x2d4>
 8004e3a:	4b31      	ldr	r3, [pc, #196]	; (8004f00 <UART_SetConfig+0x338>)
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	2b05      	cmp	r3, #5
 8004e44:	d826      	bhi.n	8004e94 <UART_SetConfig+0x2cc>
 8004e46:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <UART_SetConfig+0x284>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004e65 	.word	0x08004e65
 8004e50:	08004e6d 	.word	0x08004e6d
 8004e54:	08004e75 	.word	0x08004e75
 8004e58:	08004e7d 	.word	0x08004e7d
 8004e5c:	08004e85 	.word	0x08004e85
 8004e60:	08004e8d 	.word	0x08004e8d
 8004e64:	2300      	movs	r3, #0
 8004e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e6a:	e284      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e72:	e280      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004e74:	2308      	movs	r3, #8
 8004e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e7a:	e27c      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e82:	e278      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004e84:	2320      	movs	r3, #32
 8004e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e8a:	e274      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004e8c:	2340      	movs	r3, #64	; 0x40
 8004e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e92:	e270      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e9a:	e26c      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1b      	ldr	r2, [pc, #108]	; (8004f10 <UART_SetConfig+0x348>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d142      	bne.n	8004f2c <UART_SetConfig+0x364>
 8004ea6:	4b16      	ldr	r3, [pc, #88]	; (8004f00 <UART_SetConfig+0x338>)
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	2b05      	cmp	r3, #5
 8004eb0:	d838      	bhi.n	8004f24 <UART_SetConfig+0x35c>
 8004eb2:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0x2f0>)
 8004eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb8:	08004ed1 	.word	0x08004ed1
 8004ebc:	08004ed9 	.word	0x08004ed9
 8004ec0:	08004ee1 	.word	0x08004ee1
 8004ec4:	08004ee9 	.word	0x08004ee9
 8004ec8:	08004f15 	.word	0x08004f15
 8004ecc:	08004f1d 	.word	0x08004f1d
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed6:	e24e      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ede:	e24a      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee6:	e246      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eee:	e242      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004ef0:	cfff69f3 	.word	0xcfff69f3
 8004ef4:	58000c00 	.word	0x58000c00
 8004ef8:	11fff4ff 	.word	0x11fff4ff
 8004efc:	40011000 	.word	0x40011000
 8004f00:	58024400 	.word	0x58024400
 8004f04:	40004400 	.word	0x40004400
 8004f08:	40004800 	.word	0x40004800
 8004f0c:	40004c00 	.word	0x40004c00
 8004f10:	40005000 	.word	0x40005000
 8004f14:	2320      	movs	r3, #32
 8004f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f1a:	e22c      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004f1c:	2340      	movs	r3, #64	; 0x40
 8004f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f22:	e228      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f2a:	e224      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4ab1      	ldr	r2, [pc, #708]	; (80051f8 <UART_SetConfig+0x630>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d176      	bne.n	8005024 <UART_SetConfig+0x45c>
 8004f36:	4bb1      	ldr	r3, [pc, #708]	; (80051fc <UART_SetConfig+0x634>)
 8004f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f3e:	2b28      	cmp	r3, #40	; 0x28
 8004f40:	d86c      	bhi.n	800501c <UART_SetConfig+0x454>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <UART_SetConfig+0x380>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004fed 	.word	0x08004fed
 8004f4c:	0800501d 	.word	0x0800501d
 8004f50:	0800501d 	.word	0x0800501d
 8004f54:	0800501d 	.word	0x0800501d
 8004f58:	0800501d 	.word	0x0800501d
 8004f5c:	0800501d 	.word	0x0800501d
 8004f60:	0800501d 	.word	0x0800501d
 8004f64:	0800501d 	.word	0x0800501d
 8004f68:	08004ff5 	.word	0x08004ff5
 8004f6c:	0800501d 	.word	0x0800501d
 8004f70:	0800501d 	.word	0x0800501d
 8004f74:	0800501d 	.word	0x0800501d
 8004f78:	0800501d 	.word	0x0800501d
 8004f7c:	0800501d 	.word	0x0800501d
 8004f80:	0800501d 	.word	0x0800501d
 8004f84:	0800501d 	.word	0x0800501d
 8004f88:	08004ffd 	.word	0x08004ffd
 8004f8c:	0800501d 	.word	0x0800501d
 8004f90:	0800501d 	.word	0x0800501d
 8004f94:	0800501d 	.word	0x0800501d
 8004f98:	0800501d 	.word	0x0800501d
 8004f9c:	0800501d 	.word	0x0800501d
 8004fa0:	0800501d 	.word	0x0800501d
 8004fa4:	0800501d 	.word	0x0800501d
 8004fa8:	08005005 	.word	0x08005005
 8004fac:	0800501d 	.word	0x0800501d
 8004fb0:	0800501d 	.word	0x0800501d
 8004fb4:	0800501d 	.word	0x0800501d
 8004fb8:	0800501d 	.word	0x0800501d
 8004fbc:	0800501d 	.word	0x0800501d
 8004fc0:	0800501d 	.word	0x0800501d
 8004fc4:	0800501d 	.word	0x0800501d
 8004fc8:	0800500d 	.word	0x0800500d
 8004fcc:	0800501d 	.word	0x0800501d
 8004fd0:	0800501d 	.word	0x0800501d
 8004fd4:	0800501d 	.word	0x0800501d
 8004fd8:	0800501d 	.word	0x0800501d
 8004fdc:	0800501d 	.word	0x0800501d
 8004fe0:	0800501d 	.word	0x0800501d
 8004fe4:	0800501d 	.word	0x0800501d
 8004fe8:	08005015 	.word	0x08005015
 8004fec:	2301      	movs	r3, #1
 8004fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff2:	e1c0      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffa:	e1bc      	b.n	8005376 <UART_SetConfig+0x7ae>
 8004ffc:	2308      	movs	r3, #8
 8004ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005002:	e1b8      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005004:	2310      	movs	r3, #16
 8005006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500a:	e1b4      	b.n	8005376 <UART_SetConfig+0x7ae>
 800500c:	2320      	movs	r3, #32
 800500e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005012:	e1b0      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005014:	2340      	movs	r3, #64	; 0x40
 8005016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501a:	e1ac      	b.n	8005376 <UART_SetConfig+0x7ae>
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005022:	e1a8      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a75      	ldr	r2, [pc, #468]	; (8005200 <UART_SetConfig+0x638>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d130      	bne.n	8005090 <UART_SetConfig+0x4c8>
 800502e:	4b73      	ldr	r3, [pc, #460]	; (80051fc <UART_SetConfig+0x634>)
 8005030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	2b05      	cmp	r3, #5
 8005038:	d826      	bhi.n	8005088 <UART_SetConfig+0x4c0>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <UART_SetConfig+0x478>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005059 	.word	0x08005059
 8005044:	08005061 	.word	0x08005061
 8005048:	08005069 	.word	0x08005069
 800504c:	08005071 	.word	0x08005071
 8005050:	08005079 	.word	0x08005079
 8005054:	08005081 	.word	0x08005081
 8005058:	2300      	movs	r3, #0
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800505e:	e18a      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005060:	2304      	movs	r3, #4
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005066:	e186      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005068:	2308      	movs	r3, #8
 800506a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506e:	e182      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005070:	2310      	movs	r3, #16
 8005072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005076:	e17e      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005078:	2320      	movs	r3, #32
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507e:	e17a      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005080:	2340      	movs	r3, #64	; 0x40
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005086:	e176      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508e:	e172      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a5b      	ldr	r2, [pc, #364]	; (8005204 <UART_SetConfig+0x63c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d130      	bne.n	80050fc <UART_SetConfig+0x534>
 800509a:	4b58      	ldr	r3, [pc, #352]	; (80051fc <UART_SetConfig+0x634>)
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d826      	bhi.n	80050f4 <UART_SetConfig+0x52c>
 80050a6:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <UART_SetConfig+0x4e4>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050c5 	.word	0x080050c5
 80050b0:	080050cd 	.word	0x080050cd
 80050b4:	080050d5 	.word	0x080050d5
 80050b8:	080050dd 	.word	0x080050dd
 80050bc:	080050e5 	.word	0x080050e5
 80050c0:	080050ed 	.word	0x080050ed
 80050c4:	2300      	movs	r3, #0
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ca:	e154      	b.n	8005376 <UART_SetConfig+0x7ae>
 80050cc:	2304      	movs	r3, #4
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d2:	e150      	b.n	8005376 <UART_SetConfig+0x7ae>
 80050d4:	2308      	movs	r3, #8
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050da:	e14c      	b.n	8005376 <UART_SetConfig+0x7ae>
 80050dc:	2310      	movs	r3, #16
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e2:	e148      	b.n	8005376 <UART_SetConfig+0x7ae>
 80050e4:	2320      	movs	r3, #32
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ea:	e144      	b.n	8005376 <UART_SetConfig+0x7ae>
 80050ec:	2340      	movs	r3, #64	; 0x40
 80050ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f2:	e140      	b.n	8005376 <UART_SetConfig+0x7ae>
 80050f4:	2380      	movs	r3, #128	; 0x80
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fa:	e13c      	b.n	8005376 <UART_SetConfig+0x7ae>
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a41      	ldr	r2, [pc, #260]	; (8005208 <UART_SetConfig+0x640>)
 8005102:	4293      	cmp	r3, r2
 8005104:	f040 8082 	bne.w	800520c <UART_SetConfig+0x644>
 8005108:	4b3c      	ldr	r3, [pc, #240]	; (80051fc <UART_SetConfig+0x634>)
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005110:	2b28      	cmp	r3, #40	; 0x28
 8005112:	d86d      	bhi.n	80051f0 <UART_SetConfig+0x628>
 8005114:	a201      	add	r2, pc, #4	; (adr r2, 800511c <UART_SetConfig+0x554>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	080051c1 	.word	0x080051c1
 8005120:	080051f1 	.word	0x080051f1
 8005124:	080051f1 	.word	0x080051f1
 8005128:	080051f1 	.word	0x080051f1
 800512c:	080051f1 	.word	0x080051f1
 8005130:	080051f1 	.word	0x080051f1
 8005134:	080051f1 	.word	0x080051f1
 8005138:	080051f1 	.word	0x080051f1
 800513c:	080051c9 	.word	0x080051c9
 8005140:	080051f1 	.word	0x080051f1
 8005144:	080051f1 	.word	0x080051f1
 8005148:	080051f1 	.word	0x080051f1
 800514c:	080051f1 	.word	0x080051f1
 8005150:	080051f1 	.word	0x080051f1
 8005154:	080051f1 	.word	0x080051f1
 8005158:	080051f1 	.word	0x080051f1
 800515c:	080051d1 	.word	0x080051d1
 8005160:	080051f1 	.word	0x080051f1
 8005164:	080051f1 	.word	0x080051f1
 8005168:	080051f1 	.word	0x080051f1
 800516c:	080051f1 	.word	0x080051f1
 8005170:	080051f1 	.word	0x080051f1
 8005174:	080051f1 	.word	0x080051f1
 8005178:	080051f1 	.word	0x080051f1
 800517c:	080051d9 	.word	0x080051d9
 8005180:	080051f1 	.word	0x080051f1
 8005184:	080051f1 	.word	0x080051f1
 8005188:	080051f1 	.word	0x080051f1
 800518c:	080051f1 	.word	0x080051f1
 8005190:	080051f1 	.word	0x080051f1
 8005194:	080051f1 	.word	0x080051f1
 8005198:	080051f1 	.word	0x080051f1
 800519c:	080051e1 	.word	0x080051e1
 80051a0:	080051f1 	.word	0x080051f1
 80051a4:	080051f1 	.word	0x080051f1
 80051a8:	080051f1 	.word	0x080051f1
 80051ac:	080051f1 	.word	0x080051f1
 80051b0:	080051f1 	.word	0x080051f1
 80051b4:	080051f1 	.word	0x080051f1
 80051b8:	080051f1 	.word	0x080051f1
 80051bc:	080051e9 	.word	0x080051e9
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c6:	e0d6      	b.n	8005376 <UART_SetConfig+0x7ae>
 80051c8:	2304      	movs	r3, #4
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ce:	e0d2      	b.n	8005376 <UART_SetConfig+0x7ae>
 80051d0:	2308      	movs	r3, #8
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d6:	e0ce      	b.n	8005376 <UART_SetConfig+0x7ae>
 80051d8:	2310      	movs	r3, #16
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051de:	e0ca      	b.n	8005376 <UART_SetConfig+0x7ae>
 80051e0:	2320      	movs	r3, #32
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e6:	e0c6      	b.n	8005376 <UART_SetConfig+0x7ae>
 80051e8:	2340      	movs	r3, #64	; 0x40
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ee:	e0c2      	b.n	8005376 <UART_SetConfig+0x7ae>
 80051f0:	2380      	movs	r3, #128	; 0x80
 80051f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f6:	e0be      	b.n	8005376 <UART_SetConfig+0x7ae>
 80051f8:	40011400 	.word	0x40011400
 80051fc:	58024400 	.word	0x58024400
 8005200:	40007800 	.word	0x40007800
 8005204:	40007c00 	.word	0x40007c00
 8005208:	40011800 	.word	0x40011800
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4aad      	ldr	r2, [pc, #692]	; (80054c8 <UART_SetConfig+0x900>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d176      	bne.n	8005304 <UART_SetConfig+0x73c>
 8005216:	4bad      	ldr	r3, [pc, #692]	; (80054cc <UART_SetConfig+0x904>)
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800521e:	2b28      	cmp	r3, #40	; 0x28
 8005220:	d86c      	bhi.n	80052fc <UART_SetConfig+0x734>
 8005222:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <UART_SetConfig+0x660>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	080052cd 	.word	0x080052cd
 800522c:	080052fd 	.word	0x080052fd
 8005230:	080052fd 	.word	0x080052fd
 8005234:	080052fd 	.word	0x080052fd
 8005238:	080052fd 	.word	0x080052fd
 800523c:	080052fd 	.word	0x080052fd
 8005240:	080052fd 	.word	0x080052fd
 8005244:	080052fd 	.word	0x080052fd
 8005248:	080052d5 	.word	0x080052d5
 800524c:	080052fd 	.word	0x080052fd
 8005250:	080052fd 	.word	0x080052fd
 8005254:	080052fd 	.word	0x080052fd
 8005258:	080052fd 	.word	0x080052fd
 800525c:	080052fd 	.word	0x080052fd
 8005260:	080052fd 	.word	0x080052fd
 8005264:	080052fd 	.word	0x080052fd
 8005268:	080052dd 	.word	0x080052dd
 800526c:	080052fd 	.word	0x080052fd
 8005270:	080052fd 	.word	0x080052fd
 8005274:	080052fd 	.word	0x080052fd
 8005278:	080052fd 	.word	0x080052fd
 800527c:	080052fd 	.word	0x080052fd
 8005280:	080052fd 	.word	0x080052fd
 8005284:	080052fd 	.word	0x080052fd
 8005288:	080052e5 	.word	0x080052e5
 800528c:	080052fd 	.word	0x080052fd
 8005290:	080052fd 	.word	0x080052fd
 8005294:	080052fd 	.word	0x080052fd
 8005298:	080052fd 	.word	0x080052fd
 800529c:	080052fd 	.word	0x080052fd
 80052a0:	080052fd 	.word	0x080052fd
 80052a4:	080052fd 	.word	0x080052fd
 80052a8:	080052ed 	.word	0x080052ed
 80052ac:	080052fd 	.word	0x080052fd
 80052b0:	080052fd 	.word	0x080052fd
 80052b4:	080052fd 	.word	0x080052fd
 80052b8:	080052fd 	.word	0x080052fd
 80052bc:	080052fd 	.word	0x080052fd
 80052c0:	080052fd 	.word	0x080052fd
 80052c4:	080052fd 	.word	0x080052fd
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d2:	e050      	b.n	8005376 <UART_SetConfig+0x7ae>
 80052d4:	2304      	movs	r3, #4
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052da:	e04c      	b.n	8005376 <UART_SetConfig+0x7ae>
 80052dc:	2308      	movs	r3, #8
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e2:	e048      	b.n	8005376 <UART_SetConfig+0x7ae>
 80052e4:	2310      	movs	r3, #16
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ea:	e044      	b.n	8005376 <UART_SetConfig+0x7ae>
 80052ec:	2320      	movs	r3, #32
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f2:	e040      	b.n	8005376 <UART_SetConfig+0x7ae>
 80052f4:	2340      	movs	r3, #64	; 0x40
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fa:	e03c      	b.n	8005376 <UART_SetConfig+0x7ae>
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005302:	e038      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a71      	ldr	r2, [pc, #452]	; (80054d0 <UART_SetConfig+0x908>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d130      	bne.n	8005370 <UART_SetConfig+0x7a8>
 800530e:	4b6f      	ldr	r3, [pc, #444]	; (80054cc <UART_SetConfig+0x904>)
 8005310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	2b05      	cmp	r3, #5
 8005318:	d826      	bhi.n	8005368 <UART_SetConfig+0x7a0>
 800531a:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <UART_SetConfig+0x758>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005339 	.word	0x08005339
 8005324:	08005341 	.word	0x08005341
 8005328:	08005349 	.word	0x08005349
 800532c:	08005351 	.word	0x08005351
 8005330:	08005359 	.word	0x08005359
 8005334:	08005361 	.word	0x08005361
 8005338:	2302      	movs	r3, #2
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800533e:	e01a      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005340:	2304      	movs	r3, #4
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005346:	e016      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005348:	2308      	movs	r3, #8
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534e:	e012      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005350:	2310      	movs	r3, #16
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005356:	e00e      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005358:	2320      	movs	r3, #32
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535e:	e00a      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005360:	2340      	movs	r3, #64	; 0x40
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005366:	e006      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536e:	e002      	b.n	8005376 <UART_SetConfig+0x7ae>
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a55      	ldr	r2, [pc, #340]	; (80054d0 <UART_SetConfig+0x908>)
 800537c:	4293      	cmp	r3, r2
 800537e:	f040 80f8 	bne.w	8005572 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005382:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005386:	2b20      	cmp	r3, #32
 8005388:	dc46      	bgt.n	8005418 <UART_SetConfig+0x850>
 800538a:	2b02      	cmp	r3, #2
 800538c:	db75      	blt.n	800547a <UART_SetConfig+0x8b2>
 800538e:	3b02      	subs	r3, #2
 8005390:	2b1e      	cmp	r3, #30
 8005392:	d872      	bhi.n	800547a <UART_SetConfig+0x8b2>
 8005394:	a201      	add	r2, pc, #4	; (adr r2, 800539c <UART_SetConfig+0x7d4>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	0800541f 	.word	0x0800541f
 80053a0:	0800547b 	.word	0x0800547b
 80053a4:	08005427 	.word	0x08005427
 80053a8:	0800547b 	.word	0x0800547b
 80053ac:	0800547b 	.word	0x0800547b
 80053b0:	0800547b 	.word	0x0800547b
 80053b4:	08005437 	.word	0x08005437
 80053b8:	0800547b 	.word	0x0800547b
 80053bc:	0800547b 	.word	0x0800547b
 80053c0:	0800547b 	.word	0x0800547b
 80053c4:	0800547b 	.word	0x0800547b
 80053c8:	0800547b 	.word	0x0800547b
 80053cc:	0800547b 	.word	0x0800547b
 80053d0:	0800547b 	.word	0x0800547b
 80053d4:	08005447 	.word	0x08005447
 80053d8:	0800547b 	.word	0x0800547b
 80053dc:	0800547b 	.word	0x0800547b
 80053e0:	0800547b 	.word	0x0800547b
 80053e4:	0800547b 	.word	0x0800547b
 80053e8:	0800547b 	.word	0x0800547b
 80053ec:	0800547b 	.word	0x0800547b
 80053f0:	0800547b 	.word	0x0800547b
 80053f4:	0800547b 	.word	0x0800547b
 80053f8:	0800547b 	.word	0x0800547b
 80053fc:	0800547b 	.word	0x0800547b
 8005400:	0800547b 	.word	0x0800547b
 8005404:	0800547b 	.word	0x0800547b
 8005408:	0800547b 	.word	0x0800547b
 800540c:	0800547b 	.word	0x0800547b
 8005410:	0800547b 	.word	0x0800547b
 8005414:	0800546d 	.word	0x0800546d
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	d02a      	beq.n	8005472 <UART_SetConfig+0x8aa>
 800541c:	e02d      	b.n	800547a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800541e:	f7fe ff61 	bl	80042e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005422:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005424:	e02f      	b.n	8005486 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe ff70 	bl	8004310 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005434:	e027      	b.n	8005486 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005436:	f107 0318 	add.w	r3, r7, #24
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff f8bc 	bl	80045b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005444:	e01f      	b.n	8005486 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005446:	4b21      	ldr	r3, [pc, #132]	; (80054cc <UART_SetConfig+0x904>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d009      	beq.n	8005466 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005452:	4b1e      	ldr	r3, [pc, #120]	; (80054cc <UART_SetConfig+0x904>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	08db      	lsrs	r3, r3, #3
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <UART_SetConfig+0x90c>)
 800545e:	fa22 f303 	lsr.w	r3, r2, r3
 8005462:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005464:	e00f      	b.n	8005486 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005466:	4b1b      	ldr	r3, [pc, #108]	; (80054d4 <UART_SetConfig+0x90c>)
 8005468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800546a:	e00c      	b.n	8005486 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800546c:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <UART_SetConfig+0x910>)
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005470:	e009      	b.n	8005486 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005478:	e005      	b.n	8005486 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005484:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 81ee 	beq.w	800586a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	4a12      	ldr	r2, [pc, #72]	; (80054dc <UART_SetConfig+0x914>)
 8005494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005498:	461a      	mov	r2, r3
 800549a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549c:	fbb3 f3f2 	udiv	r3, r3, r2
 80054a0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	4413      	add	r3, r2
 80054ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d305      	bcc.n	80054be <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d910      	bls.n	80054e0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80054c4:	e1d1      	b.n	800586a <UART_SetConfig+0xca2>
 80054c6:	bf00      	nop
 80054c8:	40011c00 	.word	0x40011c00
 80054cc:	58024400 	.word	0x58024400
 80054d0:	58000c00 	.word	0x58000c00
 80054d4:	03d09000 	.word	0x03d09000
 80054d8:	003d0900 	.word	0x003d0900
 80054dc:	08005f68 	.word	0x08005f68
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e2:	2200      	movs	r2, #0
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	60fa      	str	r2, [r7, #12]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	4ac0      	ldr	r2, [pc, #768]	; (80057f0 <UART_SetConfig+0xc28>)
 80054ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2200      	movs	r2, #0
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005502:	f7fa ff03 	bl	800030c <__aeabi_uldivmod>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4610      	mov	r0, r2
 800550c:	4619      	mov	r1, r3
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	020b      	lsls	r3, r1, #8
 8005518:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800551c:	0202      	lsls	r2, r0, #8
 800551e:	6979      	ldr	r1, [r7, #20]
 8005520:	6849      	ldr	r1, [r1, #4]
 8005522:	0849      	lsrs	r1, r1, #1
 8005524:	2000      	movs	r0, #0
 8005526:	460c      	mov	r4, r1
 8005528:	4605      	mov	r5, r0
 800552a:	eb12 0804 	adds.w	r8, r2, r4
 800552e:	eb43 0905 	adc.w	r9, r3, r5
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	469a      	mov	sl, r3
 800553a:	4693      	mov	fp, r2
 800553c:	4652      	mov	r2, sl
 800553e:	465b      	mov	r3, fp
 8005540:	4640      	mov	r0, r8
 8005542:	4649      	mov	r1, r9
 8005544:	f7fa fee2 	bl	800030c <__aeabi_uldivmod>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4613      	mov	r3, r2
 800554e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005556:	d308      	bcc.n	800556a <UART_SetConfig+0x9a2>
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800555e:	d204      	bcs.n	800556a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005566:	60da      	str	r2, [r3, #12]
 8005568:	e17f      	b.n	800586a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005570:	e17b      	b.n	800586a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800557a:	f040 80bd 	bne.w	80056f8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800557e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005582:	2b20      	cmp	r3, #32
 8005584:	dc48      	bgt.n	8005618 <UART_SetConfig+0xa50>
 8005586:	2b00      	cmp	r3, #0
 8005588:	db7b      	blt.n	8005682 <UART_SetConfig+0xaba>
 800558a:	2b20      	cmp	r3, #32
 800558c:	d879      	bhi.n	8005682 <UART_SetConfig+0xaba>
 800558e:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <UART_SetConfig+0x9cc>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	0800561f 	.word	0x0800561f
 8005598:	08005627 	.word	0x08005627
 800559c:	08005683 	.word	0x08005683
 80055a0:	08005683 	.word	0x08005683
 80055a4:	0800562f 	.word	0x0800562f
 80055a8:	08005683 	.word	0x08005683
 80055ac:	08005683 	.word	0x08005683
 80055b0:	08005683 	.word	0x08005683
 80055b4:	0800563f 	.word	0x0800563f
 80055b8:	08005683 	.word	0x08005683
 80055bc:	08005683 	.word	0x08005683
 80055c0:	08005683 	.word	0x08005683
 80055c4:	08005683 	.word	0x08005683
 80055c8:	08005683 	.word	0x08005683
 80055cc:	08005683 	.word	0x08005683
 80055d0:	08005683 	.word	0x08005683
 80055d4:	0800564f 	.word	0x0800564f
 80055d8:	08005683 	.word	0x08005683
 80055dc:	08005683 	.word	0x08005683
 80055e0:	08005683 	.word	0x08005683
 80055e4:	08005683 	.word	0x08005683
 80055e8:	08005683 	.word	0x08005683
 80055ec:	08005683 	.word	0x08005683
 80055f0:	08005683 	.word	0x08005683
 80055f4:	08005683 	.word	0x08005683
 80055f8:	08005683 	.word	0x08005683
 80055fc:	08005683 	.word	0x08005683
 8005600:	08005683 	.word	0x08005683
 8005604:	08005683 	.word	0x08005683
 8005608:	08005683 	.word	0x08005683
 800560c:	08005683 	.word	0x08005683
 8005610:	08005683 	.word	0x08005683
 8005614:	08005675 	.word	0x08005675
 8005618:	2b40      	cmp	r3, #64	; 0x40
 800561a:	d02e      	beq.n	800567a <UART_SetConfig+0xab2>
 800561c:	e031      	b.n	8005682 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800561e:	f7fd fc95 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8005622:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005624:	e033      	b.n	800568e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005626:	f7fd fca7 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 800562a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800562c:	e02f      	b.n	800568e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800562e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005632:	4618      	mov	r0, r3
 8005634:	f7fe fe6c 	bl	8004310 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800563c:	e027      	b.n	800568e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800563e:	f107 0318 	add.w	r3, r7, #24
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe ffb8 	bl	80045b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800564c:	e01f      	b.n	800568e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800564e:	4b69      	ldr	r3, [pc, #420]	; (80057f4 <UART_SetConfig+0xc2c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d009      	beq.n	800566e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800565a:	4b66      	ldr	r3, [pc, #408]	; (80057f4 <UART_SetConfig+0xc2c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	08db      	lsrs	r3, r3, #3
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	4a64      	ldr	r2, [pc, #400]	; (80057f8 <UART_SetConfig+0xc30>)
 8005666:	fa22 f303 	lsr.w	r3, r2, r3
 800566a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800566c:	e00f      	b.n	800568e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800566e:	4b62      	ldr	r3, [pc, #392]	; (80057f8 <UART_SetConfig+0xc30>)
 8005670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005672:	e00c      	b.n	800568e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005674:	4b61      	ldr	r3, [pc, #388]	; (80057fc <UART_SetConfig+0xc34>)
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005678:	e009      	b.n	800568e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800567a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005680:	e005      	b.n	800568e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800568c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800568e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80ea 	beq.w	800586a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	4a55      	ldr	r2, [pc, #340]	; (80057f0 <UART_SetConfig+0xc28>)
 800569c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056a0:	461a      	mov	r2, r3
 80056a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80056a8:	005a      	lsls	r2, r3, #1
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	441a      	add	r2, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	2b0f      	cmp	r3, #15
 80056c0:	d916      	bls.n	80056f0 <UART_SetConfig+0xb28>
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c8:	d212      	bcs.n	80056f0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f023 030f 	bic.w	r3, r3, #15
 80056d2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	085b      	lsrs	r3, r3, #1
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	b29a      	uxth	r2, r3
 80056e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056e2:	4313      	orrs	r3, r2
 80056e4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80056ec:	60da      	str	r2, [r3, #12]
 80056ee:	e0bc      	b.n	800586a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80056f6:	e0b8      	b.n	800586a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	dc4b      	bgt.n	8005798 <UART_SetConfig+0xbd0>
 8005700:	2b00      	cmp	r3, #0
 8005702:	f2c0 8087 	blt.w	8005814 <UART_SetConfig+0xc4c>
 8005706:	2b20      	cmp	r3, #32
 8005708:	f200 8084 	bhi.w	8005814 <UART_SetConfig+0xc4c>
 800570c:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <UART_SetConfig+0xb4c>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	0800579f 	.word	0x0800579f
 8005718:	080057a7 	.word	0x080057a7
 800571c:	08005815 	.word	0x08005815
 8005720:	08005815 	.word	0x08005815
 8005724:	080057af 	.word	0x080057af
 8005728:	08005815 	.word	0x08005815
 800572c:	08005815 	.word	0x08005815
 8005730:	08005815 	.word	0x08005815
 8005734:	080057bf 	.word	0x080057bf
 8005738:	08005815 	.word	0x08005815
 800573c:	08005815 	.word	0x08005815
 8005740:	08005815 	.word	0x08005815
 8005744:	08005815 	.word	0x08005815
 8005748:	08005815 	.word	0x08005815
 800574c:	08005815 	.word	0x08005815
 8005750:	08005815 	.word	0x08005815
 8005754:	080057cf 	.word	0x080057cf
 8005758:	08005815 	.word	0x08005815
 800575c:	08005815 	.word	0x08005815
 8005760:	08005815 	.word	0x08005815
 8005764:	08005815 	.word	0x08005815
 8005768:	08005815 	.word	0x08005815
 800576c:	08005815 	.word	0x08005815
 8005770:	08005815 	.word	0x08005815
 8005774:	08005815 	.word	0x08005815
 8005778:	08005815 	.word	0x08005815
 800577c:	08005815 	.word	0x08005815
 8005780:	08005815 	.word	0x08005815
 8005784:	08005815 	.word	0x08005815
 8005788:	08005815 	.word	0x08005815
 800578c:	08005815 	.word	0x08005815
 8005790:	08005815 	.word	0x08005815
 8005794:	08005807 	.word	0x08005807
 8005798:	2b40      	cmp	r3, #64	; 0x40
 800579a:	d037      	beq.n	800580c <UART_SetConfig+0xc44>
 800579c:	e03a      	b.n	8005814 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800579e:	f7fd fbd5 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 80057a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057a4:	e03c      	b.n	8005820 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a6:	f7fd fbe7 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 80057aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057ac:	e038      	b.n	8005820 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe fdac 	bl	8004310 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057bc:	e030      	b.n	8005820 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057be:	f107 0318 	add.w	r3, r7, #24
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fef8 	bl	80045b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057cc:	e028      	b.n	8005820 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ce:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <UART_SetConfig+0xc2c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d012      	beq.n	8005800 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057da:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <UART_SetConfig+0xc2c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	08db      	lsrs	r3, r3, #3
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	4a04      	ldr	r2, [pc, #16]	; (80057f8 <UART_SetConfig+0xc30>)
 80057e6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057ec:	e018      	b.n	8005820 <UART_SetConfig+0xc58>
 80057ee:	bf00      	nop
 80057f0:	08005f68 	.word	0x08005f68
 80057f4:	58024400 	.word	0x58024400
 80057f8:	03d09000 	.word	0x03d09000
 80057fc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005800:	4b24      	ldr	r3, [pc, #144]	; (8005894 <UART_SetConfig+0xccc>)
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005804:	e00c      	b.n	8005820 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005806:	4b24      	ldr	r3, [pc, #144]	; (8005898 <UART_SetConfig+0xcd0>)
 8005808:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800580a:	e009      	b.n	8005820 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005810:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005812:	e005      	b.n	8005820 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800581e:	bf00      	nop
    }

    if (pclk != 0U)
 8005820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d021      	beq.n	800586a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	4a1c      	ldr	r2, [pc, #112]	; (800589c <UART_SetConfig+0xcd4>)
 800582c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005830:	461a      	mov	r2, r3
 8005832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005834:	fbb3 f2f2 	udiv	r2, r3, r2
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	441a      	add	r2, r3
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	fbb2 f3f3 	udiv	r3, r2, r3
 8005848:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	2b0f      	cmp	r3, #15
 800584e:	d909      	bls.n	8005864 <UART_SetConfig+0xc9c>
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005856:	d205      	bcs.n	8005864 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	b29a      	uxth	r2, r3
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	60da      	str	r2, [r3, #12]
 8005862:	e002      	b.n	800586a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2201      	movs	r2, #1
 800586e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2201      	movs	r2, #1
 8005876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2200      	movs	r2, #0
 800587e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2200      	movs	r2, #0
 8005884:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005886:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800588a:	4618      	mov	r0, r3
 800588c:	3748      	adds	r7, #72	; 0x48
 800588e:	46bd      	mov	sp, r7
 8005890:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005894:	03d09000 	.word	0x03d09000
 8005898:	003d0900 	.word	0x003d0900
 800589c:	08005f68 	.word	0x08005f68

080058a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00a      	beq.n	800590e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01a      	beq.n	80059b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800599e:	d10a      	bne.n	80059b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	605a      	str	r2, [r3, #4]
  }
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b098      	sub	sp, #96	; 0x60
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059f4:	f7fb fbdc 	bl	80011b0 <HAL_GetTick>
 80059f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d12f      	bne.n	8005a68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a10:	2200      	movs	r2, #0
 8005a12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f88e 	bl	8005b38 <UART_WaitOnFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d022      	beq.n	8005a68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a36:	653b      	str	r3, [r7, #80]	; 0x50
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a40:	647b      	str	r3, [r7, #68]	; 0x44
 8005a42:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e6      	bne.n	8005a22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e063      	b.n	8005b30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d149      	bne.n	8005b0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f857 	bl	8005b38 <UART_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d03c      	beq.n	8005b0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aae:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab6:	e841 2300 	strex	r3, r2, [r1]
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e6      	bne.n	8005a90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f023 0301 	bic.w	r3, r3, #1
 8005ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ae2:	61fa      	str	r2, [r7, #28]
 8005ae4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	69b9      	ldr	r1, [r7, #24]
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	617b      	str	r3, [r7, #20]
   return(result);
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e5      	bne.n	8005ac2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e012      	b.n	8005b30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3758      	adds	r7, #88	; 0x58
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b48:	e04f      	b.n	8005bea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b50:	d04b      	beq.n	8005bea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b52:	f7fb fb2d 	bl	80011b0 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d302      	bcc.n	8005b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e04e      	b.n	8005c0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d037      	beq.n	8005bea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b80      	cmp	r3, #128	; 0x80
 8005b7e:	d034      	beq.n	8005bea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b40      	cmp	r3, #64	; 0x40
 8005b84:	d031      	beq.n	8005bea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f003 0308 	and.w	r3, r3, #8
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d110      	bne.n	8005bb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2208      	movs	r2, #8
 8005b9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f839 	bl	8005c14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2208      	movs	r2, #8
 8005ba6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e029      	b.n	8005c0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc4:	d111      	bne.n	8005bea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f81f 	bl	8005c14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e00f      	b.n	8005c0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	bf0c      	ite	eq
 8005bfa:	2301      	moveq	r3, #1
 8005bfc:	2300      	movne	r3, #0
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	461a      	mov	r2, r3
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d0a0      	beq.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b095      	sub	sp, #84	; 0x54
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c42:	e841 2300 	strex	r3, r2, [r1]
 8005c46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e6      	bne.n	8005c1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3308      	adds	r3, #8
 8005c54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	4b1e      	ldr	r3, [pc, #120]	; (8005cdc <UART_EndRxTransfer+0xc8>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c76:	e841 2300 	strex	r3, r2, [r1]
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1e5      	bne.n	8005c4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d118      	bne.n	8005cbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	e853 3f00 	ldrex	r3, [r3]
 8005c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f023 0310 	bic.w	r3, r3, #16
 8005c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	6979      	ldr	r1, [r7, #20]
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e6      	bne.n	8005c8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005cd0:	bf00      	nop
 8005cd2:	3754      	adds	r7, #84	; 0x54
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	effffffe 	.word	0xeffffffe

08005ce0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e027      	b.n	8005d46 <HAL_UARTEx_DisableFifoMode+0x66>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2224      	movs	r2, #36	; 0x24
 8005d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e02d      	b.n	8005dc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2224      	movs	r2, #36	; 0x24
 8005d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f850 	bl	8005e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e02d      	b.n	8005e42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2224      	movs	r2, #36	; 0x24
 8005df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0201 	bic.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f812 	bl	8005e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d108      	bne.n	8005e6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e6c:	e031      	b.n	8005ed2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e6e:	2310      	movs	r3, #16
 8005e70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e72:	2310      	movs	r3, #16
 8005e74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	0e5b      	lsrs	r3, r3, #25
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	0f5b      	lsrs	r3, r3, #29
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e96:	7bbb      	ldrb	r3, [r7, #14]
 8005e98:	7b3a      	ldrb	r2, [r7, #12]
 8005e9a:	4911      	ldr	r1, [pc, #68]	; (8005ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8005e9c:	5c8a      	ldrb	r2, [r1, r2]
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ea2:	7b3a      	ldrb	r2, [r7, #12]
 8005ea4:	490f      	ldr	r1, [pc, #60]	; (8005ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8005ea6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ea8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	7b7a      	ldrb	r2, [r7, #13]
 8005eb8:	4909      	ldr	r1, [pc, #36]	; (8005ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8005eba:	5c8a      	ldrb	r2, [r1, r2]
 8005ebc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ec0:	7b7a      	ldrb	r2, [r7, #13]
 8005ec2:	4908      	ldr	r1, [pc, #32]	; (8005ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8005ec4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ec6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ed2:	bf00      	nop
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	08005f80 	.word	0x08005f80
 8005ee4:	08005f88 	.word	0x08005f88

08005ee8 <memset>:
 8005ee8:	4402      	add	r2, r0
 8005eea:	4603      	mov	r3, r0
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d100      	bne.n	8005ef2 <memset+0xa>
 8005ef0:	4770      	bx	lr
 8005ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ef6:	e7f9      	b.n	8005eec <memset+0x4>

08005ef8 <__libc_init_array>:
 8005ef8:	b570      	push	{r4, r5, r6, lr}
 8005efa:	4d0d      	ldr	r5, [pc, #52]	; (8005f30 <__libc_init_array+0x38>)
 8005efc:	4c0d      	ldr	r4, [pc, #52]	; (8005f34 <__libc_init_array+0x3c>)
 8005efe:	1b64      	subs	r4, r4, r5
 8005f00:	10a4      	asrs	r4, r4, #2
 8005f02:	2600      	movs	r6, #0
 8005f04:	42a6      	cmp	r6, r4
 8005f06:	d109      	bne.n	8005f1c <__libc_init_array+0x24>
 8005f08:	4d0b      	ldr	r5, [pc, #44]	; (8005f38 <__libc_init_array+0x40>)
 8005f0a:	4c0c      	ldr	r4, [pc, #48]	; (8005f3c <__libc_init_array+0x44>)
 8005f0c:	f000 f818 	bl	8005f40 <_init>
 8005f10:	1b64      	subs	r4, r4, r5
 8005f12:	10a4      	asrs	r4, r4, #2
 8005f14:	2600      	movs	r6, #0
 8005f16:	42a6      	cmp	r6, r4
 8005f18:	d105      	bne.n	8005f26 <__libc_init_array+0x2e>
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}
 8005f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f20:	4798      	blx	r3
 8005f22:	3601      	adds	r6, #1
 8005f24:	e7ee      	b.n	8005f04 <__libc_init_array+0xc>
 8005f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f2a:	4798      	blx	r3
 8005f2c:	3601      	adds	r6, #1
 8005f2e:	e7f2      	b.n	8005f16 <__libc_init_array+0x1e>
 8005f30:	08005f98 	.word	0x08005f98
 8005f34:	08005f98 	.word	0x08005f98
 8005f38:	08005f98 	.word	0x08005f98
 8005f3c:	08005f9c 	.word	0x08005f9c

08005f40 <_init>:
 8005f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f42:	bf00      	nop
 8005f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f46:	bc08      	pop	{r3}
 8005f48:	469e      	mov	lr, r3
 8005f4a:	4770      	bx	lr

08005f4c <_fini>:
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4e:	bf00      	nop
 8005f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f52:	bc08      	pop	{r3}
 8005f54:	469e      	mov	lr, r3
 8005f56:	4770      	bx	lr
