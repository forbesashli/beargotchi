
nucleo-h7-setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e4c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  24000000  08006160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000070  080061d0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d0  08006230  000200d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  24000130  08006290  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002dc  08006290  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013acb  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002113  00000000  00000000  00033c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  00035d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000981  00000000  00000000  000369d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032458  00000000  00000000  00037351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc96  00000000  00000000  000697a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014539b  00000000  00000000  0007943f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003320  00000000  00000000  001be7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001c1afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000130 	.word	0x24000130
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08006100 	.word	0x08006100

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000134 	.word	0x24000134
 8000308:	08006100 	.word	0x08006100

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fe29 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f943 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 fa51 	bl	8000abc <MX_GPIO_Init>
  MX_ETH_Init();
 800061a:	f000 f9af 	bl	800097c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800061e:	f000 f9f9 	bl	8000a14 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000622:	f000 fa43 	bl	8000aac <MX_USB_OTG_HS_USB_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t last_toggle_time = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
  uint32_t blink_interval = 200;
 800062a:	23c8      	movs	r3, #200	; 0xc8
 800062c:	603b      	str	r3, [r7, #0]

  while (1) {

      switch (mode) {
 800062e:	4b8c      	ldr	r3, [pc, #560]	; (8000860 <main+0x258>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b02      	cmp	r3, #2
 8000636:	f000 809e 	beq.w	8000776 <main+0x16e>
 800063a:	2b02      	cmp	r3, #2
 800063c:	f300 80e6 	bgt.w	800080c <main+0x204>
 8000640:	2b00      	cmp	r3, #0
 8000642:	d002      	beq.n	800064a <main+0x42>
 8000644:	2b01      	cmp	r3, #1
 8000646:	d04b      	beq.n	80006e0 <main+0xd8>
 8000648:	e0e0      	b.n	800080c <main+0x204>
          case 0:
              blink_interval = 200;
 800064a:	23c8      	movs	r3, #200	; 0xc8
 800064c:	603b      	str	r3, [r7, #0]

              writeSevenSegPin(A, 0);
 800064e:	4b85      	ldr	r3, [pc, #532]	; (8000864 <main+0x25c>)
 8000650:	2200      	movs	r2, #0
 8000652:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000656:	f000 fbcc 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(B, 1);
 800065a:	4b83      	ldr	r3, [pc, #524]	; (8000868 <main+0x260>)
 800065c:	2201      	movs	r2, #1
 800065e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000662:	f000 fbc6 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(C, 1);
 8000666:	4b81      	ldr	r3, [pc, #516]	; (800086c <main+0x264>)
 8000668:	2201      	movs	r2, #1
 800066a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800066e:	f000 fbc0 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D, 1);
 8000672:	4b7f      	ldr	r3, [pc, #508]	; (8000870 <main+0x268>)
 8000674:	2201      	movs	r2, #1
 8000676:	e893 0003 	ldmia.w	r3, {r0, r1}
 800067a:	f000 fbba 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(E, 0);
 800067e:	4b7d      	ldr	r3, [pc, #500]	; (8000874 <main+0x26c>)
 8000680:	2200      	movs	r2, #0
 8000682:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000686:	f000 fbb4 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(F, 0);
 800068a:	4b7b      	ldr	r3, [pc, #492]	; (8000878 <main+0x270>)
 800068c:	2200      	movs	r2, #0
 800068e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000692:	f000 fbae 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(G, 0);
 8000696:	4b79      	ldr	r3, [pc, #484]	; (800087c <main+0x274>)
 8000698:	2200      	movs	r2, #0
 800069a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800069e:	f000 fba8 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(Dp, 1);
 80006a2:	4b77      	ldr	r3, [pc, #476]	; (8000880 <main+0x278>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006aa:	f000 fba2 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D1, 1);
 80006ae:	4b75      	ldr	r3, [pc, #468]	; (8000884 <main+0x27c>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006b6:	f000 fb9c 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D2, 1);
 80006ba:	4b73      	ldr	r3, [pc, #460]	; (8000888 <main+0x280>)
 80006bc:	2201      	movs	r2, #1
 80006be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006c2:	f000 fb96 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D3, 1);
 80006c6:	4b71      	ldr	r3, [pc, #452]	; (800088c <main+0x284>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006ce:	f000 fb90 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D4, 0);
 80006d2:	4b6f      	ldr	r3, [pc, #444]	; (8000890 <main+0x288>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006da:	f000 fb8a 	bl	8000df2 <writeSevenSegPin>

              break;
 80006de:	e095      	b.n	800080c <main+0x204>
          case 1:
              blink_interval = 100;
 80006e0:	2364      	movs	r3, #100	; 0x64
 80006e2:	603b      	str	r3, [r7, #0]
              writeSevenSegPin(A, 0);
 80006e4:	4b5f      	ldr	r3, [pc, #380]	; (8000864 <main+0x25c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006ec:	f000 fb81 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(B, 0);
 80006f0:	4b5d      	ldr	r3, [pc, #372]	; (8000868 <main+0x260>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006f8:	f000 fb7b 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(C, 0);
 80006fc:	4b5b      	ldr	r3, [pc, #364]	; (800086c <main+0x264>)
 80006fe:	2200      	movs	r2, #0
 8000700:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000704:	f000 fb75 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D, 1);
 8000708:	4b59      	ldr	r3, [pc, #356]	; (8000870 <main+0x268>)
 800070a:	2201      	movs	r2, #1
 800070c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000710:	f000 fb6f 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(E, 0);
 8000714:	4b57      	ldr	r3, [pc, #348]	; (8000874 <main+0x26c>)
 8000716:	2200      	movs	r2, #0
 8000718:	e893 0003 	ldmia.w	r3, {r0, r1}
 800071c:	f000 fb69 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(F, 0);
 8000720:	4b55      	ldr	r3, [pc, #340]	; (8000878 <main+0x270>)
 8000722:	2200      	movs	r2, #0
 8000724:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000728:	f000 fb63 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(G, 0);
 800072c:	4b53      	ldr	r3, [pc, #332]	; (800087c <main+0x274>)
 800072e:	2200      	movs	r2, #0
 8000730:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000734:	f000 fb5d 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(Dp, 1);
 8000738:	4b51      	ldr	r3, [pc, #324]	; (8000880 <main+0x278>)
 800073a:	2201      	movs	r2, #1
 800073c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000740:	f000 fb57 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D1, 0);
 8000744:	4b4f      	ldr	r3, [pc, #316]	; (8000884 <main+0x27c>)
 8000746:	2200      	movs	r2, #0
 8000748:	e893 0003 	ldmia.w	r3, {r0, r1}
 800074c:	f000 fb51 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D2, 0);
 8000750:	4b4d      	ldr	r3, [pc, #308]	; (8000888 <main+0x280>)
 8000752:	2200      	movs	r2, #0
 8000754:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000758:	f000 fb4b 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D3, 1);
 800075c:	4b4b      	ldr	r3, [pc, #300]	; (800088c <main+0x284>)
 800075e:	2201      	movs	r2, #1
 8000760:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000764:	f000 fb45 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D4, 1);
 8000768:	4b49      	ldr	r3, [pc, #292]	; (8000890 <main+0x288>)
 800076a:	2201      	movs	r2, #1
 800076c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000770:	f000 fb3f 	bl	8000df2 <writeSevenSegPin>


              break;
 8000774:	e04a      	b.n	800080c <main+0x204>
          case 2:
              blink_interval = 50;
 8000776:	2332      	movs	r3, #50	; 0x32
 8000778:	603b      	str	r3, [r7, #0]
              writeSevenSegPin(A, 0);
 800077a:	4b3a      	ldr	r3, [pc, #232]	; (8000864 <main+0x25c>)
 800077c:	2200      	movs	r2, #0
 800077e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000782:	f000 fb36 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(B, 1);
 8000786:	4b38      	ldr	r3, [pc, #224]	; (8000868 <main+0x260>)
 8000788:	2201      	movs	r2, #1
 800078a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800078e:	f000 fb30 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(C, 1);
 8000792:	4b36      	ldr	r3, [pc, #216]	; (800086c <main+0x264>)
 8000794:	2201      	movs	r2, #1
 8000796:	e893 0003 	ldmia.w	r3, {r0, r1}
 800079a:	f000 fb2a 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D, 1);
 800079e:	4b34      	ldr	r3, [pc, #208]	; (8000870 <main+0x268>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007a6:	f000 fb24 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(E, 0);
 80007aa:	4b32      	ldr	r3, [pc, #200]	; (8000874 <main+0x26c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007b2:	f000 fb1e 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(F, 0);
 80007b6:	4b30      	ldr	r3, [pc, #192]	; (8000878 <main+0x270>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007be:	f000 fb18 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(G, 0);
 80007c2:	4b2e      	ldr	r3, [pc, #184]	; (800087c <main+0x274>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007ca:	f000 fb12 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(Dp, 1);
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <main+0x278>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007d6:	f000 fb0c 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D1, 1);
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <main+0x27c>)
 80007dc:	2201      	movs	r2, #1
 80007de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007e2:	f000 fb06 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D2, 1);
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <main+0x280>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007ee:	f000 fb00 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D3, 1);
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <main+0x284>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007fa:	f000 fafa 	bl	8000df2 <writeSevenSegPin>
              writeSevenSegPin(D4, 0);
 80007fe:	4b24      	ldr	r3, [pc, #144]	; (8000890 <main+0x288>)
 8000800:	2200      	movs	r2, #0
 8000802:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000806:	f000 faf4 	bl	8000df2 <writeSevenSegPin>

              break;
 800080a:	bf00      	nop
      }

      if (HAL_GetTick() - last_toggle_time >= blink_interval) {
 800080c:	f000 fdb0 	bl	8001370 <HAL_GetTick>
 8000810:	4602      	mov	r2, r0
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	f63f af08 	bhi.w	800062e <main+0x26>
              last_toggle_time = HAL_GetTick();
 800081e:	f000 fda7 	bl	8001370 <HAL_GetTick>
 8000822:	6078      	str	r0, [r7, #4]

              switch (mode) {
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <main+0x258>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b02      	cmp	r3, #2
 800082c:	d012      	beq.n	8000854 <main+0x24c>
 800082e:	2b02      	cmp	r3, #2
 8000830:	f73f aefd 	bgt.w	800062e <main+0x26>
 8000834:	2b00      	cmp	r3, #0
 8000836:	d002      	beq.n	800083e <main+0x236>
 8000838:	2b01      	cmp	r3, #1
 800083a:	d005      	beq.n	8000848 <main+0x240>
 800083c:	e00f      	b.n	800085e <main+0x256>
                  case 0:
                      HAL_GPIO_TogglePin(GPIOB, LED_GREEN_Pin);
 800083e:	2101      	movs	r1, #1
 8000840:	4814      	ldr	r0, [pc, #80]	; (8000894 <main+0x28c>)
 8000842:	f001 fcba 	bl	80021ba <HAL_GPIO_TogglePin>
                      break;
 8000846:	e00a      	b.n	800085e <main+0x256>
                  case 1:
                      HAL_GPIO_TogglePin(GPIOB, LED_RED_Pin);
 8000848:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084c:	4811      	ldr	r0, [pc, #68]	; (8000894 <main+0x28c>)
 800084e:	f001 fcb4 	bl	80021ba <HAL_GPIO_TogglePin>
                      break;
 8000852:	e004      	b.n	800085e <main+0x256>
                  case 2:
                      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8000854:	2102      	movs	r1, #2
 8000856:	4810      	ldr	r0, [pc, #64]	; (8000898 <main+0x290>)
 8000858:	f001 fcaf 	bl	80021ba <HAL_GPIO_TogglePin>
                      break;
 800085c:	bf00      	nop
      switch (mode) {
 800085e:	e6e6      	b.n	800062e <main+0x26>
 8000860:	240002c8 	.word	0x240002c8
 8000864:	24000038 	.word	0x24000038
 8000868:	24000008 	.word	0x24000008
 800086c:	24000058 	.word	0x24000058
 8000870:	24000048 	.word	0x24000048
 8000874:	24000040 	.word	0x24000040
 8000878:	24000028 	.word	0x24000028
 800087c:	24000050 	.word	0x24000050
 8000880:	24000020 	.word	0x24000020
 8000884:	24000000 	.word	0x24000000
 8000888:	24000010 	.word	0x24000010
 800088c:	24000030 	.word	0x24000030
 8000890:	24000018 	.word	0x24000018
 8000894:	58020400 	.word	0x58020400
 8000898:	58021000 	.word	0x58021000

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09c      	sub	sp, #112	; 0x70
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a6:	224c      	movs	r2, #76	; 0x4c
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 fbfc 	bl	80060a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2220      	movs	r2, #32
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 fbf6 	bl	80060a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008bc:	2002      	movs	r0, #2
 80008be:	f001 fcb1 	bl	8002224 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <SystemClock_Config+0xdc>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a2b      	ldr	r2, [pc, #172]	; (8000978 <SystemClock_Config+0xdc>)
 80008cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008d0:	6193      	str	r3, [r2, #24]
 80008d2:	4b29      	ldr	r3, [pc, #164]	; (8000978 <SystemClock_Config+0xdc>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008de:	bf00      	nop
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <SystemClock_Config+0xdc>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ec:	d1f8      	bne.n	80008e0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008ee:	2321      	movs	r3, #33	; 0x21
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008f8:	2301      	movs	r3, #1
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000900:	2302      	movs	r3, #2
 8000902:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000904:	2304      	movs	r3, #4
 8000906:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000908:	f240 1313 	movw	r3, #275	; 0x113
 800090c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000912:	2304      	movs	r3, #4
 8000914:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000916:	2302      	movs	r3, #2
 8000918:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800091a:	2304      	movs	r3, #4
 800091c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800091e:	2300      	movs	r3, #0
 8000920:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fcb4 	bl	8002298 <HAL_RCC_OscConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000936:	f000 fa57 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093a:	233f      	movs	r3, #63	; 0x3f
 800093c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	2303      	movs	r3, #3
 8000940:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000946:	2308      	movs	r3, #8
 8000948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800094a:	2340      	movs	r3, #64	; 0x40
 800094c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800094e:	2340      	movs	r3, #64	; 0x40
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000956:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000958:	2340      	movs	r3, #64	; 0x40
 800095a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2103      	movs	r1, #3
 8000960:	4618      	mov	r0, r3
 8000962:	f002 f873 	bl	8002a4c <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800096c:	f000 fa3c 	bl	8000de8 <Error_Handler>
  }
}
 8000970:	bf00      	nop
 8000972:	3770      	adds	r7, #112	; 0x70
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	58024800 	.word	0x58024800

0800097c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_ETH_Init+0x80>)
 8000982:	4a1f      	ldr	r2, [pc, #124]	; (8000a00 <MX_ETH_Init+0x84>)
 8000984:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_ETH_Init+0x88>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800098c:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <MX_ETH_Init+0x88>)
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_ETH_Init+0x88>)
 8000994:	22e1      	movs	r2, #225	; 0xe1
 8000996:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_ETH_Init+0x88>)
 800099a:	2200      	movs	r2, #0
 800099c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_ETH_Init+0x88>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_ETH_Init+0x88>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_ETH_Init+0x80>)
 80009ac:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <MX_ETH_Init+0x88>)
 80009ae:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_ETH_Init+0x80>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_ETH_Init+0x80>)
 80009b8:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <MX_ETH_Init+0x8c>)
 80009ba:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_ETH_Init+0x80>)
 80009be:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <MX_ETH_Init+0x90>)
 80009c0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_ETH_Init+0x80>)
 80009c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009c8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009ca:	480c      	ldr	r0, [pc, #48]	; (80009fc <MX_ETH_Init+0x80>)
 80009cc:	f000 fe00 	bl	80015d0 <HAL_ETH_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009d6:	f000 fa07 	bl	8000de8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009da:	2238      	movs	r2, #56	; 0x38
 80009dc:	2100      	movs	r1, #0
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <MX_ETH_Init+0x94>)
 80009e0:	f005 fb62 	bl	80060a8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_ETH_Init+0x94>)
 80009e6:	2221      	movs	r2, #33	; 0x21
 80009e8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_ETH_Init+0x94>)
 80009ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009f0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_ETH_Init+0x94>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	24000184 	.word	0x24000184
 8000a00:	40028000 	.word	0x40028000
 8000a04:	240002cc 	.word	0x240002cc
 8000a08:	240000d0 	.word	0x240000d0
 8000a0c:	24000070 	.word	0x24000070
 8000a10:	2400014c 	.word	0x2400014c

08000a14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a1a:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <MX_USART3_UART_Init+0x94>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a5e:	f004 f943 	bl	8004ce8 <HAL_UART_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 f9be 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a70:	f005 fa4f 	bl	8005f12 <HAL_UARTEx_SetTxFifoThreshold>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7a:	f000 f9b5 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a82:	f005 fa84 	bl	8005f8e <HAL_UARTEx_SetRxFifoThreshold>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a8c:	f000 f9ac 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a92:	f005 fa05 	bl	8005ea0 <HAL_UARTEx_DisableFifoMode>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 f9a4 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	24000234 	.word	0x24000234
 8000aa8:	40004800 	.word	0x40004800

08000aac <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	4b9a      	ldr	r3, [pc, #616]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	4a98      	ldr	r2, [pc, #608]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000ada:	f043 0304 	orr.w	r3, r3, #4
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae2:	4b96      	ldr	r3, [pc, #600]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	623b      	str	r3, [r7, #32]
 8000aee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000af0:	4b92      	ldr	r3, [pc, #584]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	4a91      	ldr	r2, [pc, #580]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000af8:	f043 0320 	orr.w	r3, r3, #32
 8000afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b00:	4b8e      	ldr	r3, [pc, #568]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b06:	f003 0320 	and.w	r3, r3, #32
 8000b0a:	61fb      	str	r3, [r7, #28]
 8000b0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0e:	4b8b      	ldr	r3, [pc, #556]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b14:	4a89      	ldr	r2, [pc, #548]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1e:	4b87      	ldr	r3, [pc, #540]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	4b83      	ldr	r3, [pc, #524]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b32:	4a82      	ldr	r2, [pc, #520]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3c:	4b7f      	ldr	r3, [pc, #508]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	4b7c      	ldr	r3, [pc, #496]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b50:	4a7a      	ldr	r2, [pc, #488]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5a:	4b78      	ldr	r3, [pc, #480]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b68:	4b74      	ldr	r3, [pc, #464]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6e:	4a73      	ldr	r2, [pc, #460]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b70:	f043 0308 	orr.w	r3, r3, #8
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b78:	4b70      	ldr	r3, [pc, #448]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	f003 0308 	and.w	r3, r3, #8
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b86:	4b6d      	ldr	r3, [pc, #436]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	4a6b      	ldr	r2, [pc, #428]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b96:	4b69      	ldr	r3, [pc, #420]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba4:	4b65      	ldr	r3, [pc, #404]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	4a64      	ldr	r2, [pc, #400]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb4:	4b61      	ldr	r3, [pc, #388]	; (8000d3c <MX_GPIO_Init+0x280>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	485e      	ldr	r0, [pc, #376]	; (8000d40 <MX_GPIO_Init+0x284>)
 8000bc8:	f001 fade 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f248 0110 	movw	r1, #32784	; 0x8010
 8000bd2:	485c      	ldr	r0, [pc, #368]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000bd4:	f001 fad8 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|GPIO_PIN_12|LED_RED_Pin|GPIO_PIN_15
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f24d 3121 	movw	r1, #54049	; 0xd321
 8000bde:	485a      	ldr	r0, [pc, #360]	; (8000d48 <MX_GPIO_Init+0x28c>)
 8000be0:	f001 fad2 	bl	8002188 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8000bea:	4858      	ldr	r0, [pc, #352]	; (8000d4c <MX_GPIO_Init+0x290>)
 8000bec:	f001 facc 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	21c0      	movs	r1, #192	; 0xc0
 8000bf4:	4856      	ldr	r0, [pc, #344]	; (8000d50 <MX_GPIO_Init+0x294>)
 8000bf6:	f001 fac7 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4855      	ldr	r0, [pc, #340]	; (8000d54 <MX_GPIO_Init+0x298>)
 8000c00:	f001 fac2 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8000c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	484d      	ldr	r0, [pc, #308]	; (8000d50 <MX_GPIO_Init+0x294>)
 8000c1c:	f001 f90c 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c20:	2308      	movs	r3, #8
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	4842      	ldr	r0, [pc, #264]	; (8000d40 <MX_GPIO_Init+0x284>)
 8000c38:	f001 f8fe 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000c3c:	f248 0310 	movw	r3, #32784	; 0x8010
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	483b      	ldr	r0, [pc, #236]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000c56:	f001 f8ef 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PB12 LED_RED_Pin PB15
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_12|LED_RED_Pin|GPIO_PIN_15
 8000c5a:	f24d 3321 	movw	r3, #54049	; 0xd321
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	4835      	ldr	r0, [pc, #212]	; (8000d48 <MX_GPIO_Init+0x28c>)
 8000c74:	f001 f8e0 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD14 PD15 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8000c78:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	482e      	ldr	r0, [pc, #184]	; (8000d4c <MX_GPIO_Init+0x290>)
 8000c92:	f001 f8d1 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	482b      	ldr	r0, [pc, #172]	; (8000d58 <MX_GPIO_Init+0x29c>)
 8000cac:	f001 f8c4 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cb0:	23c0      	movs	r3, #192	; 0xc0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4822      	ldr	r0, [pc, #136]	; (8000d50 <MX_GPIO_Init+0x294>)
 8000cc8:	f001 f8b6 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4818      	ldr	r0, [pc, #96]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000ce2:	f001 f8a9 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	4810      	ldr	r0, [pc, #64]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000d04:	f001 f898 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480d      	ldr	r0, [pc, #52]	; (8000d54 <MX_GPIO_Init+0x298>)
 8000d20:	f001 f88a 	bl	8001e38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	2028      	movs	r0, #40	; 0x28
 8000d2a:	f000 fc1c 	bl	8001566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d2e:	2028      	movs	r0, #40	; 0x28
 8000d30:	f000 fc33 	bl	800159a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d34:	bf00      	nop
 8000d36:	3738      	adds	r7, #56	; 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58021400 	.word	0x58021400
 8000d44:	58020000 	.word	0x58020000
 8000d48:	58020400 	.word	0x58020400
 8000d4c:	58020c00 	.word	0x58020c00
 8000d50:	58020800 	.word	0x58020800
 8000d54:	58021000 	.word	0x58021000
 8000d58:	58021800 	.word	0x58021800

08000d5c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_press = 0;
	if(GPIO_Pin == GPIO_PIN_13) {
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d6c:	d12d      	bne.n	8000dca <HAL_GPIO_EXTI_Callback+0x6e>
	  if(HAL_GetTick() - last_press > 200) {
 8000d6e:	f000 faff 	bl	8001370 <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2bc8      	cmp	r3, #200	; 0xc8
 8000d7c:	d926      	bls.n	8000dcc <HAL_GPIO_EXTI_Callback+0x70>
		  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2101      	movs	r1, #1
 8000d82:	4815      	ldr	r0, [pc, #84]	; (8000dd8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d84:	f001 fa00 	bl	8002188 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8e:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d90:	f001 f9fa 	bl	8002188 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2102      	movs	r1, #2
 8000d98:	4810      	ldr	r0, [pc, #64]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x80>)
 8000d9a:	f001 f9f5 	bl	8002188 <HAL_GPIO_WritePin>
		  mode = (mode + 1) % 3;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x84>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000da8:	fb83 3102 	smull	r3, r1, r3, r2
 8000dac:	17d3      	asrs	r3, r2, #31
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	460b      	mov	r3, r1
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	440b      	add	r3, r1
 8000db6:	1ad1      	subs	r1, r2, r3
 8000db8:	b2ca      	uxtb	r2, r1
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x84>)
 8000dbc:	701a      	strb	r2, [r3, #0]
		  last_press = HAL_GetTick();
 8000dbe:	f000 fad7 	bl	8001370 <HAL_GetTick>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000dc6:	6013      	str	r3, [r2, #0]
	  }

  } else {
      __NOP();
  }
}
 8000dc8:	e000      	b.n	8000dcc <HAL_GPIO_EXTI_Callback+0x70>
      __NOP();
 8000dca:	bf00      	nop
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	240002d4 	.word	0x240002d4
 8000dd8:	58020400 	.word	0x58020400
 8000ddc:	58021000 	.word	0x58021000
 8000de0:	240002c8 	.word	0x240002c8
 8000de4:	55555556 	.word	0x55555556

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>

08000df2 <writeSevenSegPin>:
 */

#include "seven_seg.h"


void writeSevenSegPin(SEVEN_SEG_PIN pin, int state) {
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b084      	sub	sp, #16
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	e883 0003 	stmia.w	r3, {r0, r1}
 8000e00:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(pin.PORT, pin.PIN_NUM, state);
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	89b9      	ldrh	r1, [r7, #12]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 f9bc 	bl	8002188 <HAL_GPIO_WritePin>
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_MspInit+0x30>)
 8000e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e24:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_MspInit+0x30>)
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x30>)
 8000e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	58024400 	.word	0x58024400

08000e4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08e      	sub	sp, #56	; 0x38
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a59      	ldr	r2, [pc, #356]	; (8000fd0 <HAL_ETH_MspInit+0x184>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	f040 80ab 	bne.w	8000fc6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e70:	4b58      	ldr	r3, [pc, #352]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e76:	4a57      	ldr	r2, [pc, #348]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e7c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e80:	4b54      	ldr	r3, [pc, #336]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e8a:	623b      	str	r3, [r7, #32]
 8000e8c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e8e:	4b51      	ldr	r3, [pc, #324]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000e90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e94:	4a4f      	ldr	r2, [pc, #316]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e9e:	4b4d      	ldr	r3, [pc, #308]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000ea0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000eac:	4b49      	ldr	r3, [pc, #292]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000eae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb2:	4a48      	ldr	r2, [pc, #288]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ebc:	4b45      	ldr	r3, [pc, #276]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000ebe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	61bb      	str	r3, [r7, #24]
 8000ec8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	4b42      	ldr	r3, [pc, #264]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	4a40      	ldr	r2, [pc, #256]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eda:	4b3e      	ldr	r3, [pc, #248]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eee:	4a39      	ldr	r2, [pc, #228]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef8:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4b33      	ldr	r3, [pc, #204]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	4a31      	ldr	r2, [pc, #196]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f16:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f24:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	4a2a      	ldr	r2, [pc, #168]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <HAL_ETH_MspInit+0x188>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f42:	2332      	movs	r3, #50	; 0x32
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f52:	230b      	movs	r3, #11
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <HAL_ETH_MspInit+0x18c>)
 8000f5e:	f000 ff6b 	bl	8001e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f62:	2386      	movs	r3, #134	; 0x86
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f72:	230b      	movs	r3, #11
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4817      	ldr	r0, [pc, #92]	; (8000fdc <HAL_ETH_MspInit+0x190>)
 8000f7e:	f000 ff5b 	bl	8001e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f94:	230b      	movs	r3, #11
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4810      	ldr	r0, [pc, #64]	; (8000fe0 <HAL_ETH_MspInit+0x194>)
 8000fa0:	f000 ff4a 	bl	8001e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fa4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb6:	230b      	movs	r3, #11
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <HAL_ETH_MspInit+0x198>)
 8000fc2:	f000 ff39 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3738      	adds	r7, #56	; 0x38
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40028000 	.word	0x40028000
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	58020800 	.word	0x58020800
 8000fdc:	58020000 	.word	0x58020000
 8000fe0:	58020400 	.word	0x58020400
 8000fe4:	58021800 	.word	0x58021800

08000fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0b8      	sub	sp, #224	; 0xe0
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	22b8      	movs	r2, #184	; 0xb8
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f005 f84d 	bl	80060a8 <memset>
  if(huart->Instance==USART3)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a27      	ldr	r2, [pc, #156]	; (80010b0 <HAL_UART_MspInit+0xc8>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d146      	bne.n	80010a6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001018:	f04f 0202 	mov.w	r2, #2
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	4618      	mov	r0, r3
 8001030:	f002 f898 	bl	8003164 <HAL_RCCEx_PeriphCLKConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800103a:	f7ff fed5 	bl	8000de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_UART_MspInit+0xcc>)
 8001040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001044:	4a1b      	ldr	r2, [pc, #108]	; (80010b4 <HAL_UART_MspInit+0xcc>)
 8001046:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_UART_MspInit+0xcc>)
 8001050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_UART_MspInit+0xcc>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001062:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <HAL_UART_MspInit+0xcc>)
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_UART_MspInit+0xcc>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800107a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800107e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001094:	2307      	movs	r3, #7
 8001096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <HAL_UART_MspInit+0xd0>)
 80010a2:	f000 fec9 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	37e0      	adds	r7, #224	; 0xe0
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40004800 	.word	0x40004800
 80010b4:	58024400 	.word	0x58024400
 80010b8:	58020c00 	.word	0x58020c00

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <NMI_Handler+0x4>

080010c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <MemManage_Handler+0x4>

080010ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <UsageFault_Handler+0x4>

080010da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001108:	f000 f91e 	bl	8001348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin);
 8001114:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001118:	f001 f869 	bl	80021ee <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001124:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <SystemInit+0xd0>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112a:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <SystemInit+0xd0>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001134:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <SystemInit+0xd4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	2b06      	cmp	r3, #6
 800113e:	d807      	bhi.n	8001150 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001140:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <SystemInit+0xd4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 030f 	bic.w	r3, r3, #15
 8001148:	4a2a      	ldr	r2, [pc, #168]	; (80011f4 <SystemInit+0xd4>)
 800114a:	f043 0307 	orr.w	r3, r3, #7
 800114e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <SystemInit+0xd8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <SystemInit+0xd8>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <SystemInit+0xd8>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <SystemInit+0xd8>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4924      	ldr	r1, [pc, #144]	; (80011f8 <SystemInit+0xd8>)
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <SystemInit+0xdc>)
 800116a:	4013      	ands	r3, r2
 800116c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <SystemInit+0xd4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800117a:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <SystemInit+0xd4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 030f 	bic.w	r3, r3, #15
 8001182:	4a1c      	ldr	r2, [pc, #112]	; (80011f4 <SystemInit+0xd4>)
 8001184:	f043 0307 	orr.w	r3, r3, #7
 8001188:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <SystemInit+0xd8>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <SystemInit+0xd8>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <SystemInit+0xd8>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <SystemInit+0xd8>)
 800119e:	4a18      	ldr	r2, [pc, #96]	; (8001200 <SystemInit+0xe0>)
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <SystemInit+0xd8>)
 80011a4:	4a17      	ldr	r2, [pc, #92]	; (8001204 <SystemInit+0xe4>)
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <SystemInit+0xd8>)
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <SystemInit+0xe8>)
 80011ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <SystemInit+0xd8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <SystemInit+0xd8>)
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <SystemInit+0xe8>)
 80011b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <SystemInit+0xd8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <SystemInit+0xd8>)
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <SystemInit+0xe8>)
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <SystemInit+0xd8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <SystemInit+0xd8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <SystemInit+0xd8>)
 80011d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <SystemInit+0xd8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <SystemInit+0xec>)
 80011e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00
 80011f4:	52002000 	.word	0x52002000
 80011f8:	58024400 	.word	0x58024400
 80011fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001200:	02020200 	.word	0x02020200
 8001204:	01ff0000 	.word	0x01ff0000
 8001208:	01010280 	.word	0x01010280
 800120c:	52004000 	.word	0x52004000

08001210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001248 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001214:	f7ff ff84 	bl	8001120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800121a:	490d      	ldr	r1, [pc, #52]	; (8001250 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800121c:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001220:	e002      	b.n	8001228 <LoopCopyDataInit>

08001222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001226:	3304      	adds	r3, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800122c:	d3f9      	bcc.n	8001222 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001230:	4c0a      	ldr	r4, [pc, #40]	; (800125c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001234:	e001      	b.n	800123a <LoopFillZerobss>

08001236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001238:	3204      	adds	r2, #4

0800123a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800123c:	d3fb      	bcc.n	8001236 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123e:	f004 ff3b 	bl	80060b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001242:	f7ff f9e1 	bl	8000608 <main>
  bx  lr
 8001246:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001248:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800124c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001250:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001254:	08006160 	.word	0x08006160
  ldr r2, =_sbss
 8001258:	24000130 	.word	0x24000130
  ldr r4, =_ebss
 800125c:	240002dc 	.word	0x240002dc

08001260 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC3_IRQHandler>
	...

08001264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126a:	2003      	movs	r0, #3
 800126c:	f000 f970 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001270:	f001 fda2 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8001274:	4602      	mov	r2, r0
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_Init+0x68>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	0a1b      	lsrs	r3, r3, #8
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	4913      	ldr	r1, [pc, #76]	; (80012d0 <HAL_Init+0x6c>)
 8001282:	5ccb      	ldrb	r3, [r1, r3]
 8001284:	f003 031f 	and.w	r3, r3, #31
 8001288:	fa22 f303 	lsr.w	r3, r2, r3
 800128c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_Init+0x68>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <HAL_Init+0x6c>)
 8001298:	5cd3      	ldrb	r3, [r2, r3]
 800129a:	f003 031f 	and.w	r3, r3, #31
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	fa22 f303 	lsr.w	r3, r2, r3
 80012a4:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <HAL_Init+0x70>)
 80012a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <HAL_Init+0x74>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ae:	2000      	movs	r0, #0
 80012b0:	f000 f814 	bl	80012dc <HAL_InitTick>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e002      	b.n	80012c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012be:	f7ff fdab 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	58024400 	.word	0x58024400
 80012d0:	08006118 	.word	0x08006118
 80012d4:	24000064 	.word	0x24000064
 80012d8:	24000060 	.word	0x24000060

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_InitTick+0x60>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e021      	b.n	8001334 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <HAL_InitTick+0x64>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_InitTick+0x60>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f955 	bl	80015b6 <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e00e      	b.n	8001334 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d80a      	bhi.n	8001332 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001324:	f000 f91f 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <HAL_InitTick+0x68>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2400006c 	.word	0x2400006c
 8001340:	24000060 	.word	0x24000060
 8001344:	24000068 	.word	0x24000068

08001348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x20>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x24>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_IncTick+0x24>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	2400006c 	.word	0x2400006c
 800136c:	240002d8 	.word	0x240002d8

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_GetTick+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	240002d8 	.word	0x240002d8

08001388 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001398:	4904      	ldr	r1, [pc, #16]	; (80013ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	58000400 	.word	0x58000400

080013b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <__NVIC_SetPriorityGrouping+0x40>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <__NVIC_SetPriorityGrouping+0x40>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00
 80013f4:	05fa0000 	.word	0x05fa0000

080013f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800141e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0b      	blt.n	800143e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <__NVIC_EnableIRQ+0x38>)
 800142e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2001      	movs	r0, #1
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff29 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001574:	f7ff ff40 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ff90 	bl	80014a4 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff5f 	bl	8001450 <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff33 	bl	8001414 <__NVIC_EnableIRQ>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffa4 	bl	800150c <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0e3      	b.n	80017aa <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d106      	bne.n	80015fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2223      	movs	r2, #35	; 0x23
 80015f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fc29 	bl	8000e4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	4b6e      	ldr	r3, [pc, #440]	; (80017b4 <HAL_ETH_Init+0x1e4>)
 80015fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001600:	4a6c      	ldr	r2, [pc, #432]	; (80017b4 <HAL_ETH_Init+0x1e4>)
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800160a:	4b6a      	ldr	r3, [pc, #424]	; (80017b4 <HAL_ETH_Init+0x1e4>)
 800160c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7a1b      	ldrb	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff feb1 	bl	8001388 <HAL_SYSCFG_ETHInterfaceSelect>
 8001626:	e003      	b.n	8001630 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001628:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800162c:	f7ff feac 	bl	8001388 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001630:	4b61      	ldr	r3, [pc, #388]	; (80017b8 <HAL_ETH_Init+0x1e8>)
 8001632:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800164a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800164c:	f7ff fe90 	bl	8001370 <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001652:	e011      	b.n	8001678 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001654:	f7ff fe8c 	bl	8001370 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001662:	d909      	bls.n	8001678 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2204      	movs	r2, #4
 8001668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	22e0      	movs	r2, #224	; 0xe0
 8001670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e098      	b.n	80017aa <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1e4      	bne.n	8001654 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f89e 	bl	80017cc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001690:	f001 fd0c 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 8001694:	4603      	mov	r3, r0
 8001696:	4a49      	ldr	r2, [pc, #292]	; (80017bc <HAL_ETH_Init+0x1ec>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9a      	lsrs	r2, r3, #18
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	3a01      	subs	r2, #1
 80016a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 fa81 	bl	8001bb0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80016ba:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	22e0      	movs	r2, #224	; 0xe0
 80016e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e05d      	b.n	80017aa <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80016fa:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <HAL_ETH_Init+0x1f0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6952      	ldr	r2, [r2, #20]
 8001702:	0051      	lsls	r1, r2, #1
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	430b      	orrs	r3, r1
 800170a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800170e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fae9 	bl	8001cea <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 fb2f 	bl	8001d7c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	3305      	adds	r3, #5
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	021a      	lsls	r2, r3, #8
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	3304      	adds	r3, #4
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	3303      	adds	r3, #3
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	061a      	lsls	r2, r3, #24
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	3302      	adds	r3, #2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	041b      	lsls	r3, r3, #16
 8001750:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	3301      	adds	r3, #1
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800175c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800176a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800176c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_ETH_Init+0x1f4>)
 800177e:	430b      	orrs	r3, r1
 8001780:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_ETH_Init+0x1f8>)
 8001792:	430b      	orrs	r3, r1
 8001794:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2210      	movs	r2, #16
 80017a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	58024400 	.word	0x58024400
 80017b8:	58000400 	.word	0x58000400
 80017bc:	431bde83 	.word	0x431bde83
 80017c0:	ffff8001 	.word	0xffff8001
 80017c4:	0c020060 	.word	0x0c020060
 80017c8:	0c20c000 	.word	0x0c20c000

080017cc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017e6:	f001 fc61 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80017ea:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4a1a      	ldr	r2, [pc, #104]	; (8001858 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d804      	bhi.n	80017fe <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e022      	b.n	8001844 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	4a16      	ldr	r2, [pc, #88]	; (800185c <HAL_ETH_SetMDIOClockRange+0x90>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d204      	bcs.n	8001810 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	e019      	b.n	8001844 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4a13      	ldr	r2, [pc, #76]	; (8001860 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d915      	bls.n	8001844 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <HAL_ETH_SetMDIOClockRange+0x98>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d804      	bhi.n	800182a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e00c      	b.n	8001844 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d804      	bhi.n	800183c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e003      	b.n	8001844 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001842:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	02160ebf 	.word	0x02160ebf
 800185c:	03938700 	.word	0x03938700
 8001860:	05f5e0ff 	.word	0x05f5e0ff
 8001864:	08f0d17f 	.word	0x08f0d17f
 8001868:	0ee6b27f 	.word	0x0ee6b27f

0800186c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800187e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	791b      	ldrb	r3, [r3, #4]
 8001884:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001886:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	7b1b      	ldrb	r3, [r3, #12]
 800188c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800188e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	7b5b      	ldrb	r3, [r3, #13]
 8001894:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001896:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	7b9b      	ldrb	r3, [r3, #14]
 800189c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800189e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	7bdb      	ldrb	r3, [r3, #15]
 80018a4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80018a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	7c12      	ldrb	r2, [r2, #16]
 80018ac:	2a00      	cmp	r2, #0
 80018ae:	d102      	bne.n	80018b6 <ETH_SetMACConfig+0x4a>
 80018b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018b4:	e000      	b.n	80018b8 <ETH_SetMACConfig+0x4c>
 80018b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018b8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	7c52      	ldrb	r2, [r2, #17]
 80018be:	2a00      	cmp	r2, #0
 80018c0:	d102      	bne.n	80018c8 <ETH_SetMACConfig+0x5c>
 80018c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018c6:	e000      	b.n	80018ca <ETH_SetMACConfig+0x5e>
 80018c8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	7c9b      	ldrb	r3, [r3, #18]
 80018d0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018d2:	431a      	orrs	r2, r3
               macconf->Speed |
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80018d8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80018de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	7f1b      	ldrb	r3, [r3, #28]
 80018e4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80018e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	7f5b      	ldrb	r3, [r3, #29]
 80018ec:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	7f92      	ldrb	r2, [r2, #30]
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d102      	bne.n	80018fe <ETH_SetMACConfig+0x92>
 80018f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018fc:	e000      	b.n	8001900 <ETH_SetMACConfig+0x94>
 80018fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001900:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	7fdb      	ldrb	r3, [r3, #31]
 8001906:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001908:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001910:	2a00      	cmp	r2, #0
 8001912:	d102      	bne.n	800191a <ETH_SetMACConfig+0xae>
 8001914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001918:	e000      	b.n	800191c <ETH_SetMACConfig+0xb0>
 800191a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800191c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001922:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800192a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800192c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001932:	4313      	orrs	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <ETH_SetMACConfig+0x22c>)
 800193e:	4013      	ands	r3, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	68f9      	ldr	r1, [r7, #12]
 8001946:	430b      	orrs	r3, r1
 8001948:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001956:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001958:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001960:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001962:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800196a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800196c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001974:	2a00      	cmp	r2, #0
 8001976:	d102      	bne.n	800197e <ETH_SetMACConfig+0x112>
 8001978:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800197c:	e000      	b.n	8001980 <ETH_SetMACConfig+0x114>
 800197e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001980:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001986:	4313      	orrs	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <ETH_SetMACConfig+0x230>)
 8001992:	4013      	ands	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	430b      	orrs	r3, r1
 800199c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019a4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <ETH_SetMACConfig+0x234>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	68f9      	ldr	r1, [r7, #12]
 80019be:	430b      	orrs	r3, r1
 80019c0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019c8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019ce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	d101      	bne.n	80019de <ETH_SetMACConfig+0x172>
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	e000      	b.n	80019e0 <ETH_SetMACConfig+0x174>
 80019de:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80019e0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019f2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80019f6:	4013      	ands	r3, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	430b      	orrs	r3, r1
 8001a00:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001a08:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001a10:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	f023 0103 	bic.w	r1, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001a36:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001a52:	2a00      	cmp	r2, #0
 8001a54:	d101      	bne.n	8001a5a <ETH_SetMACConfig+0x1ee>
 8001a56:	2240      	movs	r2, #64	; 0x40
 8001a58:	e000      	b.n	8001a5c <ETH_SetMACConfig+0x1f0>
 8001a5a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a5c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a64:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001a6e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a70:	4313      	orrs	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a7c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	00048083 	.word	0x00048083
 8001a9c:	c0f88000 	.word	0xc0f88000
 8001aa0:	fffffef0 	.word	0xfffffef0

08001aa4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <ETH_SetDMAConfig+0xf8>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	6811      	ldr	r1, [r2, #0]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aca:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	791b      	ldrb	r3, [r3, #4]
 8001ad0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ad6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	7b1b      	ldrb	r3, [r3, #12]
 8001adc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <ETH_SetDMAConfig+0xfc>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	68f9      	ldr	r1, [r7, #12]
 8001af6:	430b      	orrs	r3, r1
 8001af8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001afc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	7b5b      	ldrb	r3, [r3, #13]
 8001b02:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b14:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <ETH_SetDMAConfig+0x100>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	68f9      	ldr	r1, [r7, #12]
 8001b22:	430b      	orrs	r3, r1
 8001b24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b28:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	7d1b      	ldrb	r3, [r3, #20]
 8001b34:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b36:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	7f5b      	ldrb	r3, [r3, #29]
 8001b3c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <ETH_SetDMAConfig+0x104>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	68f9      	ldr	r1, [r7, #12]
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b5e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	7f1b      	ldrb	r3, [r3, #28]
 8001b66:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b78:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <ETH_SetDMAConfig+0x108>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	68f9      	ldr	r1, [r7, #12]
 8001b86:	430b      	orrs	r3, r1
 8001b88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b8c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	ffff87fd 	.word	0xffff87fd
 8001ba0:	ffff2ffe 	.word	0xffff2ffe
 8001ba4:	fffec000 	.word	0xfffec000
 8001ba8:	ffc0efef 	.word	0xffc0efef
 8001bac:	7fc0ffff 	.word	0x7fc0ffff

08001bb0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b0a4      	sub	sp, #144	; 0x90
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001be6:	2301      	movs	r3, #1
 8001be8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001c08:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001c0c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001c14:	2300      	movs	r3, #0
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001c32:	2300      	movs	r3, #0
 8001c34:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c48:	2320      	movs	r3, #32
 8001c4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c5a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c64:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c98:	4619      	mov	r1, r3
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fde6 	bl	800186c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001cba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cbe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001cc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cc8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001cd0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fee1 	bl	8001aa4 <ETH_SetDMAConfig>
}
 8001ce2:	bf00      	nop
 8001ce4:	3790      	adds	r7, #144	; 0x90
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b085      	sub	sp, #20
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e01d      	b.n	8001d34 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68d9      	ldr	r1, [r3, #12]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	440b      	add	r3, r1
 8001d08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2200      	movs	r2, #0
 8001d14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	3206      	adds	r2, #6
 8001d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3301      	adds	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d9de      	bls.n	8001cf8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	e023      	b.n	8001dd2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6919      	ldr	r1, [r3, #16]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2200      	movs	r2, #0
 8001da6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	3212      	adds	r2, #18
 8001dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d9d8      	bls.n	8001d8a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2303      	movs	r3, #3
 8001e02:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e12:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e26:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e46:	4b86      	ldr	r3, [pc, #536]	; (8002060 <HAL_GPIO_Init+0x228>)
 8001e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e4a:	e18c      	b.n	8002166 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2101      	movs	r1, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 817e 	beq.w	8002160 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d005      	beq.n	8001e7c <HAL_GPIO_Init+0x44>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d130      	bne.n	8001ede <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 0201 	and.w	r2, r3, #1
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d017      	beq.n	8001f1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d123      	bne.n	8001f6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	08da      	lsrs	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3208      	adds	r2, #8
 8001f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	220f      	movs	r2, #15
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	08da      	lsrs	r2, r3, #3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3208      	adds	r2, #8
 8001f68:	69b9      	ldr	r1, [r7, #24]
 8001f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0203 	and.w	r2, r3, #3
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80d8 	beq.w	8002160 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <HAL_GPIO_Init+0x22c>)
 8001fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fb6:	4a2b      	ldr	r2, [pc, #172]	; (8002064 <HAL_GPIO_Init+0x22c>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fc0:	4b28      	ldr	r3, [pc, #160]	; (8002064 <HAL_GPIO_Init+0x22c>)
 8001fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fce:	4a26      	ldr	r2, [pc, #152]	; (8002068 <HAL_GPIO_Init+0x230>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_GPIO_Init+0x234>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d04a      	beq.n	8002090 <HAL_GPIO_Init+0x258>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <HAL_GPIO_Init+0x238>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d02b      	beq.n	800205a <HAL_GPIO_Init+0x222>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <HAL_GPIO_Init+0x23c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d025      	beq.n	8002056 <HAL_GPIO_Init+0x21e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a1a      	ldr	r2, [pc, #104]	; (8002078 <HAL_GPIO_Init+0x240>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01f      	beq.n	8002052 <HAL_GPIO_Init+0x21a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_GPIO_Init+0x244>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d019      	beq.n	800204e <HAL_GPIO_Init+0x216>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_GPIO_Init+0x248>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_Init+0x212>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a17      	ldr	r2, [pc, #92]	; (8002084 <HAL_GPIO_Init+0x24c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00d      	beq.n	8002046 <HAL_GPIO_Init+0x20e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a16      	ldr	r2, [pc, #88]	; (8002088 <HAL_GPIO_Init+0x250>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <HAL_GPIO_Init+0x20a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a15      	ldr	r2, [pc, #84]	; (800208c <HAL_GPIO_Init+0x254>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_GPIO_Init+0x206>
 800203a:	2309      	movs	r3, #9
 800203c:	e029      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 800203e:	230a      	movs	r3, #10
 8002040:	e027      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 8002042:	2307      	movs	r3, #7
 8002044:	e025      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 8002046:	2306      	movs	r3, #6
 8002048:	e023      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 800204a:	2305      	movs	r3, #5
 800204c:	e021      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 800204e:	2304      	movs	r3, #4
 8002050:	e01f      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 8002052:	2303      	movs	r3, #3
 8002054:	e01d      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 8002056:	2302      	movs	r3, #2
 8002058:	e01b      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 800205a:	2301      	movs	r3, #1
 800205c:	e019      	b.n	8002092 <HAL_GPIO_Init+0x25a>
 800205e:	bf00      	nop
 8002060:	58000080 	.word	0x58000080
 8002064:	58024400 	.word	0x58024400
 8002068:	58000400 	.word	0x58000400
 800206c:	58020000 	.word	0x58020000
 8002070:	58020400 	.word	0x58020400
 8002074:	58020800 	.word	0x58020800
 8002078:	58020c00 	.word	0x58020c00
 800207c:	58021000 	.word	0x58021000
 8002080:	58021400 	.word	0x58021400
 8002084:	58021800 	.word	0x58021800
 8002088:	58021c00 	.word	0x58021c00
 800208c:	58022400 	.word	0x58022400
 8002090:	2300      	movs	r3, #0
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	f002 0203 	and.w	r2, r2, #3
 8002098:	0092      	lsls	r2, r2, #2
 800209a:	4093      	lsls	r3, r2
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a2:	4938      	ldr	r1, [pc, #224]	; (8002184 <HAL_GPIO_Init+0x34c>)
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	3302      	adds	r3, #2
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	3301      	adds	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	f47f ae6b 	bne.w	8001e4c <HAL_GPIO_Init+0x14>
  }
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	3724      	adds	r7, #36	; 0x24
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	58000400 	.word	0x58000400

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021cc:	887a      	ldrh	r2, [r7, #2]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4013      	ands	r3, r2
 80021d2:	041a      	lsls	r2, r3, #16
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	400b      	ands	r3, r1
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	619a      	str	r2, [r3, #24]
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fda1 	bl	8000d5c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_PWREx_ConfigSupply+0x70>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b04      	cmp	r3, #4
 8002236:	d00a      	beq.n	800224e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002238:	4b16      	ldr	r3, [pc, #88]	; (8002294 <HAL_PWREx_ConfigSupply+0x70>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	d001      	beq.n	800224a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e01f      	b.n	800228a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e01d      	b.n	800228a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_PWREx_ConfigSupply+0x70>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f023 0207 	bic.w	r2, r3, #7
 8002256:	490f      	ldr	r1, [pc, #60]	; (8002294 <HAL_PWREx_ConfigSupply+0x70>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4313      	orrs	r3, r2
 800225c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800225e:	f7ff f887 	bl	8001370 <HAL_GetTick>
 8002262:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002264:	e009      	b.n	800227a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002266:	f7ff f883 	bl	8001370 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002274:	d901      	bls.n	800227a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e007      	b.n	800228a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_PWREx_ConfigSupply+0x70>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002286:	d1ee      	bne.n	8002266 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	58024800 	.word	0x58024800

08002298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08c      	sub	sp, #48	; 0x30
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e3c8      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8087 	beq.w	80023c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022b8:	4b88      	ldr	r3, [pc, #544]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022c2:	4b86      	ldr	r3, [pc, #536]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d007      	beq.n	80022de <HAL_RCC_OscConfig+0x46>
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	2b18      	cmp	r3, #24
 80022d2:	d110      	bne.n	80022f6 <HAL_RCC_OscConfig+0x5e>
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d10b      	bne.n	80022f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022de:	4b7f      	ldr	r3, [pc, #508]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d06c      	beq.n	80023c4 <HAL_RCC_OscConfig+0x12c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d168      	bne.n	80023c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e3a2      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fe:	d106      	bne.n	800230e <HAL_RCC_OscConfig+0x76>
 8002300:	4b76      	ldr	r3, [pc, #472]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a75      	ldr	r2, [pc, #468]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	e02e      	b.n	800236c <HAL_RCC_OscConfig+0xd4>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x98>
 8002316:	4b71      	ldr	r3, [pc, #452]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a70      	ldr	r2, [pc, #448]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 800231c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b6e      	ldr	r3, [pc, #440]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a6d      	ldr	r2, [pc, #436]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e01d      	b.n	800236c <HAL_RCC_OscConfig+0xd4>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0xbc>
 800233a:	4b68      	ldr	r3, [pc, #416]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a67      	ldr	r2, [pc, #412]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b65      	ldr	r3, [pc, #404]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a64      	ldr	r2, [pc, #400]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0xd4>
 8002354:	4b61      	ldr	r3, [pc, #388]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a60      	ldr	r2, [pc, #384]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 800235a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b5e      	ldr	r3, [pc, #376]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a5d      	ldr	r2, [pc, #372]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d013      	beq.n	800239c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7fe fffc 	bl	8001370 <HAL_GetTick>
 8002378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237c:	f7fe fff8 	bl	8001370 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e356      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800238e:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0xe4>
 800239a:	e014      	b.n	80023c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7fe ffe8 	bl	8001370 <HAL_GetTick>
 80023a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a4:	f7fe ffe4 	bl	8001370 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e342      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023b6:	4b49      	ldr	r3, [pc, #292]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x10c>
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 808c 	beq.w	80024ec <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d4:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023de:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <HAL_RCC_OscConfig+0x162>
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	2b18      	cmp	r3, #24
 80023ee:	d137      	bne.n	8002460 <HAL_RCC_OscConfig+0x1c8>
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d132      	bne.n	8002460 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023fa:	4b38      	ldr	r3, [pc, #224]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x17a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e314      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002412:	4b32      	ldr	r3, [pc, #200]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 0219 	bic.w	r2, r3, #25
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	492f      	ldr	r1, [pc, #188]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002420:	4313      	orrs	r3, r2
 8002422:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe ffa4 	bl	8001370 <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242c:	f7fe ffa0 	bl	8001370 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e2fe      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800243e:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	061b      	lsls	r3, r3, #24
 8002458:	4920      	ldr	r1, [pc, #128]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245e:	e045      	b.n	80024ec <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d026      	beq.n	80024b6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002468:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 0219 	bic.w	r2, r3, #25
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4919      	ldr	r1, [pc, #100]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247a:	f7fe ff79 	bl	8001370 <HAL_GetTick>
 800247e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002482:	f7fe ff75 	bl	8001370 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e2d3      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a0:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	061b      	lsls	r3, r3, #24
 80024ae:	490b      	ldr	r1, [pc, #44]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
 80024b4:	e01a      	b.n	80024ec <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a08      	ldr	r2, [pc, #32]	; (80024dc <HAL_RCC_OscConfig+0x244>)
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c2:	f7fe ff55 	bl	8001370 <HAL_GetTick>
 80024c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ca:	f7fe ff51 	bl	8001370 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d903      	bls.n	80024e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e2af      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
 80024dc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024e0:	4b96      	ldr	r3, [pc, #600]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ee      	bne.n	80024ca <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d06a      	beq.n	80025ce <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f8:	4b90      	ldr	r3, [pc, #576]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002500:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002502:	4b8e      	ldr	r3, [pc, #568]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b08      	cmp	r3, #8
 800250c:	d007      	beq.n	800251e <HAL_RCC_OscConfig+0x286>
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b18      	cmp	r3, #24
 8002512:	d11b      	bne.n	800254c <HAL_RCC_OscConfig+0x2b4>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d116      	bne.n	800254c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800251e:	4b87      	ldr	r3, [pc, #540]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_RCC_OscConfig+0x29e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	2b80      	cmp	r3, #128	; 0x80
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e282      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002536:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	061b      	lsls	r3, r3, #24
 8002544:	497d      	ldr	r1, [pc, #500]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800254a:	e040      	b.n	80025ce <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d023      	beq.n	800259c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002554:	4b79      	ldr	r3, [pc, #484]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a78      	ldr	r2, [pc, #480]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 800255a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800255e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe ff06 	bl	8001370 <HAL_GetTick>
 8002564:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002568:	f7fe ff02 	bl	8001370 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e260      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800257a:	4b70      	ldr	r3, [pc, #448]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002586:	4b6d      	ldr	r3, [pc, #436]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	061b      	lsls	r3, r3, #24
 8002594:	4969      	ldr	r1, [pc, #420]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002596:	4313      	orrs	r3, r2
 8002598:	60cb      	str	r3, [r1, #12]
 800259a:	e018      	b.n	80025ce <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800259c:	4b67      	ldr	r3, [pc, #412]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a66      	ldr	r2, [pc, #408]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 80025a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7fe fee2 	bl	8001370 <HAL_GetTick>
 80025ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025b0:	f7fe fede 	bl	8001370 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e23c      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025c2:	4b5e      	ldr	r3, [pc, #376]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d036      	beq.n	8002648 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d019      	beq.n	8002616 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e2:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 80025e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e6:	4a55      	ldr	r2, [pc, #340]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ee:	f7fe febf 	bl	8001370 <HAL_GetTick>
 80025f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f6:	f7fe febb 	bl	8001370 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e219      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002608:	4b4c      	ldr	r3, [pc, #304]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 800260a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x35e>
 8002614:	e018      	b.n	8002648 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002616:	4b49      	ldr	r3, [pc, #292]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261a:	4a48      	ldr	r2, [pc, #288]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7fe fea5 	bl	8001370 <HAL_GetTick>
 8002626:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262a:	f7fe fea1 	bl	8001370 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e1ff      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800263c:	4b3f      	ldr	r3, [pc, #252]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 800263e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d036      	beq.n	80026c2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d019      	beq.n	8002690 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800265c:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a36      	ldr	r2, [pc, #216]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002662:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002666:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002668:	f7fe fe82 	bl	8001370 <HAL_GetTick>
 800266c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002670:	f7fe fe7e 	bl	8001370 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1dc      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x3d8>
 800268e:	e018      	b.n	80026c2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002690:	4b2a      	ldr	r3, [pc, #168]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a29      	ldr	r2, [pc, #164]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800269a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800269c:	f7fe fe68 	bl	8001370 <HAL_GetTick>
 80026a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026a4:	f7fe fe64 	bl	8001370 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e1c2      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026b6:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8086 	beq.w	80027dc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_RCC_OscConfig+0x4a8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <HAL_RCC_OscConfig+0x4a8>)
 80026d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026dc:	f7fe fe48 	bl	8001370 <HAL_GetTick>
 80026e0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e4:	f7fe fe44 	bl	8001370 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1a2      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_RCC_OscConfig+0x4a8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d106      	bne.n	8002718 <HAL_RCC_OscConfig+0x480>
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	4a0b      	ldr	r2, [pc, #44]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6713      	str	r3, [r2, #112]	; 0x70
 8002716:	e032      	b.n	800277e <HAL_RCC_OscConfig+0x4e6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d111      	bne.n	8002744 <HAL_RCC_OscConfig+0x4ac>
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	4a05      	ldr	r2, [pc, #20]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	6713      	str	r3, [r2, #112]	; 0x70
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4a02      	ldr	r2, [pc, #8]	; (800273c <HAL_RCC_OscConfig+0x4a4>)
 8002732:	f023 0304 	bic.w	r3, r3, #4
 8002736:	6713      	str	r3, [r2, #112]	; 0x70
 8002738:	e021      	b.n	800277e <HAL_RCC_OscConfig+0x4e6>
 800273a:	bf00      	nop
 800273c:	58024400 	.word	0x58024400
 8002740:	58024800 	.word	0x58024800
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d10c      	bne.n	8002766 <HAL_RCC_OscConfig+0x4ce>
 800274c:	4b83      	ldr	r3, [pc, #524]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a82      	ldr	r2, [pc, #520]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 8002752:	f043 0304 	orr.w	r3, r3, #4
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
 8002758:	4b80      	ldr	r3, [pc, #512]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	4a7f      	ldr	r2, [pc, #508]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6713      	str	r3, [r2, #112]	; 0x70
 8002764:	e00b      	b.n	800277e <HAL_RCC_OscConfig+0x4e6>
 8002766:	4b7d      	ldr	r3, [pc, #500]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	4a7c      	ldr	r2, [pc, #496]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6713      	str	r3, [r2, #112]	; 0x70
 8002772:	4b7a      	ldr	r3, [pc, #488]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	4a79      	ldr	r2, [pc, #484]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d015      	beq.n	80027b2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002786:	f7fe fdf3 	bl	8001370 <HAL_GetTick>
 800278a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7fe fdef 	bl	8001370 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e14b      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027a4:	4b6d      	ldr	r3, [pc, #436]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0ee      	beq.n	800278e <HAL_RCC_OscConfig+0x4f6>
 80027b0:	e014      	b.n	80027dc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b2:	f7fe fddd 	bl	8001370 <HAL_GetTick>
 80027b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7fe fdd9 	bl	8001370 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e135      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027d0:	4b62      	ldr	r3, [pc, #392]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ee      	bne.n	80027ba <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 812a 	beq.w	8002a3a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027e6:	4b5d      	ldr	r3, [pc, #372]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ee:	2b18      	cmp	r3, #24
 80027f0:	f000 80ba 	beq.w	8002968 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	f040 8095 	bne.w	8002928 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fe:	4b57      	ldr	r3, [pc, #348]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a56      	ldr	r2, [pc, #344]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 8002804:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280a:	f7fe fdb1 	bl	8001370 <HAL_GetTick>
 800280e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002812:	f7fe fdad 	bl	8001370 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e10b      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002824:	4b4d      	ldr	r3, [pc, #308]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f0      	bne.n	8002812 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002830:	4b4a      	ldr	r3, [pc, #296]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 8002832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002834:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <HAL_RCC_OscConfig+0x6c8>)
 8002836:	4013      	ands	r3, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	430a      	orrs	r2, r1
 8002844:	4945      	ldr	r1, [pc, #276]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	628b      	str	r3, [r1, #40]	; 0x28
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	3b01      	subs	r3, #1
 8002850:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002858:	3b01      	subs	r3, #1
 800285a:	025b      	lsls	r3, r3, #9
 800285c:	b29b      	uxth	r3, r3
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	3b01      	subs	r3, #1
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002872:	3b01      	subs	r3, #1
 8002874:	061b      	lsls	r3, r3, #24
 8002876:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800287a:	4938      	ldr	r1, [pc, #224]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 800287c:	4313      	orrs	r3, r2
 800287e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002880:	4b36      	ldr	r3, [pc, #216]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	4a35      	ldr	r2, [pc, #212]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800288c:	4b33      	ldr	r3, [pc, #204]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 800288e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002890:	4b34      	ldr	r3, [pc, #208]	; (8002964 <HAL_RCC_OscConfig+0x6cc>)
 8002892:	4013      	ands	r3, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002898:	00d2      	lsls	r2, r2, #3
 800289a:	4930      	ldr	r1, [pc, #192]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 800289c:	4313      	orrs	r3, r2
 800289e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028a0:	4b2e      	ldr	r3, [pc, #184]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	f023 020c 	bic.w	r2, r3, #12
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	492b      	ldr	r1, [pc, #172]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028b2:	4b2a      	ldr	r3, [pc, #168]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	f023 0202 	bic.w	r2, r3, #2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	4927      	ldr	r1, [pc, #156]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	4a24      	ldr	r2, [pc, #144]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80028ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028d0:	4b22      	ldr	r3, [pc, #136]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	4a21      	ldr	r2, [pc, #132]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80028d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028dc:	4b1f      	ldr	r3, [pc, #124]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	4a1e      	ldr	r2, [pc, #120]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80028e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80028e8:	4b1c      	ldr	r3, [pc, #112]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	4a1b      	ldr	r2, [pc, #108]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f4:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 80028fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fd36 	bl	8001370 <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7fe fd32 	bl	8001370 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e090      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x670>
 8002926:	e088      	b.n	8002a3a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0b      	ldr	r2, [pc, #44]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 800292e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe fd1c 	bl	8001370 <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293c:	f7fe fd18 	bl	8001370 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e076      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800294e:	4b03      	ldr	r3, [pc, #12]	; (800295c <HAL_RCC_OscConfig+0x6c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x6a4>
 800295a:	e06e      	b.n	8002a3a <HAL_RCC_OscConfig+0x7a2>
 800295c:	58024400 	.word	0x58024400
 8002960:	fffffc0c 	.word	0xfffffc0c
 8002964:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <HAL_RCC_OscConfig+0x7ac>)
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800296e:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <HAL_RCC_OscConfig+0x7ac>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	2b01      	cmp	r3, #1
 800297a:	d031      	beq.n	80029e0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f003 0203 	and.w	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d12a      	bne.n	80029e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d122      	bne.n	80029e0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d11a      	bne.n	80029e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	0a5b      	lsrs	r3, r3, #9
 80029ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d111      	bne.n	80029e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	0c1b      	lsrs	r3, r3, #16
 80029c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d108      	bne.n	80029e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	0e1b      	lsrs	r3, r3, #24
 80029d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e02b      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80029e4:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <HAL_RCC_OscConfig+0x7ac>)
 80029e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e8:	08db      	lsrs	r3, r3, #3
 80029ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d01f      	beq.n	8002a3a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_RCC_OscConfig+0x7ac>)
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	4a11      	ldr	r2, [pc, #68]	; (8002a44 <HAL_RCC_OscConfig+0x7ac>)
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a06:	f7fe fcb3 	bl	8001370 <HAL_GetTick>
 8002a0a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a0c:	bf00      	nop
 8002a0e:	f7fe fcaf 	bl	8001370 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d0f9      	beq.n	8002a0e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <HAL_RCC_OscConfig+0x7ac>)
 8002a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_RCC_OscConfig+0x7b0>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a26:	00d2      	lsls	r2, r2, #3
 8002a28:	4906      	ldr	r1, [pc, #24]	; (8002a44 <HAL_RCC_OscConfig+0x7ac>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_OscConfig+0x7ac>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <HAL_RCC_OscConfig+0x7ac>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3730      	adds	r7, #48	; 0x30
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	58024400 	.word	0x58024400
 8002a48:	ffff0007 	.word	0xffff0007

08002a4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e19c      	b.n	8002d9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b8a      	ldr	r3, [pc, #552]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d910      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b87      	ldr	r3, [pc, #540]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 020f 	bic.w	r2, r3, #15
 8002a76:	4985      	ldr	r1, [pc, #532]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b83      	ldr	r3, [pc, #524]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e184      	b.n	8002d9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	4b7b      	ldr	r3, [pc, #492]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d908      	bls.n	8002abe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002aac:	4b78      	ldr	r3, [pc, #480]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	4975      	ldr	r1, [pc, #468]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d010      	beq.n	8002aec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	4b70      	ldr	r3, [pc, #448]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d908      	bls.n	8002aec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ada:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	496a      	ldr	r1, [pc, #424]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d010      	beq.n	8002b1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	4b64      	ldr	r3, [pc, #400]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d908      	bls.n	8002b1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b08:	4b61      	ldr	r3, [pc, #388]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	495e      	ldr	r1, [pc, #376]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0320 	and.w	r3, r3, #32
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69da      	ldr	r2, [r3, #28]
 8002b2a:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d908      	bls.n	8002b48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b36:	4b56      	ldr	r3, [pc, #344]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	4953      	ldr	r1, [pc, #332]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d010      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	4b4d      	ldr	r3, [pc, #308]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d908      	bls.n	8002b76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b64:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f023 020f 	bic.w	r2, r3, #15
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4947      	ldr	r1, [pc, #284]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d055      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b82:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4940      	ldr	r1, [pc, #256]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d107      	bne.n	8002bac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b9c:	4b3c      	ldr	r3, [pc, #240]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d121      	bne.n	8002bec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0f6      	b.n	8002d9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bb4:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d115      	bne.n	8002bec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0ea      	b.n	8002d9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bcc:	4b30      	ldr	r3, [pc, #192]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0de      	b.n	8002d9a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0d6      	b.n	8002d9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f023 0207 	bic.w	r2, r3, #7
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4925      	ldr	r1, [pc, #148]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfe:	f7fe fbb7 	bl	8001370 <HAL_GetTick>
 8002c02:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c06:	f7fe fbb3 	bl	8001370 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e0be      	b.n	8002d9a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d1eb      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d010      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d208      	bcs.n	8002c5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f023 020f 	bic.w	r2, r3, #15
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	490e      	ldr	r1, [pc, #56]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d214      	bcs.n	8002c94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 020f 	bic.w	r2, r3, #15
 8002c72:	4906      	ldr	r1, [pc, #24]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e086      	b.n	8002d9a <HAL_RCC_ClockConfig+0x34e>
 8002c8c:	52002000 	.word	0x52002000
 8002c90:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d010      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	4b3f      	ldr	r3, [pc, #252]	; (8002da4 <HAL_RCC_ClockConfig+0x358>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d208      	bcs.n	8002cc2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cb0:	4b3c      	ldr	r3, [pc, #240]	; (8002da4 <HAL_RCC_ClockConfig+0x358>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	4939      	ldr	r1, [pc, #228]	; (8002da4 <HAL_RCC_ClockConfig+0x358>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d010      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <HAL_RCC_ClockConfig+0x358>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d208      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cde:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <HAL_RCC_ClockConfig+0x358>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	492e      	ldr	r1, [pc, #184]	; (8002da4 <HAL_RCC_ClockConfig+0x358>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699a      	ldr	r2, [r3, #24]
 8002d00:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <HAL_RCC_ClockConfig+0x358>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d208      	bcs.n	8002d1e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d0c:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <HAL_RCC_ClockConfig+0x358>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4922      	ldr	r1, [pc, #136]	; (8002da4 <HAL_RCC_ClockConfig+0x358>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d010      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_RCC_ClockConfig+0x358>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d208      	bcs.n	8002d4c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_RCC_ClockConfig+0x358>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	4917      	ldr	r1, [pc, #92]	; (8002da4 <HAL_RCC_ClockConfig+0x358>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d4c:	f000 f834 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <HAL_RCC_ClockConfig+0x358>)
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	4912      	ldr	r1, [pc, #72]	; (8002da8 <HAL_RCC_ClockConfig+0x35c>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
 8002d68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <HAL_RCC_ClockConfig+0x358>)
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	4a0d      	ldr	r2, [pc, #52]	; (8002da8 <HAL_RCC_ClockConfig+0x35c>)
 8002d74:	5cd3      	ldrb	r3, [r2, r3]
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d80:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <HAL_RCC_ClockConfig+0x360>)
 8002d82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d84:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <HAL_RCC_ClockConfig+0x364>)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_RCC_ClockConfig+0x368>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe faa4 	bl	80012dc <HAL_InitTick>
 8002d94:	4603      	mov	r3, r0
 8002d96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	58024400 	.word	0x58024400
 8002da8:	08006118 	.word	0x08006118
 8002dac:	24000064 	.word	0x24000064
 8002db0:	24000060 	.word	0x24000060
 8002db4:	24000068 	.word	0x24000068

08002db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dbe:	4bb3      	ldr	r3, [pc, #716]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dc6:	2b18      	cmp	r3, #24
 8002dc8:	f200 8155 	bhi.w	8003076 <HAL_RCC_GetSysClockFreq+0x2be>
 8002dcc:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd2:	bf00      	nop
 8002dd4:	08002e39 	.word	0x08002e39
 8002dd8:	08003077 	.word	0x08003077
 8002ddc:	08003077 	.word	0x08003077
 8002de0:	08003077 	.word	0x08003077
 8002de4:	08003077 	.word	0x08003077
 8002de8:	08003077 	.word	0x08003077
 8002dec:	08003077 	.word	0x08003077
 8002df0:	08003077 	.word	0x08003077
 8002df4:	08002e5f 	.word	0x08002e5f
 8002df8:	08003077 	.word	0x08003077
 8002dfc:	08003077 	.word	0x08003077
 8002e00:	08003077 	.word	0x08003077
 8002e04:	08003077 	.word	0x08003077
 8002e08:	08003077 	.word	0x08003077
 8002e0c:	08003077 	.word	0x08003077
 8002e10:	08003077 	.word	0x08003077
 8002e14:	08002e65 	.word	0x08002e65
 8002e18:	08003077 	.word	0x08003077
 8002e1c:	08003077 	.word	0x08003077
 8002e20:	08003077 	.word	0x08003077
 8002e24:	08003077 	.word	0x08003077
 8002e28:	08003077 	.word	0x08003077
 8002e2c:	08003077 	.word	0x08003077
 8002e30:	08003077 	.word	0x08003077
 8002e34:	08002e6b 	.word	0x08002e6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e38:	4b94      	ldr	r3, [pc, #592]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d009      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e44:	4b91      	ldr	r3, [pc, #580]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	08db      	lsrs	r3, r3, #3
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	4a90      	ldr	r2, [pc, #576]	; (8003090 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
 8002e54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e56:	e111      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e58:	4b8d      	ldr	r3, [pc, #564]	; (8003090 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e5a:	61bb      	str	r3, [r7, #24]
      break;
 8002e5c:	e10e      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e5e:	4b8d      	ldr	r3, [pc, #564]	; (8003094 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e60:	61bb      	str	r3, [r7, #24]
      break;
 8002e62:	e10b      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e64:	4b8c      	ldr	r3, [pc, #560]	; (8003098 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e66:	61bb      	str	r3, [r7, #24]
      break;
 8002e68:	e108      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e6a:	4b88      	ldr	r3, [pc, #544]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e74:	4b85      	ldr	r3, [pc, #532]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e80:	4b82      	ldr	r3, [pc, #520]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e8a:	4b80      	ldr	r3, [pc, #512]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8e:	08db      	lsrs	r3, r3, #3
 8002e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	ee07 3a90 	vmov	s15, r3
 8002e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80e1 	beq.w	8003070 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	f000 8083 	beq.w	8002fbc <HAL_RCC_GetSysClockFreq+0x204>
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	f200 80a1 	bhi.w	8003000 <HAL_RCC_GetSysClockFreq+0x248>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x114>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d056      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002eca:	e099      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ecc:	4b6f      	ldr	r3, [pc, #444]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d02d      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ed8:	4b6c      	ldr	r3, [pc, #432]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	08db      	lsrs	r3, r3, #3
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	4a6b      	ldr	r2, [pc, #428]	; (8003090 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	ee07 3a90 	vmov	s15, r3
 8002ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f02:	4b62      	ldr	r3, [pc, #392]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f16:	eddf 5a61 	vldr	s11, [pc, #388]	; 800309c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f32:	e087      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80030a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f46:	4b51      	ldr	r3, [pc, #324]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f5a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800309c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f76:	e065      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f82:	eddf 6a48 	vldr	s13, [pc, #288]	; 80030a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f8a:	4b40      	ldr	r3, [pc, #256]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f9e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800309c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fba:	e043      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80030a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fce:	4b2f      	ldr	r3, [pc, #188]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fe2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800309c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ffe:	e021      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80030a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800300e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003012:	4b1e      	ldr	r3, [pc, #120]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800301a:	ee07 3a90 	vmov	s15, r3
 800301e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003022:	ed97 6a02 	vldr	s12, [r7, #8]
 8003026:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800309c <HAL_RCC_GetSysClockFreq+0x2e4>
 800302a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800302e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800303a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003042:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	0a5b      	lsrs	r3, r3, #9
 800304a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800304e:	3301      	adds	r3, #1
 8003050:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	ee07 3a90 	vmov	s15, r3
 8003058:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800305c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003068:	ee17 3a90 	vmov	r3, s15
 800306c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800306e:	e005      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
      break;
 8003074:	e002      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003078:	61bb      	str	r3, [r7, #24]
      break;
 800307a:	bf00      	nop
  }

  return sysclockfreq;
 800307c:	69bb      	ldr	r3, [r7, #24]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	58024400 	.word	0x58024400
 8003090:	03d09000 	.word	0x03d09000
 8003094:	003d0900 	.word	0x003d0900
 8003098:	007a1200 	.word	0x007a1200
 800309c:	46000000 	.word	0x46000000
 80030a0:	4c742400 	.word	0x4c742400
 80030a4:	4a742400 	.word	0x4a742400
 80030a8:	4af42400 	.word	0x4af42400

080030ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80030b2:	f7ff fe81 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 80030b6:	4602      	mov	r2, r0
 80030b8:	4b10      	ldr	r3, [pc, #64]	; (80030fc <HAL_RCC_GetHCLKFreq+0x50>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	0a1b      	lsrs	r3, r3, #8
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	490f      	ldr	r1, [pc, #60]	; (8003100 <HAL_RCC_GetHCLKFreq+0x54>)
 80030c4:	5ccb      	ldrb	r3, [r1, r3]
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	fa22 f303 	lsr.w	r3, r2, r3
 80030ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_RCC_GetHCLKFreq+0x50>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	4a09      	ldr	r2, [pc, #36]	; (8003100 <HAL_RCC_GetHCLKFreq+0x54>)
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	fa22 f303 	lsr.w	r3, r2, r3
 80030e6:	4a07      	ldr	r2, [pc, #28]	; (8003104 <HAL_RCC_GetHCLKFreq+0x58>)
 80030e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030ea:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_RCC_GetHCLKFreq+0x5c>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <HAL_RCC_GetHCLKFreq+0x58>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	58024400 	.word	0x58024400
 8003100:	08006118 	.word	0x08006118
 8003104:	24000064 	.word	0x24000064
 8003108:	24000060 	.word	0x24000060

0800310c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003110:	f7ff ffcc 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4904      	ldr	r1, [pc, #16]	; (8003134 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	58024400 	.word	0x58024400
 8003134:	08006118 	.word	0x08006118

08003138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800313c:	f7ff ffb6 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	0a1b      	lsrs	r3, r3, #8
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4904      	ldr	r1, [pc, #16]	; (8003160 <HAL_RCC_GetPCLK2Freq+0x28>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	58024400 	.word	0x58024400
 8003160:	08006118 	.word	0x08006118

08003164 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003168:	b0c6      	sub	sp, #280	; 0x118
 800316a:	af00      	add	r7, sp, #0
 800316c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003170:	2300      	movs	r3, #0
 8003172:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003176:	2300      	movs	r3, #0
 8003178:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800317c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003188:	2500      	movs	r5, #0
 800318a:	ea54 0305 	orrs.w	r3, r4, r5
 800318e:	d049      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003196:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800319a:	d02f      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800319c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031a0:	d828      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80031a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031a6:	d01a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ac:	d822      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 80031b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031b6:	d007      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031b8:	e01c      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031ba:	4bab      	ldr	r3, [pc, #684]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	4aaa      	ldr	r2, [pc, #680]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031c6:	e01a      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031cc:	3308      	adds	r3, #8
 80031ce:	2102      	movs	r1, #2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f001 fc25 	bl	8004a20 <RCCEx_PLL2_Config>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031dc:	e00f      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031e2:	3328      	adds	r3, #40	; 0x28
 80031e4:	2102      	movs	r1, #2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f001 fccc 	bl	8004b84 <RCCEx_PLL3_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031f2:	e004      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80031fa:	e000      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80031fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003206:	4b98      	ldr	r3, [pc, #608]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800320a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800320e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003214:	4a94      	ldr	r2, [pc, #592]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003216:	430b      	orrs	r3, r1
 8003218:	6513      	str	r3, [r2, #80]	; 0x50
 800321a:	e003      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003220:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003230:	f04f 0900 	mov.w	r9, #0
 8003234:	ea58 0309 	orrs.w	r3, r8, r9
 8003238:	d047      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800323a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003240:	2b04      	cmp	r3, #4
 8003242:	d82a      	bhi.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003244:	a201      	add	r2, pc, #4	; (adr r2, 800324c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	08003261 	.word	0x08003261
 8003250:	0800326f 	.word	0x0800326f
 8003254:	08003285 	.word	0x08003285
 8003258:	080032a3 	.word	0x080032a3
 800325c:	080032a3 	.word	0x080032a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003260:	4b81      	ldr	r3, [pc, #516]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	4a80      	ldr	r2, [pc, #512]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800326c:	e01a      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800326e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003272:	3308      	adds	r3, #8
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f001 fbd2 	bl	8004a20 <RCCEx_PLL2_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003282:	e00f      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003288:	3328      	adds	r3, #40	; 0x28
 800328a:	2100      	movs	r1, #0
 800328c:	4618      	mov	r0, r3
 800328e:	f001 fc79 	bl	8004b84 <RCCEx_PLL3_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003298:	e004      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80032a0:	e000      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80032a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10a      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032ac:	4b6e      	ldr	r3, [pc, #440]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b0:	f023 0107 	bic.w	r1, r3, #7
 80032b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	4a6b      	ldr	r2, [pc, #428]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032bc:	430b      	orrs	r3, r1
 80032be:	6513      	str	r3, [r2, #80]	; 0x50
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80032c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80032d6:	f04f 0b00 	mov.w	fp, #0
 80032da:	ea5a 030b 	orrs.w	r3, sl, fp
 80032de:	d05b      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80032e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032e8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80032ec:	d03b      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80032ee:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80032f2:	d834      	bhi.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80032f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032f8:	d037      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80032fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032fe:	d82e      	bhi.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003300:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003304:	d033      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003306:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800330a:	d828      	bhi.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800330c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003310:	d01a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003316:	d822      	bhi.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800331c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003320:	d007      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003322:	e01c      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003324:	4b50      	ldr	r3, [pc, #320]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	4a4f      	ldr	r2, [pc, #316]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800332a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003330:	e01e      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003336:	3308      	adds	r3, #8
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f001 fb70 	bl	8004a20 <RCCEx_PLL2_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003346:	e013      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800334c:	3328      	adds	r3, #40	; 0x28
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f001 fc17 	bl	8004b84 <RCCEx_PLL3_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800335c:	e008      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003364:	e004      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003366:	bf00      	nop
 8003368:	e002      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800336a:	bf00      	nop
 800336c:	e000      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800336e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003370:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003378:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003384:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003388:	4a37      	ldr	r2, [pc, #220]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800338a:	430b      	orrs	r3, r1
 800338c:	6593      	str	r3, [r2, #88]	; 0x58
 800338e:	e003      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003394:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80033a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80033ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80033b2:	460b      	mov	r3, r1
 80033b4:	4313      	orrs	r3, r2
 80033b6:	d05d      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80033b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033c0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80033c4:	d03b      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80033c6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80033ca:	d834      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80033cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033d0:	d037      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80033d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033d6:	d82e      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80033d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033dc:	d033      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80033de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033e2:	d828      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80033e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033e8:	d01a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80033ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ee:	d822      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80033f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033f8:	d007      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80033fa:	e01c      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	4a19      	ldr	r2, [pc, #100]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003408:	e01e      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800340a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800340e:	3308      	adds	r3, #8
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f001 fb04 	bl	8004a20 <RCCEx_PLL2_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800341e:	e013      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003424:	3328      	adds	r3, #40	; 0x28
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f001 fbab 	bl	8004b84 <RCCEx_PLL3_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003434:	e008      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800343c:	e004      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800343e:	bf00      	nop
 8003440:	e002      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003442:	bf00      	nop
 8003444:	e000      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003448:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10d      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003454:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800345c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003460:	4a01      	ldr	r2, [pc, #4]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003462:	430b      	orrs	r3, r1
 8003464:	6593      	str	r3, [r2, #88]	; 0x58
 8003466:	e005      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003468:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003470:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003480:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003484:	2300      	movs	r3, #0
 8003486:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800348a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800348e:	460b      	mov	r3, r1
 8003490:	4313      	orrs	r3, r2
 8003492:	d03a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	2b30      	cmp	r3, #48	; 0x30
 800349c:	d01f      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800349e:	2b30      	cmp	r3, #48	; 0x30
 80034a0:	d819      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d00c      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d815      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d019      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80034ae:	2b10      	cmp	r3, #16
 80034b0:	d111      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b2:	4baa      	ldr	r3, [pc, #680]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	4aa9      	ldr	r2, [pc, #676]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80034be:	e011      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034c4:	3308      	adds	r3, #8
 80034c6:	2102      	movs	r1, #2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 faa9 	bl	8004a20 <RCCEx_PLL2_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80034d4:	e006      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80034dc:	e002      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80034de:	bf00      	nop
 80034e0:	e000      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80034e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80034ec:	4b9b      	ldr	r3, [pc, #620]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80034f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	4a98      	ldr	r2, [pc, #608]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034fc:	430b      	orrs	r3, r1
 80034fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003500:	e003      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003506:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800350a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003516:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003520:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003524:	460b      	mov	r3, r1
 8003526:	4313      	orrs	r3, r2
 8003528:	d051      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800352a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800352e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003534:	d035      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800353a:	d82e      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800353c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003540:	d031      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003542:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003546:	d828      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354c:	d01a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800354e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003552:	d822      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355c:	d007      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800355e:	e01c      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003560:	4b7e      	ldr	r3, [pc, #504]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	4a7d      	ldr	r2, [pc, #500]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800356a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800356c:	e01c      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800356e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003572:	3308      	adds	r3, #8
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f001 fa52 	bl	8004a20 <RCCEx_PLL2_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003582:	e011      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003588:	3328      	adds	r3, #40	; 0x28
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f001 faf9 	bl	8004b84 <RCCEx_PLL3_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003598:	e006      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80035a0:	e002      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80035a2:	bf00      	nop
 80035a4:	e000      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80035a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035b0:	4b6a      	ldr	r3, [pc, #424]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80035b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	4a67      	ldr	r2, [pc, #412]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6513      	str	r3, [r2, #80]	; 0x50
 80035c4:	e003      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80035da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035de:	2300      	movs	r3, #0
 80035e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035e4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4313      	orrs	r3, r2
 80035ec:	d053      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80035ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f8:	d033      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80035fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035fe:	d82c      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003604:	d02f      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003606:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800360a:	d826      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800360c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003610:	d02b      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003612:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003616:	d820      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800361c:	d012      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800361e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003622:	d81a      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d022      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362c:	d115      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800362e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003632:	3308      	adds	r3, #8
 8003634:	2101      	movs	r1, #1
 8003636:	4618      	mov	r0, r3
 8003638:	f001 f9f2 	bl	8004a20 <RCCEx_PLL2_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003642:	e015      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003648:	3328      	adds	r3, #40	; 0x28
 800364a:	2101      	movs	r1, #1
 800364c:	4618      	mov	r0, r3
 800364e:	f001 fa99 	bl	8004b84 <RCCEx_PLL3_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003658:	e00a      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003660:	e006      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003662:	bf00      	nop
 8003664:	e004      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003666:	bf00      	nop
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800366e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003670:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003678:	4b38      	ldr	r3, [pc, #224]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800367a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003686:	4a35      	ldr	r2, [pc, #212]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003688:	430b      	orrs	r3, r1
 800368a:	6513      	str	r3, [r2, #80]	; 0x50
 800368c:	e003      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003692:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80036a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80036ac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036b0:	460b      	mov	r3, r1
 80036b2:	4313      	orrs	r3, r2
 80036b4:	d058      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80036b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c2:	d033      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80036c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c8:	d82c      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80036ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ce:	d02f      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d4:	d826      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80036d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036da:	d02b      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80036dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036e0:	d820      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80036e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e6:	d012      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80036e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ec:	d81a      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d022      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80036f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036f6:	d115      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036fc:	3308      	adds	r3, #8
 80036fe:	2101      	movs	r1, #1
 8003700:	4618      	mov	r0, r3
 8003702:	f001 f98d 	bl	8004a20 <RCCEx_PLL2_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800370c:	e015      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800370e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003712:	3328      	adds	r3, #40	; 0x28
 8003714:	2101      	movs	r1, #1
 8003716:	4618      	mov	r0, r3
 8003718:	f001 fa34 	bl	8004b84 <RCCEx_PLL3_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003722:	e00a      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800372a:	e006      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800372c:	bf00      	nop
 800372e:	e004      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003730:	bf00      	nop
 8003732:	e002      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003734:	bf00      	nop
 8003736:	e000      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10e      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800374a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800374e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003752:	4a02      	ldr	r2, [pc, #8]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003754:	430b      	orrs	r3, r1
 8003756:	6593      	str	r3, [r2, #88]	; 0x58
 8003758:	e006      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800375a:	bf00      	nop
 800375c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003764:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003778:	2300      	movs	r3, #0
 800377a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800377e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003782:	460b      	mov	r3, r1
 8003784:	4313      	orrs	r3, r2
 8003786:	d037      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800378c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003792:	d00e      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003798:	d816      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d018      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800379e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037a2:	d111      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a4:	4bc4      	ldr	r3, [pc, #784]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	4ac3      	ldr	r2, [pc, #780]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037b0:	e00f      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037b6:	3308      	adds	r3, #8
 80037b8:	2101      	movs	r1, #1
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 f930 	bl	8004a20 <RCCEx_PLL2_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037c6:	e004      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80037ce:	e000      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80037d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10a      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037da:	4bb7      	ldr	r3, [pc, #732]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037de:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80037e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e8:	4ab3      	ldr	r2, [pc, #716]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037ea:	430b      	orrs	r3, r1
 80037ec:	6513      	str	r3, [r2, #80]	; 0x50
 80037ee:	e003      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003808:	2300      	movs	r3, #0
 800380a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800380e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003812:	460b      	mov	r3, r1
 8003814:	4313      	orrs	r3, r2
 8003816:	d039      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800381c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381e:	2b03      	cmp	r3, #3
 8003820:	d81c      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	08003865 	.word	0x08003865
 800382c:	08003839 	.word	0x08003839
 8003830:	08003847 	.word	0x08003847
 8003834:	08003865 	.word	0x08003865
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003838:	4b9f      	ldr	r3, [pc, #636]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	4a9e      	ldr	r2, [pc, #632]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800383e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003842:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003844:	e00f      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800384a:	3308      	adds	r3, #8
 800384c:	2102      	movs	r1, #2
 800384e:	4618      	mov	r0, r3
 8003850:	f001 f8e6 	bl	8004a20 <RCCEx_PLL2_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800385a:	e004      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003862:	e000      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003866:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10a      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800386e:	4b92      	ldr	r3, [pc, #584]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003872:	f023 0103 	bic.w	r1, r3, #3
 8003876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800387a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387c:	4a8e      	ldr	r2, [pc, #568]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800387e:	430b      	orrs	r3, r1
 8003880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003882:	e003      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003884:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003888:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800388c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003898:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f000 8099 	beq.w	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ae:	4b83      	ldr	r3, [pc, #524]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a82      	ldr	r2, [pc, #520]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038ba:	f7fd fd59 	bl	8001370 <HAL_GetTick>
 80038be:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038c2:	e00b      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c4:	f7fd fd54 	bl	8001370 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b64      	cmp	r3, #100	; 0x64
 80038d2:	d903      	bls.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80038da:	e005      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038dc:	4b77      	ldr	r3, [pc, #476]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ed      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80038e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d173      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80038f0:	4b71      	ldr	r3, [pc, #452]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038fc:	4053      	eors	r3, r2
 80038fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003902:	2b00      	cmp	r3, #0
 8003904:	d015      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003906:	4b6c      	ldr	r3, [pc, #432]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003912:	4b69      	ldr	r3, [pc, #420]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a68      	ldr	r2, [pc, #416]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800391e:	4b66      	ldr	r3, [pc, #408]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a65      	ldr	r2, [pc, #404]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003928:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800392a:	4a63      	ldr	r2, [pc, #396]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800392c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003930:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003936:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800393a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393e:	d118      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fd fd16 	bl	8001370 <HAL_GetTick>
 8003944:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003948:	e00d      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fd fd11 	bl	8001370 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003954:	1ad2      	subs	r2, r2, r3
 8003956:	f241 3388 	movw	r3, #5000	; 0x1388
 800395a:	429a      	cmp	r2, r3
 800395c:	d903      	bls.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8003964:	e005      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003966:	4b54      	ldr	r3, [pc, #336]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0eb      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003972:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003976:	2b00      	cmp	r3, #0
 8003978:	d129      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800397a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800397e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800398a:	d10e      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800398c:	4b4a      	ldr	r3, [pc, #296]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800399c:	091a      	lsrs	r2, r3, #4
 800399e:	4b48      	ldr	r3, [pc, #288]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	4a45      	ldr	r2, [pc, #276]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6113      	str	r3, [r2, #16]
 80039a8:	e005      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80039aa:	4b43      	ldr	r3, [pc, #268]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	4a42      	ldr	r2, [pc, #264]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039b4:	6113      	str	r3, [r2, #16]
 80039b6:	4b40      	ldr	r3, [pc, #256]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80039ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c6:	4a3c      	ldr	r2, [pc, #240]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6713      	str	r3, [r2, #112]	; 0x70
 80039cc:	e008      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80039d6:	e003      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f002 0301 	and.w	r3, r2, #1
 80039ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80039f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80039fa:	460b      	mov	r3, r1
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f000 808f 	beq.w	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a08:	2b28      	cmp	r3, #40	; 0x28
 8003a0a:	d871      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003a0c:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003af9 	.word	0x08003af9
 8003a18:	08003af1 	.word	0x08003af1
 8003a1c:	08003af1 	.word	0x08003af1
 8003a20:	08003af1 	.word	0x08003af1
 8003a24:	08003af1 	.word	0x08003af1
 8003a28:	08003af1 	.word	0x08003af1
 8003a2c:	08003af1 	.word	0x08003af1
 8003a30:	08003af1 	.word	0x08003af1
 8003a34:	08003ac5 	.word	0x08003ac5
 8003a38:	08003af1 	.word	0x08003af1
 8003a3c:	08003af1 	.word	0x08003af1
 8003a40:	08003af1 	.word	0x08003af1
 8003a44:	08003af1 	.word	0x08003af1
 8003a48:	08003af1 	.word	0x08003af1
 8003a4c:	08003af1 	.word	0x08003af1
 8003a50:	08003af1 	.word	0x08003af1
 8003a54:	08003adb 	.word	0x08003adb
 8003a58:	08003af1 	.word	0x08003af1
 8003a5c:	08003af1 	.word	0x08003af1
 8003a60:	08003af1 	.word	0x08003af1
 8003a64:	08003af1 	.word	0x08003af1
 8003a68:	08003af1 	.word	0x08003af1
 8003a6c:	08003af1 	.word	0x08003af1
 8003a70:	08003af1 	.word	0x08003af1
 8003a74:	08003af9 	.word	0x08003af9
 8003a78:	08003af1 	.word	0x08003af1
 8003a7c:	08003af1 	.word	0x08003af1
 8003a80:	08003af1 	.word	0x08003af1
 8003a84:	08003af1 	.word	0x08003af1
 8003a88:	08003af1 	.word	0x08003af1
 8003a8c:	08003af1 	.word	0x08003af1
 8003a90:	08003af1 	.word	0x08003af1
 8003a94:	08003af9 	.word	0x08003af9
 8003a98:	08003af1 	.word	0x08003af1
 8003a9c:	08003af1 	.word	0x08003af1
 8003aa0:	08003af1 	.word	0x08003af1
 8003aa4:	08003af1 	.word	0x08003af1
 8003aa8:	08003af1 	.word	0x08003af1
 8003aac:	08003af1 	.word	0x08003af1
 8003ab0:	08003af1 	.word	0x08003af1
 8003ab4:	08003af9 	.word	0x08003af9
 8003ab8:	58024400 	.word	0x58024400
 8003abc:	58024800 	.word	0x58024800
 8003ac0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ac8:	3308      	adds	r3, #8
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 ffa7 	bl	8004a20 <RCCEx_PLL2_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ad8:	e00f      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ade:	3328      	adds	r3, #40	; 0x28
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f001 f84e 	bl	8004b84 <RCCEx_PLL3_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003aee:	e004      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003af6:	e000      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003afa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b02:	4bbf      	ldr	r3, [pc, #764]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b10:	4abb      	ldr	r2, [pc, #748]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b12:	430b      	orrs	r3, r1
 8003b14:	6553      	str	r3, [r2, #84]	; 0x54
 8003b16:	e003      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f002 0302 	and.w	r3, r2, #2
 8003b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	d041      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d824      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b9d 	.word	0x08003b9d
 8003b54:	08003b69 	.word	0x08003b69
 8003b58:	08003b7f 	.word	0x08003b7f
 8003b5c:	08003b9d 	.word	0x08003b9d
 8003b60:	08003b9d 	.word	0x08003b9d
 8003b64:	08003b9d 	.word	0x08003b9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 ff55 	bl	8004a20 <RCCEx_PLL2_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b7c:	e00f      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b82:	3328      	adds	r3, #40	; 0x28
 8003b84:	2101      	movs	r1, #1
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fffc 	bl	8004b84 <RCCEx_PLL3_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b92:	e004      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b9a:	e000      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10a      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ba6:	4b96      	ldr	r3, [pc, #600]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	f023 0107 	bic.w	r1, r3, #7
 8003bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb4:	4a92      	ldr	r2, [pc, #584]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	6553      	str	r3, [r2, #84]	; 0x54
 8003bba:	e003      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f002 0304 	and.w	r3, r2, #4
 8003bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bda:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bde:	460b      	mov	r3, r1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	d044      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d825      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003bf0:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c45 	.word	0x08003c45
 8003bfc:	08003c11 	.word	0x08003c11
 8003c00:	08003c27 	.word	0x08003c27
 8003c04:	08003c45 	.word	0x08003c45
 8003c08:	08003c45 	.word	0x08003c45
 8003c0c:	08003c45 	.word	0x08003c45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c14:	3308      	adds	r3, #8
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 ff01 	bl	8004a20 <RCCEx_PLL2_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c24:	e00f      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c2a:	3328      	adds	r3, #40	; 0x28
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 ffa8 	bl	8004b84 <RCCEx_PLL3_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c3a:	e004      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003c42:	e000      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10b      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c4e:	4b6c      	ldr	r3, [pc, #432]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	f023 0107 	bic.w	r1, r3, #7
 8003c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	4a68      	ldr	r2, [pc, #416]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c60:	430b      	orrs	r3, r1
 8003c62:	6593      	str	r3, [r2, #88]	; 0x58
 8003c64:	e003      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f002 0320 	and.w	r3, r2, #32
 8003c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003c84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	d055      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c9a:	d033      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ca0:	d82c      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d02f      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cac:	d826      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003cae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cb2:	d02b      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003cb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cb8:	d820      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cbe:	d012      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cc4:	d81a      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d022      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cce:	d115      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fea1 	bl	8004a20 <RCCEx_PLL2_Config>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ce4:	e015      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cea:	3328      	adds	r3, #40	; 0x28
 8003cec:	2102      	movs	r1, #2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 ff48 	bl	8004b84 <RCCEx_PLL3_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d02:	e006      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003d04:	bf00      	nop
 8003d06:	e004      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003d08:	bf00      	nop
 8003d0a:	e002      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003d0c:	bf00      	nop
 8003d0e:	e000      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d1a:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d2a:	4a35      	ldr	r2, [pc, #212]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6553      	str	r3, [r2, #84]	; 0x54
 8003d30:	e003      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d36:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003d46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d50:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003d54:	460b      	mov	r3, r1
 8003d56:	4313      	orrs	r3, r2
 8003d58:	d058      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d66:	d033      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003d68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d6c:	d82c      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d72:	d02f      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d78:	d826      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d7e:	d02b      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003d80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d84:	d820      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8a:	d012      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d90:	d81a      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d022      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d115      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003da0:	3308      	adds	r3, #8
 8003da2:	2100      	movs	r1, #0
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fe3b 	bl	8004a20 <RCCEx_PLL2_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003db0:	e015      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003db6:	3328      	adds	r3, #40	; 0x28
 8003db8:	2102      	movs	r1, #2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fee2 	bl	8004b84 <RCCEx_PLL3_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003dc6:	e00a      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003dce:	e006      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003dd0:	bf00      	nop
 8003dd2:	e004      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003dd4:	bf00      	nop
 8003dd6:	e002      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003dd8:	bf00      	nop
 8003dda:	e000      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10e      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003df6:	4a02      	ldr	r2, [pc, #8]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003dfc:	e006      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003dfe:	bf00      	nop
 8003e00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003e18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e22:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003e26:	460b      	mov	r3, r1
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	d055      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e38:	d033      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003e3a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e3e:	d82c      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e44:	d02f      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e4a:	d826      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003e4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e50:	d02b      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003e52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e56:	d820      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e5c:	d012      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e62:	d81a      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d022      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6c:	d115      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e72:	3308      	adds	r3, #8
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fdd2 	bl	8004a20 <RCCEx_PLL2_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e82:	e015      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e88:	3328      	adds	r3, #40	; 0x28
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fe79 	bl	8004b84 <RCCEx_PLL3_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ea0:	e006      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003ea2:	bf00      	nop
 8003ea4:	e004      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003ea6:	bf00      	nop
 8003ea8:	e002      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003eaa:	bf00      	nop
 8003eac:	e000      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003eb8:	4ba0      	ldr	r3, [pc, #640]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ec8:	4a9c      	ldr	r2, [pc, #624]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8003ece:	e003      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ed4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f002 0308 	and.w	r3, r2, #8
 8003ee4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003eee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	d01e      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f0a:	3328      	adds	r3, #40	; 0x28
 8003f0c:	2102      	movs	r1, #2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fe38 	bl	8004b84 <RCCEx_PLL3_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003f20:	4b86      	ldr	r3, [pc, #536]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f30:	4a82      	ldr	r2, [pc, #520]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f32:	430b      	orrs	r3, r1
 8003f34:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f002 0310 	and.w	r3, r2, #16
 8003f42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f46:	2300      	movs	r3, #0
 8003f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f4c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003f50:	460b      	mov	r3, r1
 8003f52:	4313      	orrs	r3, r2
 8003f54:	d01e      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f62:	d10c      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f68:	3328      	adds	r3, #40	; 0x28
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fe09 	bl	8004b84 <RCCEx_PLL3_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f7e:	4b6f      	ldr	r3, [pc, #444]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f8e:	4a6b      	ldr	r2, [pc, #428]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f90:	430b      	orrs	r3, r1
 8003f92:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003fa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fa6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	d03e      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fbc:	d022      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fc2:	d81b      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003fce:	e015      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fd21 	bl	8004a20 <RCCEx_PLL2_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fe4:	e00f      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fea:	3328      	adds	r3, #40	; 0x28
 8003fec:	2102      	movs	r1, #2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fdc8 	bl	8004b84 <RCCEx_PLL3_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ffa:	e004      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004002:	e000      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004006:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800400e:	4b4b      	ldr	r3, [pc, #300]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800401a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800401e:	4a47      	ldr	r2, [pc, #284]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004020:	430b      	orrs	r3, r1
 8004022:	6593      	str	r3, [r2, #88]	; 0x58
 8004024:	e003      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004026:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800402a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800402e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800403a:	673b      	str	r3, [r7, #112]	; 0x70
 800403c:	2300      	movs	r3, #0
 800403e:	677b      	str	r3, [r7, #116]	; 0x74
 8004040:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004044:	460b      	mov	r3, r1
 8004046:	4313      	orrs	r3, r2
 8004048:	d03b      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800404a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800404e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004052:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004056:	d01f      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004058:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800405c:	d818      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800405e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004062:	d003      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004064:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004068:	d007      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800406a:	e011      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406c:	4b33      	ldr	r3, [pc, #204]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4a32      	ldr	r2, [pc, #200]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004078:	e00f      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800407a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800407e:	3328      	adds	r3, #40	; 0x28
 8004080:	2101      	movs	r1, #1
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fd7e 	bl	8004b84 <RCCEx_PLL3_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800408e:	e004      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004096:	e000      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a2:	4b26      	ldr	r3, [pc, #152]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80040aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b2:	4a22      	ldr	r2, [pc, #136]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6553      	str	r3, [r2, #84]	; 0x54
 80040b8:	e003      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80040ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80040d0:	2300      	movs	r3, #0
 80040d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040d4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80040d8:	460b      	mov	r3, r1
 80040da:	4313      	orrs	r3, r2
 80040dc:	d034      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80040de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ec:	d007      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80040ee:	e011      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f0:	4b12      	ldr	r3, [pc, #72]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	4a11      	ldr	r2, [pc, #68]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040fc:	e00e      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004102:	3308      	adds	r3, #8
 8004104:	2102      	movs	r1, #2
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fc8a 	bl	8004a20 <RCCEx_PLL2_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004112:	e003      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800411a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10d      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004128:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800412c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004132:	4a02      	ldr	r2, [pc, #8]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004134:	430b      	orrs	r3, r1
 8004136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004138:	e006      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800413a:	bf00      	nop
 800413c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004144:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004154:	663b      	str	r3, [r7, #96]	; 0x60
 8004156:	2300      	movs	r3, #0
 8004158:	667b      	str	r3, [r7, #100]	; 0x64
 800415a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800415e:	460b      	mov	r3, r1
 8004160:	4313      	orrs	r3, r2
 8004162:	d00c      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004168:	3328      	adds	r3, #40	; 0x28
 800416a:	2102      	movs	r1, #2
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fd09 	bl	8004b84 <RCCEx_PLL3_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800417e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800418a:	65bb      	str	r3, [r7, #88]	; 0x58
 800418c:	2300      	movs	r3, #0
 800418e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004190:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004194:	460b      	mov	r3, r1
 8004196:	4313      	orrs	r3, r2
 8004198:	d036      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800419a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800419e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a4:	d018      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80041a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041aa:	d811      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80041ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b0:	d014      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80041b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b6:	d80b      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d011      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80041bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c0:	d106      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c2:	4bb7      	ldr	r3, [pc, #732]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	4ab6      	ldr	r2, [pc, #728]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80041ce:	e008      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80041d6:	e004      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80041d8:	bf00      	nop
 80041da:	e002      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80041dc:	bf00      	nop
 80041de:	e000      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80041e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041ea:	4bad      	ldr	r3, [pc, #692]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f8:	4aa9      	ldr	r2, [pc, #676]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041fa:	430b      	orrs	r3, r1
 80041fc:	6553      	str	r3, [r2, #84]	; 0x54
 80041fe:	e003      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004204:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004214:	653b      	str	r3, [r7, #80]	; 0x50
 8004216:	2300      	movs	r3, #0
 8004218:	657b      	str	r3, [r7, #84]	; 0x54
 800421a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800421e:	460b      	mov	r3, r1
 8004220:	4313      	orrs	r3, r2
 8004222:	d009      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004224:	4b9e      	ldr	r3, [pc, #632]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004228:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800422c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	4a9b      	ldr	r2, [pc, #620]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004234:	430b      	orrs	r3, r1
 8004236:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004244:	64bb      	str	r3, [r7, #72]	; 0x48
 8004246:	2300      	movs	r3, #0
 8004248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800424a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800424e:	460b      	mov	r3, r1
 8004250:	4313      	orrs	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004254:	4b92      	ldr	r3, [pc, #584]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004258:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800425c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004262:	4a8f      	ldr	r2, [pc, #572]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004264:	430b      	orrs	r3, r1
 8004266:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004274:	643b      	str	r3, [r7, #64]	; 0x40
 8004276:	2300      	movs	r3, #0
 8004278:	647b      	str	r3, [r7, #68]	; 0x44
 800427a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800427e:	460b      	mov	r3, r1
 8004280:	4313      	orrs	r3, r2
 8004282:	d00e      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004284:	4b86      	ldr	r3, [pc, #536]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	4a85      	ldr	r2, [pc, #532]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800428a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800428e:	6113      	str	r3, [r2, #16]
 8004290:	4b83      	ldr	r3, [pc, #524]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004292:	6919      	ldr	r1, [r3, #16]
 8004294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004298:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800429c:	4a80      	ldr	r2, [pc, #512]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800429e:	430b      	orrs	r3, r1
 80042a0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042aa:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80042ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80042b0:	2300      	movs	r3, #0
 80042b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80042b8:	460b      	mov	r3, r1
 80042ba:	4313      	orrs	r3, r2
 80042bc:	d009      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042be:	4b78      	ldr	r3, [pc, #480]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80042c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042cc:	4a74      	ldr	r2, [pc, #464]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042ce:	430b      	orrs	r3, r1
 80042d0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80042de:	633b      	str	r3, [r7, #48]	; 0x30
 80042e0:	2300      	movs	r3, #0
 80042e2:	637b      	str	r3, [r7, #52]	; 0x34
 80042e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80042e8:	460b      	mov	r3, r1
 80042ea:	4313      	orrs	r3, r2
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042ee:	4b6c      	ldr	r3, [pc, #432]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80042f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fe:	4a68      	ldr	r2, [pc, #416]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004300:	430b      	orrs	r3, r1
 8004302:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	2100      	movs	r1, #0
 800430e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004316:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800431a:	460b      	mov	r3, r1
 800431c:	4313      	orrs	r3, r2
 800431e:	d011      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004324:	3308      	adds	r3, #8
 8004326:	2100      	movs	r1, #0
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fb79 	bl	8004a20 <RCCEx_PLL2_Config>
 800432e:	4603      	mov	r3, r0
 8004330:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004334:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004340:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	2100      	movs	r1, #0
 800434e:	6239      	str	r1, [r7, #32]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
 8004356:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800435a:	460b      	mov	r3, r1
 800435c:	4313      	orrs	r3, r2
 800435e:	d011      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004364:	3308      	adds	r3, #8
 8004366:	2101      	movs	r1, #1
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fb59 	bl	8004a20 <RCCEx_PLL2_Config>
 800436e:	4603      	mov	r3, r0
 8004370:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004374:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004380:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	2100      	movs	r1, #0
 800438e:	61b9      	str	r1, [r7, #24]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800439a:	460b      	mov	r3, r1
 800439c:	4313      	orrs	r3, r2
 800439e:	d011      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043a4:	3308      	adds	r3, #8
 80043a6:	2102      	movs	r1, #2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fb39 	bl	8004a20 <RCCEx_PLL2_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80043b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80043c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	2100      	movs	r1, #0
 80043ce:	6139      	str	r1, [r7, #16]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80043da:	460b      	mov	r3, r1
 80043dc:	4313      	orrs	r3, r2
 80043de:	d011      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043e4:	3328      	adds	r3, #40	; 0x28
 80043e6:	2100      	movs	r1, #0
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fbcb 	bl	8004b84 <RCCEx_PLL3_Config>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80043f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004400:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	2100      	movs	r1, #0
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800441a:	460b      	mov	r3, r1
 800441c:	4313      	orrs	r3, r2
 800441e:	d011      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004424:	3328      	adds	r3, #40	; 0x28
 8004426:	2101      	movs	r1, #1
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fbab 	bl	8004b84 <RCCEx_PLL3_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004434:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004440:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	2100      	movs	r1, #0
 800444e:	6039      	str	r1, [r7, #0]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	e9d7 1200 	ldrd	r1, r2, [r7]
 800445a:	460b      	mov	r3, r1
 800445c:	4313      	orrs	r3, r2
 800445e:	d011      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004464:	3328      	adds	r3, #40	; 0x28
 8004466:	2102      	movs	r1, #2
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fb8b 	bl	8004b84 <RCCEx_PLL3_Config>
 800446e:	4603      	mov	r3, r0
 8004470:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004474:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004480:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8004484:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	e000      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
}
 8004492:	4618      	mov	r0, r3
 8004494:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004498:	46bd      	mov	sp, r7
 800449a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800449e:	bf00      	nop
 80044a0:	58024400 	.word	0x58024400

080044a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80044a8:	f7fe fe00 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	4904      	ldr	r1, [pc, #16]	; (80044cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80044ba:	5ccb      	ldrb	r3, [r1, r3]
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	58024400 	.word	0x58024400
 80044cc:	08006118 	.word	0x08006118

080044d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b089      	sub	sp, #36	; 0x24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044d8:	4ba1      	ldr	r3, [pc, #644]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80044e2:	4b9f      	ldr	r3, [pc, #636]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	0b1b      	lsrs	r3, r3, #12
 80044e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80044ee:	4b9c      	ldr	r3, [pc, #624]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80044fa:	4b99      	ldr	r3, [pc, #612]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fe:	08db      	lsrs	r3, r3, #3
 8004500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	fb02 f303 	mul.w	r3, r2, r3
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8111 	beq.w	8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b02      	cmp	r3, #2
 8004522:	f000 8083 	beq.w	800462c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b02      	cmp	r3, #2
 800452a:	f200 80a1 	bhi.w	8004670 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d056      	beq.n	80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800453a:	e099      	b.n	8004670 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800453c:	4b88      	ldr	r3, [pc, #544]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02d      	beq.n	80045a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004548:	4b85      	ldr	r3, [pc, #532]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	08db      	lsrs	r3, r3, #3
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	4a84      	ldr	r2, [pc, #528]	; (8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
 8004558:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	ee07 3a90 	vmov	s15, r3
 8004560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004572:	4b7b      	ldr	r3, [pc, #492]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004582:	ed97 6a03 	vldr	s12, [r7, #12]
 8004586:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800458a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045a2:	e087      	b.n	80046b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800476c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80045b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b6:	4b6a      	ldr	r3, [pc, #424]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045e6:	e065      	b.n	80046b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80045f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fa:	4b59      	ldr	r3, [pc, #356]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460a:	ed97 6a03 	vldr	s12, [r7, #12]
 800460e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800462a:	e043      	b.n	80046b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004636:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b48      	ldr	r3, [pc, #288]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004652:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800466e:	e021      	b.n	80046b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800467e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004682:	4b37      	ldr	r3, [pc, #220]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004692:	ed97 6a03 	vldr	s12, [r7, #12]
 8004696:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800469a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80046b4:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	0a5b      	lsrs	r3, r3, #9
 80046ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80046d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046da:	ee17 2a90 	vmov	r2, s15
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80046e2:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	0c1b      	lsrs	r3, r3, #16
 80046e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ec:	ee07 3a90 	vmov	s15, r3
 80046f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004708:	ee17 2a90 	vmov	r2, s15
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004710:	4b13      	ldr	r3, [pc, #76]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	0e1b      	lsrs	r3, r3, #24
 8004716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800472a:	edd7 6a07 	vldr	s13, [r7, #28]
 800472e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004736:	ee17 2a90 	vmov	r2, s15
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800473e:	e008      	b.n	8004752 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	609a      	str	r2, [r3, #8]
}
 8004752:	bf00      	nop
 8004754:	3724      	adds	r7, #36	; 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	58024400 	.word	0x58024400
 8004764:	03d09000 	.word	0x03d09000
 8004768:	46000000 	.word	0x46000000
 800476c:	4c742400 	.word	0x4c742400
 8004770:	4a742400 	.word	0x4a742400
 8004774:	4af42400 	.word	0x4af42400

08004778 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004778:	b480      	push	{r7}
 800477a:	b089      	sub	sp, #36	; 0x24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004780:	4ba1      	ldr	r3, [pc, #644]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800478a:	4b9f      	ldr	r3, [pc, #636]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	0d1b      	lsrs	r3, r3, #20
 8004790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004794:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004796:	4b9c      	ldr	r3, [pc, #624]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	0a1b      	lsrs	r3, r3, #8
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80047a2:	4b99      	ldr	r3, [pc, #612]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	08db      	lsrs	r3, r3, #3
 80047a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8111 	beq.w	80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	f000 8083 	beq.w	80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	f200 80a1 	bhi.w	8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d056      	beq.n	8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80047e2:	e099      	b.n	8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047e4:	4b88      	ldr	r3, [pc, #544]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d02d      	beq.n	800484c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047f0:	4b85      	ldr	r3, [pc, #532]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	08db      	lsrs	r3, r3, #3
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	4a84      	ldr	r2, [pc, #528]	; (8004a0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004800:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481a:	4b7b      	ldr	r3, [pc, #492]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482a:	ed97 6a03 	vldr	s12, [r7, #12]
 800482e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800483e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004846:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800484a:	e087      	b.n	800495c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485e:	4b6a      	ldr	r3, [pc, #424]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004872:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800488e:	e065      	b.n	800495c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800489e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a2:	4b59      	ldr	r3, [pc, #356]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048d2:	e043      	b.n	800495c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80048e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e6:	4b48      	ldr	r3, [pc, #288]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800490a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004916:	e021      	b.n	800495c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004922:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800492a:	4b37      	ldr	r3, [pc, #220]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493a:	ed97 6a03 	vldr	s12, [r7, #12]
 800493e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800494a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800494e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800495a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800495c:	4b2a      	ldr	r3, [pc, #168]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	0a5b      	lsrs	r3, r3, #9
 8004962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004972:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004976:	edd7 6a07 	vldr	s13, [r7, #28]
 800497a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800497e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004982:	ee17 2a90 	vmov	r2, s15
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800498a:	4b1f      	ldr	r3, [pc, #124]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	0c1b      	lsrs	r3, r3, #16
 8004990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004994:	ee07 3a90 	vmov	s15, r3
 8004998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b0:	ee17 2a90 	vmov	r2, s15
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80049b8:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	0e1b      	lsrs	r3, r3, #24
 80049be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049de:	ee17 2a90 	vmov	r2, s15
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80049e6:	e008      	b.n	80049fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	609a      	str	r2, [r3, #8]
}
 80049fa:	bf00      	nop
 80049fc:	3724      	adds	r7, #36	; 0x24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	03d09000 	.word	0x03d09000
 8004a10:	46000000 	.word	0x46000000
 8004a14:	4c742400 	.word	0x4c742400
 8004a18:	4a742400 	.word	0x4a742400
 8004a1c:	4af42400 	.word	0x4af42400

08004a20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a2e:	4b53      	ldr	r3, [pc, #332]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d101      	bne.n	8004a3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e099      	b.n	8004b72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a3e:	4b4f      	ldr	r3, [pc, #316]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a4e      	ldr	r2, [pc, #312]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004a44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4a:	f7fc fc91 	bl	8001370 <HAL_GetTick>
 8004a4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a50:	e008      	b.n	8004a64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a52:	f7fc fc8d 	bl	8001370 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e086      	b.n	8004b72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a64:	4b45      	ldr	r3, [pc, #276]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f0      	bne.n	8004a52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a70:	4b42      	ldr	r3, [pc, #264]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	031b      	lsls	r3, r3, #12
 8004a7e:	493f      	ldr	r1, [pc, #252]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	628b      	str	r3, [r1, #40]	; 0x28
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	025b      	lsls	r3, r3, #9
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	061b      	lsls	r3, r3, #24
 8004ab0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ab4:	4931      	ldr	r1, [pc, #196]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004aba:	4b30      	ldr	r3, [pc, #192]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	492d      	ldr	r1, [pc, #180]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004acc:	4b2b      	ldr	r3, [pc, #172]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	f023 0220 	bic.w	r2, r3, #32
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	4928      	ldr	r1, [pc, #160]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ade:	4b27      	ldr	r3, [pc, #156]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	4a26      	ldr	r2, [pc, #152]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004ae4:	f023 0310 	bic.w	r3, r3, #16
 8004ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004aea:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004aec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aee:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <RCCEx_PLL2_Config+0x160>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	69d2      	ldr	r2, [r2, #28]
 8004af6:	00d2      	lsls	r2, r2, #3
 8004af8:	4920      	ldr	r1, [pc, #128]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004afe:	4b1f      	ldr	r3, [pc, #124]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	4a1e      	ldr	r2, [pc, #120]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b04:	f043 0310 	orr.w	r3, r3, #16
 8004b08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b10:	4b1a      	ldr	r3, [pc, #104]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	4a19      	ldr	r2, [pc, #100]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b1c:	e00f      	b.n	8004b3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d106      	bne.n	8004b32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b24:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b30:	e005      	b.n	8004b3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b32:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	4a11      	ldr	r2, [pc, #68]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b3e:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a0e      	ldr	r2, [pc, #56]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4a:	f7fc fc11 	bl	8001370 <HAL_GetTick>
 8004b4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b50:	e008      	b.n	8004b64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b52:	f7fc fc0d 	bl	8001370 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e006      	b.n	8004b72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	58024400 	.word	0x58024400
 8004b80:	ffff0007 	.word	0xffff0007

08004b84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b92:	4b53      	ldr	r3, [pc, #332]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d101      	bne.n	8004ba2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e099      	b.n	8004cd6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ba2:	4b4f      	ldr	r3, [pc, #316]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a4e      	ldr	r2, [pc, #312]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bae:	f7fc fbdf 	bl	8001370 <HAL_GetTick>
 8004bb2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bb4:	e008      	b.n	8004bc8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bb6:	f7fc fbdb 	bl	8001370 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e086      	b.n	8004cd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bc8:	4b45      	ldr	r3, [pc, #276]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f0      	bne.n	8004bb6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004bd4:	4b42      	ldr	r3, [pc, #264]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	051b      	lsls	r3, r3, #20
 8004be2:	493f      	ldr	r1, [pc, #252]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	628b      	str	r3, [r1, #40]	; 0x28
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	025b      	lsls	r3, r3, #9
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	061b      	lsls	r3, r3, #24
 8004c14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c18:	4931      	ldr	r1, [pc, #196]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c1e:	4b30      	ldr	r3, [pc, #192]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	492d      	ldr	r1, [pc, #180]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c30:	4b2b      	ldr	r3, [pc, #172]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	4928      	ldr	r1, [pc, #160]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c42:	4b27      	ldr	r3, [pc, #156]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	4a26      	ldr	r2, [pc, #152]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c4e:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c52:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <RCCEx_PLL3_Config+0x160>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	69d2      	ldr	r2, [r2, #28]
 8004c5a:	00d2      	lsls	r2, r2, #3
 8004c5c:	4920      	ldr	r1, [pc, #128]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c62:	4b1f      	ldr	r3, [pc, #124]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d106      	bne.n	8004c82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c74:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c80:	e00f      	b.n	8004ca2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d106      	bne.n	8004c96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c88:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	4a14      	ldr	r2, [pc, #80]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c94:	e005      	b.n	8004ca2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c96:	4b12      	ldr	r3, [pc, #72]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	4a11      	ldr	r2, [pc, #68]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ca0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ca2:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a0e      	ldr	r2, [pc, #56]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cae:	f7fc fb5f 	bl	8001370 <HAL_GetTick>
 8004cb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cb4:	e008      	b.n	8004cc8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cb6:	f7fc fb5b 	bl	8001370 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e006      	b.n	8004cd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	58024400 	.word	0x58024400
 8004ce4:	ffff0007 	.word	0xffff0007

08004ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e042      	b.n	8004d80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7fc f96b 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2224      	movs	r2, #36	; 0x24
 8004d16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fe94 	bl	8005a60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f825 	bl	8004d88 <UART_SetConfig>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e01b      	b.n	8004d80 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 ff13 	bl	8005ba4 <UART_CheckIdleState>
 8004d7e:	4603      	mov	r3, r0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d8c:	b092      	sub	sp, #72	; 0x48
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	4bbe      	ldr	r3, [pc, #760]	; (80050b0 <UART_SetConfig+0x328>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4ab3      	ldr	r2, [pc, #716]	; (80050b4 <UART_SetConfig+0x32c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004df0:	4313      	orrs	r3, r2
 8004df2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	4baf      	ldr	r3, [pc, #700]	; (80050b8 <UART_SetConfig+0x330>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	f023 010f 	bic.w	r1, r3, #15
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4aa6      	ldr	r2, [pc, #664]	; (80050bc <UART_SetConfig+0x334>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d177      	bne.n	8004f18 <UART_SetConfig+0x190>
 8004e28:	4ba5      	ldr	r3, [pc, #660]	; (80050c0 <UART_SetConfig+0x338>)
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e30:	2b28      	cmp	r3, #40	; 0x28
 8004e32:	d86d      	bhi.n	8004f10 <UART_SetConfig+0x188>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <UART_SetConfig+0xb4>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004ee1 	.word	0x08004ee1
 8004e40:	08004f11 	.word	0x08004f11
 8004e44:	08004f11 	.word	0x08004f11
 8004e48:	08004f11 	.word	0x08004f11
 8004e4c:	08004f11 	.word	0x08004f11
 8004e50:	08004f11 	.word	0x08004f11
 8004e54:	08004f11 	.word	0x08004f11
 8004e58:	08004f11 	.word	0x08004f11
 8004e5c:	08004ee9 	.word	0x08004ee9
 8004e60:	08004f11 	.word	0x08004f11
 8004e64:	08004f11 	.word	0x08004f11
 8004e68:	08004f11 	.word	0x08004f11
 8004e6c:	08004f11 	.word	0x08004f11
 8004e70:	08004f11 	.word	0x08004f11
 8004e74:	08004f11 	.word	0x08004f11
 8004e78:	08004f11 	.word	0x08004f11
 8004e7c:	08004ef1 	.word	0x08004ef1
 8004e80:	08004f11 	.word	0x08004f11
 8004e84:	08004f11 	.word	0x08004f11
 8004e88:	08004f11 	.word	0x08004f11
 8004e8c:	08004f11 	.word	0x08004f11
 8004e90:	08004f11 	.word	0x08004f11
 8004e94:	08004f11 	.word	0x08004f11
 8004e98:	08004f11 	.word	0x08004f11
 8004e9c:	08004ef9 	.word	0x08004ef9
 8004ea0:	08004f11 	.word	0x08004f11
 8004ea4:	08004f11 	.word	0x08004f11
 8004ea8:	08004f11 	.word	0x08004f11
 8004eac:	08004f11 	.word	0x08004f11
 8004eb0:	08004f11 	.word	0x08004f11
 8004eb4:	08004f11 	.word	0x08004f11
 8004eb8:	08004f11 	.word	0x08004f11
 8004ebc:	08004f01 	.word	0x08004f01
 8004ec0:	08004f11 	.word	0x08004f11
 8004ec4:	08004f11 	.word	0x08004f11
 8004ec8:	08004f11 	.word	0x08004f11
 8004ecc:	08004f11 	.word	0x08004f11
 8004ed0:	08004f11 	.word	0x08004f11
 8004ed4:	08004f11 	.word	0x08004f11
 8004ed8:	08004f11 	.word	0x08004f11
 8004edc:	08004f09 	.word	0x08004f09
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee6:	e326      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eee:	e322      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004ef0:	2308      	movs	r3, #8
 8004ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef6:	e31e      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004efe:	e31a      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004f00:	2320      	movs	r3, #32
 8004f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f06:	e316      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004f08:	2340      	movs	r3, #64	; 0x40
 8004f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f0e:	e312      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004f10:	2380      	movs	r3, #128	; 0x80
 8004f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f16:	e30e      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a69      	ldr	r2, [pc, #420]	; (80050c4 <UART_SetConfig+0x33c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d130      	bne.n	8004f84 <UART_SetConfig+0x1fc>
 8004f22:	4b67      	ldr	r3, [pc, #412]	; (80050c0 <UART_SetConfig+0x338>)
 8004f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	2b05      	cmp	r3, #5
 8004f2c:	d826      	bhi.n	8004f7c <UART_SetConfig+0x1f4>
 8004f2e:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <UART_SetConfig+0x1ac>)
 8004f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f34:	08004f4d 	.word	0x08004f4d
 8004f38:	08004f55 	.word	0x08004f55
 8004f3c:	08004f5d 	.word	0x08004f5d
 8004f40:	08004f65 	.word	0x08004f65
 8004f44:	08004f6d 	.word	0x08004f6d
 8004f48:	08004f75 	.word	0x08004f75
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f52:	e2f0      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004f54:	2304      	movs	r3, #4
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5a:	e2ec      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004f5c:	2308      	movs	r3, #8
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f62:	e2e8      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004f64:	2310      	movs	r3, #16
 8004f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6a:	e2e4      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004f6c:	2320      	movs	r3, #32
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f72:	e2e0      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004f74:	2340      	movs	r3, #64	; 0x40
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7a:	e2dc      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004f7c:	2380      	movs	r3, #128	; 0x80
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f82:	e2d8      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a4f      	ldr	r2, [pc, #316]	; (80050c8 <UART_SetConfig+0x340>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d130      	bne.n	8004ff0 <UART_SetConfig+0x268>
 8004f8e:	4b4c      	ldr	r3, [pc, #304]	; (80050c0 <UART_SetConfig+0x338>)
 8004f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	2b05      	cmp	r3, #5
 8004f98:	d826      	bhi.n	8004fe8 <UART_SetConfig+0x260>
 8004f9a:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <UART_SetConfig+0x218>)
 8004f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa0:	08004fb9 	.word	0x08004fb9
 8004fa4:	08004fc1 	.word	0x08004fc1
 8004fa8:	08004fc9 	.word	0x08004fc9
 8004fac:	08004fd1 	.word	0x08004fd1
 8004fb0:	08004fd9 	.word	0x08004fd9
 8004fb4:	08004fe1 	.word	0x08004fe1
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fbe:	e2ba      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc6:	e2b6      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004fc8:	2308      	movs	r3, #8
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fce:	e2b2      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd6:	e2ae      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004fd8:	2320      	movs	r3, #32
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fde:	e2aa      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004fe0:	2340      	movs	r3, #64	; 0x40
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fe6:	e2a6      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004fe8:	2380      	movs	r3, #128	; 0x80
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fee:	e2a2      	b.n	8005536 <UART_SetConfig+0x7ae>
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a35      	ldr	r2, [pc, #212]	; (80050cc <UART_SetConfig+0x344>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d130      	bne.n	800505c <UART_SetConfig+0x2d4>
 8004ffa:	4b31      	ldr	r3, [pc, #196]	; (80050c0 <UART_SetConfig+0x338>)
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	2b05      	cmp	r3, #5
 8005004:	d826      	bhi.n	8005054 <UART_SetConfig+0x2cc>
 8005006:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0x284>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	08005025 	.word	0x08005025
 8005010:	0800502d 	.word	0x0800502d
 8005014:	08005035 	.word	0x08005035
 8005018:	0800503d 	.word	0x0800503d
 800501c:	08005045 	.word	0x08005045
 8005020:	0800504d 	.word	0x0800504d
 8005024:	2300      	movs	r3, #0
 8005026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502a:	e284      	b.n	8005536 <UART_SetConfig+0x7ae>
 800502c:	2304      	movs	r3, #4
 800502e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005032:	e280      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005034:	2308      	movs	r3, #8
 8005036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503a:	e27c      	b.n	8005536 <UART_SetConfig+0x7ae>
 800503c:	2310      	movs	r3, #16
 800503e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005042:	e278      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005044:	2320      	movs	r3, #32
 8005046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504a:	e274      	b.n	8005536 <UART_SetConfig+0x7ae>
 800504c:	2340      	movs	r3, #64	; 0x40
 800504e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005052:	e270      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800505a:	e26c      	b.n	8005536 <UART_SetConfig+0x7ae>
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <UART_SetConfig+0x348>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d142      	bne.n	80050ec <UART_SetConfig+0x364>
 8005066:	4b16      	ldr	r3, [pc, #88]	; (80050c0 <UART_SetConfig+0x338>)
 8005068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	2b05      	cmp	r3, #5
 8005070:	d838      	bhi.n	80050e4 <UART_SetConfig+0x35c>
 8005072:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <UART_SetConfig+0x2f0>)
 8005074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005078:	08005091 	.word	0x08005091
 800507c:	08005099 	.word	0x08005099
 8005080:	080050a1 	.word	0x080050a1
 8005084:	080050a9 	.word	0x080050a9
 8005088:	080050d5 	.word	0x080050d5
 800508c:	080050dd 	.word	0x080050dd
 8005090:	2300      	movs	r3, #0
 8005092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005096:	e24e      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005098:	2304      	movs	r3, #4
 800509a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509e:	e24a      	b.n	8005536 <UART_SetConfig+0x7ae>
 80050a0:	2308      	movs	r3, #8
 80050a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a6:	e246      	b.n	8005536 <UART_SetConfig+0x7ae>
 80050a8:	2310      	movs	r3, #16
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ae:	e242      	b.n	8005536 <UART_SetConfig+0x7ae>
 80050b0:	cfff69f3 	.word	0xcfff69f3
 80050b4:	58000c00 	.word	0x58000c00
 80050b8:	11fff4ff 	.word	0x11fff4ff
 80050bc:	40011000 	.word	0x40011000
 80050c0:	58024400 	.word	0x58024400
 80050c4:	40004400 	.word	0x40004400
 80050c8:	40004800 	.word	0x40004800
 80050cc:	40004c00 	.word	0x40004c00
 80050d0:	40005000 	.word	0x40005000
 80050d4:	2320      	movs	r3, #32
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050da:	e22c      	b.n	8005536 <UART_SetConfig+0x7ae>
 80050dc:	2340      	movs	r3, #64	; 0x40
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e2:	e228      	b.n	8005536 <UART_SetConfig+0x7ae>
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ea:	e224      	b.n	8005536 <UART_SetConfig+0x7ae>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4ab1      	ldr	r2, [pc, #708]	; (80053b8 <UART_SetConfig+0x630>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d176      	bne.n	80051e4 <UART_SetConfig+0x45c>
 80050f6:	4bb1      	ldr	r3, [pc, #708]	; (80053bc <UART_SetConfig+0x634>)
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050fe:	2b28      	cmp	r3, #40	; 0x28
 8005100:	d86c      	bhi.n	80051dc <UART_SetConfig+0x454>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <UART_SetConfig+0x380>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	080051ad 	.word	0x080051ad
 800510c:	080051dd 	.word	0x080051dd
 8005110:	080051dd 	.word	0x080051dd
 8005114:	080051dd 	.word	0x080051dd
 8005118:	080051dd 	.word	0x080051dd
 800511c:	080051dd 	.word	0x080051dd
 8005120:	080051dd 	.word	0x080051dd
 8005124:	080051dd 	.word	0x080051dd
 8005128:	080051b5 	.word	0x080051b5
 800512c:	080051dd 	.word	0x080051dd
 8005130:	080051dd 	.word	0x080051dd
 8005134:	080051dd 	.word	0x080051dd
 8005138:	080051dd 	.word	0x080051dd
 800513c:	080051dd 	.word	0x080051dd
 8005140:	080051dd 	.word	0x080051dd
 8005144:	080051dd 	.word	0x080051dd
 8005148:	080051bd 	.word	0x080051bd
 800514c:	080051dd 	.word	0x080051dd
 8005150:	080051dd 	.word	0x080051dd
 8005154:	080051dd 	.word	0x080051dd
 8005158:	080051dd 	.word	0x080051dd
 800515c:	080051dd 	.word	0x080051dd
 8005160:	080051dd 	.word	0x080051dd
 8005164:	080051dd 	.word	0x080051dd
 8005168:	080051c5 	.word	0x080051c5
 800516c:	080051dd 	.word	0x080051dd
 8005170:	080051dd 	.word	0x080051dd
 8005174:	080051dd 	.word	0x080051dd
 8005178:	080051dd 	.word	0x080051dd
 800517c:	080051dd 	.word	0x080051dd
 8005180:	080051dd 	.word	0x080051dd
 8005184:	080051dd 	.word	0x080051dd
 8005188:	080051cd 	.word	0x080051cd
 800518c:	080051dd 	.word	0x080051dd
 8005190:	080051dd 	.word	0x080051dd
 8005194:	080051dd 	.word	0x080051dd
 8005198:	080051dd 	.word	0x080051dd
 800519c:	080051dd 	.word	0x080051dd
 80051a0:	080051dd 	.word	0x080051dd
 80051a4:	080051dd 	.word	0x080051dd
 80051a8:	080051d5 	.word	0x080051d5
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b2:	e1c0      	b.n	8005536 <UART_SetConfig+0x7ae>
 80051b4:	2304      	movs	r3, #4
 80051b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ba:	e1bc      	b.n	8005536 <UART_SetConfig+0x7ae>
 80051bc:	2308      	movs	r3, #8
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c2:	e1b8      	b.n	8005536 <UART_SetConfig+0x7ae>
 80051c4:	2310      	movs	r3, #16
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ca:	e1b4      	b.n	8005536 <UART_SetConfig+0x7ae>
 80051cc:	2320      	movs	r3, #32
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d2:	e1b0      	b.n	8005536 <UART_SetConfig+0x7ae>
 80051d4:	2340      	movs	r3, #64	; 0x40
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051da:	e1ac      	b.n	8005536 <UART_SetConfig+0x7ae>
 80051dc:	2380      	movs	r3, #128	; 0x80
 80051de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e2:	e1a8      	b.n	8005536 <UART_SetConfig+0x7ae>
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a75      	ldr	r2, [pc, #468]	; (80053c0 <UART_SetConfig+0x638>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d130      	bne.n	8005250 <UART_SetConfig+0x4c8>
 80051ee:	4b73      	ldr	r3, [pc, #460]	; (80053bc <UART_SetConfig+0x634>)
 80051f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	d826      	bhi.n	8005248 <UART_SetConfig+0x4c0>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <UART_SetConfig+0x478>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005219 	.word	0x08005219
 8005204:	08005221 	.word	0x08005221
 8005208:	08005229 	.word	0x08005229
 800520c:	08005231 	.word	0x08005231
 8005210:	08005239 	.word	0x08005239
 8005214:	08005241 	.word	0x08005241
 8005218:	2300      	movs	r3, #0
 800521a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521e:	e18a      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005220:	2304      	movs	r3, #4
 8005222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005226:	e186      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005228:	2308      	movs	r3, #8
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522e:	e182      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005230:	2310      	movs	r3, #16
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005236:	e17e      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005238:	2320      	movs	r3, #32
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523e:	e17a      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005240:	2340      	movs	r3, #64	; 0x40
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005246:	e176      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005248:	2380      	movs	r3, #128	; 0x80
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524e:	e172      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a5b      	ldr	r2, [pc, #364]	; (80053c4 <UART_SetConfig+0x63c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d130      	bne.n	80052bc <UART_SetConfig+0x534>
 800525a:	4b58      	ldr	r3, [pc, #352]	; (80053bc <UART_SetConfig+0x634>)
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	2b05      	cmp	r3, #5
 8005264:	d826      	bhi.n	80052b4 <UART_SetConfig+0x52c>
 8005266:	a201      	add	r2, pc, #4	; (adr r2, 800526c <UART_SetConfig+0x4e4>)
 8005268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526c:	08005285 	.word	0x08005285
 8005270:	0800528d 	.word	0x0800528d
 8005274:	08005295 	.word	0x08005295
 8005278:	0800529d 	.word	0x0800529d
 800527c:	080052a5 	.word	0x080052a5
 8005280:	080052ad 	.word	0x080052ad
 8005284:	2300      	movs	r3, #0
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528a:	e154      	b.n	8005536 <UART_SetConfig+0x7ae>
 800528c:	2304      	movs	r3, #4
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005292:	e150      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005294:	2308      	movs	r3, #8
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529a:	e14c      	b.n	8005536 <UART_SetConfig+0x7ae>
 800529c:	2310      	movs	r3, #16
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a2:	e148      	b.n	8005536 <UART_SetConfig+0x7ae>
 80052a4:	2320      	movs	r3, #32
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e144      	b.n	8005536 <UART_SetConfig+0x7ae>
 80052ac:	2340      	movs	r3, #64	; 0x40
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b2:	e140      	b.n	8005536 <UART_SetConfig+0x7ae>
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ba:	e13c      	b.n	8005536 <UART_SetConfig+0x7ae>
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a41      	ldr	r2, [pc, #260]	; (80053c8 <UART_SetConfig+0x640>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	f040 8082 	bne.w	80053cc <UART_SetConfig+0x644>
 80052c8:	4b3c      	ldr	r3, [pc, #240]	; (80053bc <UART_SetConfig+0x634>)
 80052ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d0:	2b28      	cmp	r3, #40	; 0x28
 80052d2:	d86d      	bhi.n	80053b0 <UART_SetConfig+0x628>
 80052d4:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <UART_SetConfig+0x554>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	08005381 	.word	0x08005381
 80052e0:	080053b1 	.word	0x080053b1
 80052e4:	080053b1 	.word	0x080053b1
 80052e8:	080053b1 	.word	0x080053b1
 80052ec:	080053b1 	.word	0x080053b1
 80052f0:	080053b1 	.word	0x080053b1
 80052f4:	080053b1 	.word	0x080053b1
 80052f8:	080053b1 	.word	0x080053b1
 80052fc:	08005389 	.word	0x08005389
 8005300:	080053b1 	.word	0x080053b1
 8005304:	080053b1 	.word	0x080053b1
 8005308:	080053b1 	.word	0x080053b1
 800530c:	080053b1 	.word	0x080053b1
 8005310:	080053b1 	.word	0x080053b1
 8005314:	080053b1 	.word	0x080053b1
 8005318:	080053b1 	.word	0x080053b1
 800531c:	08005391 	.word	0x08005391
 8005320:	080053b1 	.word	0x080053b1
 8005324:	080053b1 	.word	0x080053b1
 8005328:	080053b1 	.word	0x080053b1
 800532c:	080053b1 	.word	0x080053b1
 8005330:	080053b1 	.word	0x080053b1
 8005334:	080053b1 	.word	0x080053b1
 8005338:	080053b1 	.word	0x080053b1
 800533c:	08005399 	.word	0x08005399
 8005340:	080053b1 	.word	0x080053b1
 8005344:	080053b1 	.word	0x080053b1
 8005348:	080053b1 	.word	0x080053b1
 800534c:	080053b1 	.word	0x080053b1
 8005350:	080053b1 	.word	0x080053b1
 8005354:	080053b1 	.word	0x080053b1
 8005358:	080053b1 	.word	0x080053b1
 800535c:	080053a1 	.word	0x080053a1
 8005360:	080053b1 	.word	0x080053b1
 8005364:	080053b1 	.word	0x080053b1
 8005368:	080053b1 	.word	0x080053b1
 800536c:	080053b1 	.word	0x080053b1
 8005370:	080053b1 	.word	0x080053b1
 8005374:	080053b1 	.word	0x080053b1
 8005378:	080053b1 	.word	0x080053b1
 800537c:	080053a9 	.word	0x080053a9
 8005380:	2301      	movs	r3, #1
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005386:	e0d6      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005388:	2304      	movs	r3, #4
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538e:	e0d2      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005390:	2308      	movs	r3, #8
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005396:	e0ce      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005398:	2310      	movs	r3, #16
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539e:	e0ca      	b.n	8005536 <UART_SetConfig+0x7ae>
 80053a0:	2320      	movs	r3, #32
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053a6:	e0c6      	b.n	8005536 <UART_SetConfig+0x7ae>
 80053a8:	2340      	movs	r3, #64	; 0x40
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ae:	e0c2      	b.n	8005536 <UART_SetConfig+0x7ae>
 80053b0:	2380      	movs	r3, #128	; 0x80
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b6:	e0be      	b.n	8005536 <UART_SetConfig+0x7ae>
 80053b8:	40011400 	.word	0x40011400
 80053bc:	58024400 	.word	0x58024400
 80053c0:	40007800 	.word	0x40007800
 80053c4:	40007c00 	.word	0x40007c00
 80053c8:	40011800 	.word	0x40011800
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4aad      	ldr	r2, [pc, #692]	; (8005688 <UART_SetConfig+0x900>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d176      	bne.n	80054c4 <UART_SetConfig+0x73c>
 80053d6:	4bad      	ldr	r3, [pc, #692]	; (800568c <UART_SetConfig+0x904>)
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053de:	2b28      	cmp	r3, #40	; 0x28
 80053e0:	d86c      	bhi.n	80054bc <UART_SetConfig+0x734>
 80053e2:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <UART_SetConfig+0x660>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	0800548d 	.word	0x0800548d
 80053ec:	080054bd 	.word	0x080054bd
 80053f0:	080054bd 	.word	0x080054bd
 80053f4:	080054bd 	.word	0x080054bd
 80053f8:	080054bd 	.word	0x080054bd
 80053fc:	080054bd 	.word	0x080054bd
 8005400:	080054bd 	.word	0x080054bd
 8005404:	080054bd 	.word	0x080054bd
 8005408:	08005495 	.word	0x08005495
 800540c:	080054bd 	.word	0x080054bd
 8005410:	080054bd 	.word	0x080054bd
 8005414:	080054bd 	.word	0x080054bd
 8005418:	080054bd 	.word	0x080054bd
 800541c:	080054bd 	.word	0x080054bd
 8005420:	080054bd 	.word	0x080054bd
 8005424:	080054bd 	.word	0x080054bd
 8005428:	0800549d 	.word	0x0800549d
 800542c:	080054bd 	.word	0x080054bd
 8005430:	080054bd 	.word	0x080054bd
 8005434:	080054bd 	.word	0x080054bd
 8005438:	080054bd 	.word	0x080054bd
 800543c:	080054bd 	.word	0x080054bd
 8005440:	080054bd 	.word	0x080054bd
 8005444:	080054bd 	.word	0x080054bd
 8005448:	080054a5 	.word	0x080054a5
 800544c:	080054bd 	.word	0x080054bd
 8005450:	080054bd 	.word	0x080054bd
 8005454:	080054bd 	.word	0x080054bd
 8005458:	080054bd 	.word	0x080054bd
 800545c:	080054bd 	.word	0x080054bd
 8005460:	080054bd 	.word	0x080054bd
 8005464:	080054bd 	.word	0x080054bd
 8005468:	080054ad 	.word	0x080054ad
 800546c:	080054bd 	.word	0x080054bd
 8005470:	080054bd 	.word	0x080054bd
 8005474:	080054bd 	.word	0x080054bd
 8005478:	080054bd 	.word	0x080054bd
 800547c:	080054bd 	.word	0x080054bd
 8005480:	080054bd 	.word	0x080054bd
 8005484:	080054bd 	.word	0x080054bd
 8005488:	080054b5 	.word	0x080054b5
 800548c:	2301      	movs	r3, #1
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005492:	e050      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005494:	2304      	movs	r3, #4
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549a:	e04c      	b.n	8005536 <UART_SetConfig+0x7ae>
 800549c:	2308      	movs	r3, #8
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a2:	e048      	b.n	8005536 <UART_SetConfig+0x7ae>
 80054a4:	2310      	movs	r3, #16
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054aa:	e044      	b.n	8005536 <UART_SetConfig+0x7ae>
 80054ac:	2320      	movs	r3, #32
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b2:	e040      	b.n	8005536 <UART_SetConfig+0x7ae>
 80054b4:	2340      	movs	r3, #64	; 0x40
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ba:	e03c      	b.n	8005536 <UART_SetConfig+0x7ae>
 80054bc:	2380      	movs	r3, #128	; 0x80
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c2:	e038      	b.n	8005536 <UART_SetConfig+0x7ae>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a71      	ldr	r2, [pc, #452]	; (8005690 <UART_SetConfig+0x908>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d130      	bne.n	8005530 <UART_SetConfig+0x7a8>
 80054ce:	4b6f      	ldr	r3, [pc, #444]	; (800568c <UART_SetConfig+0x904>)
 80054d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	2b05      	cmp	r3, #5
 80054d8:	d826      	bhi.n	8005528 <UART_SetConfig+0x7a0>
 80054da:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <UART_SetConfig+0x758>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	080054f9 	.word	0x080054f9
 80054e4:	08005501 	.word	0x08005501
 80054e8:	08005509 	.word	0x08005509
 80054ec:	08005511 	.word	0x08005511
 80054f0:	08005519 	.word	0x08005519
 80054f4:	08005521 	.word	0x08005521
 80054f8:	2302      	movs	r3, #2
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fe:	e01a      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005500:	2304      	movs	r3, #4
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005506:	e016      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005508:	2308      	movs	r3, #8
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550e:	e012      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005510:	2310      	movs	r3, #16
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005516:	e00e      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005518:	2320      	movs	r3, #32
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551e:	e00a      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005520:	2340      	movs	r3, #64	; 0x40
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005526:	e006      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005528:	2380      	movs	r3, #128	; 0x80
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552e:	e002      	b.n	8005536 <UART_SetConfig+0x7ae>
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a55      	ldr	r2, [pc, #340]	; (8005690 <UART_SetConfig+0x908>)
 800553c:	4293      	cmp	r3, r2
 800553e:	f040 80f8 	bne.w	8005732 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005542:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005546:	2b20      	cmp	r3, #32
 8005548:	dc46      	bgt.n	80055d8 <UART_SetConfig+0x850>
 800554a:	2b02      	cmp	r3, #2
 800554c:	db75      	blt.n	800563a <UART_SetConfig+0x8b2>
 800554e:	3b02      	subs	r3, #2
 8005550:	2b1e      	cmp	r3, #30
 8005552:	d872      	bhi.n	800563a <UART_SetConfig+0x8b2>
 8005554:	a201      	add	r2, pc, #4	; (adr r2, 800555c <UART_SetConfig+0x7d4>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	080055df 	.word	0x080055df
 8005560:	0800563b 	.word	0x0800563b
 8005564:	080055e7 	.word	0x080055e7
 8005568:	0800563b 	.word	0x0800563b
 800556c:	0800563b 	.word	0x0800563b
 8005570:	0800563b 	.word	0x0800563b
 8005574:	080055f7 	.word	0x080055f7
 8005578:	0800563b 	.word	0x0800563b
 800557c:	0800563b 	.word	0x0800563b
 8005580:	0800563b 	.word	0x0800563b
 8005584:	0800563b 	.word	0x0800563b
 8005588:	0800563b 	.word	0x0800563b
 800558c:	0800563b 	.word	0x0800563b
 8005590:	0800563b 	.word	0x0800563b
 8005594:	08005607 	.word	0x08005607
 8005598:	0800563b 	.word	0x0800563b
 800559c:	0800563b 	.word	0x0800563b
 80055a0:	0800563b 	.word	0x0800563b
 80055a4:	0800563b 	.word	0x0800563b
 80055a8:	0800563b 	.word	0x0800563b
 80055ac:	0800563b 	.word	0x0800563b
 80055b0:	0800563b 	.word	0x0800563b
 80055b4:	0800563b 	.word	0x0800563b
 80055b8:	0800563b 	.word	0x0800563b
 80055bc:	0800563b 	.word	0x0800563b
 80055c0:	0800563b 	.word	0x0800563b
 80055c4:	0800563b 	.word	0x0800563b
 80055c8:	0800563b 	.word	0x0800563b
 80055cc:	0800563b 	.word	0x0800563b
 80055d0:	0800563b 	.word	0x0800563b
 80055d4:	0800562d 	.word	0x0800562d
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d02a      	beq.n	8005632 <UART_SetConfig+0x8aa>
 80055dc:	e02d      	b.n	800563a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80055de:	f7fe ff61 	bl	80044a4 <HAL_RCCEx_GetD3PCLK1Freq>
 80055e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055e4:	e02f      	b.n	8005646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe ff70 	bl	80044d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055f4:	e027      	b.n	8005646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055f6:	f107 0318 	add.w	r3, r7, #24
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff f8bc 	bl	8004778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005604:	e01f      	b.n	8005646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005606:	4b21      	ldr	r3, [pc, #132]	; (800568c <UART_SetConfig+0x904>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005612:	4b1e      	ldr	r3, [pc, #120]	; (800568c <UART_SetConfig+0x904>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	08db      	lsrs	r3, r3, #3
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <UART_SetConfig+0x90c>)
 800561e:	fa22 f303 	lsr.w	r3, r2, r3
 8005622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005624:	e00f      	b.n	8005646 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005626:	4b1b      	ldr	r3, [pc, #108]	; (8005694 <UART_SetConfig+0x90c>)
 8005628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800562a:	e00c      	b.n	8005646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800562c:	4b1a      	ldr	r3, [pc, #104]	; (8005698 <UART_SetConfig+0x910>)
 800562e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005630:	e009      	b.n	8005646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005638:	e005      	b.n	8005646 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005644:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 81ee 	beq.w	8005a2a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	4a12      	ldr	r2, [pc, #72]	; (800569c <UART_SetConfig+0x914>)
 8005654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005658:	461a      	mov	r2, r3
 800565a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005660:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	4413      	add	r3, r2
 800566c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800566e:	429a      	cmp	r2, r3
 8005670:	d305      	bcc.n	800567e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567a:	429a      	cmp	r2, r3
 800567c:	d910      	bls.n	80056a0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005684:	e1d1      	b.n	8005a2a <UART_SetConfig+0xca2>
 8005686:	bf00      	nop
 8005688:	40011c00 	.word	0x40011c00
 800568c:	58024400 	.word	0x58024400
 8005690:	58000c00 	.word	0x58000c00
 8005694:	03d09000 	.word	0x03d09000
 8005698:	003d0900 	.word	0x003d0900
 800569c:	08006128 	.word	0x08006128
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a2:	2200      	movs	r2, #0
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	60fa      	str	r2, [r7, #12]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	4ac0      	ldr	r2, [pc, #768]	; (80059b0 <UART_SetConfig+0xc28>)
 80056ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2200      	movs	r2, #0
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	607a      	str	r2, [r7, #4]
 80056ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056c2:	f7fa fe23 	bl	800030c <__aeabi_uldivmod>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4610      	mov	r0, r2
 80056cc:	4619      	mov	r1, r3
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	f04f 0300 	mov.w	r3, #0
 80056d6:	020b      	lsls	r3, r1, #8
 80056d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056dc:	0202      	lsls	r2, r0, #8
 80056de:	6979      	ldr	r1, [r7, #20]
 80056e0:	6849      	ldr	r1, [r1, #4]
 80056e2:	0849      	lsrs	r1, r1, #1
 80056e4:	2000      	movs	r0, #0
 80056e6:	460c      	mov	r4, r1
 80056e8:	4605      	mov	r5, r0
 80056ea:	eb12 0804 	adds.w	r8, r2, r4
 80056ee:	eb43 0905 	adc.w	r9, r3, r5
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	469a      	mov	sl, r3
 80056fa:	4693      	mov	fp, r2
 80056fc:	4652      	mov	r2, sl
 80056fe:	465b      	mov	r3, fp
 8005700:	4640      	mov	r0, r8
 8005702:	4649      	mov	r1, r9
 8005704:	f7fa fe02 	bl	800030c <__aeabi_uldivmod>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4613      	mov	r3, r2
 800570e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005716:	d308      	bcc.n	800572a <UART_SetConfig+0x9a2>
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800571e:	d204      	bcs.n	800572a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005726:	60da      	str	r2, [r3, #12]
 8005728:	e17f      	b.n	8005a2a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005730:	e17b      	b.n	8005a2a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800573a:	f040 80bd 	bne.w	80058b8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800573e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005742:	2b20      	cmp	r3, #32
 8005744:	dc48      	bgt.n	80057d8 <UART_SetConfig+0xa50>
 8005746:	2b00      	cmp	r3, #0
 8005748:	db7b      	blt.n	8005842 <UART_SetConfig+0xaba>
 800574a:	2b20      	cmp	r3, #32
 800574c:	d879      	bhi.n	8005842 <UART_SetConfig+0xaba>
 800574e:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <UART_SetConfig+0x9cc>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	080057df 	.word	0x080057df
 8005758:	080057e7 	.word	0x080057e7
 800575c:	08005843 	.word	0x08005843
 8005760:	08005843 	.word	0x08005843
 8005764:	080057ef 	.word	0x080057ef
 8005768:	08005843 	.word	0x08005843
 800576c:	08005843 	.word	0x08005843
 8005770:	08005843 	.word	0x08005843
 8005774:	080057ff 	.word	0x080057ff
 8005778:	08005843 	.word	0x08005843
 800577c:	08005843 	.word	0x08005843
 8005780:	08005843 	.word	0x08005843
 8005784:	08005843 	.word	0x08005843
 8005788:	08005843 	.word	0x08005843
 800578c:	08005843 	.word	0x08005843
 8005790:	08005843 	.word	0x08005843
 8005794:	0800580f 	.word	0x0800580f
 8005798:	08005843 	.word	0x08005843
 800579c:	08005843 	.word	0x08005843
 80057a0:	08005843 	.word	0x08005843
 80057a4:	08005843 	.word	0x08005843
 80057a8:	08005843 	.word	0x08005843
 80057ac:	08005843 	.word	0x08005843
 80057b0:	08005843 	.word	0x08005843
 80057b4:	08005843 	.word	0x08005843
 80057b8:	08005843 	.word	0x08005843
 80057bc:	08005843 	.word	0x08005843
 80057c0:	08005843 	.word	0x08005843
 80057c4:	08005843 	.word	0x08005843
 80057c8:	08005843 	.word	0x08005843
 80057cc:	08005843 	.word	0x08005843
 80057d0:	08005843 	.word	0x08005843
 80057d4:	08005835 	.word	0x08005835
 80057d8:	2b40      	cmp	r3, #64	; 0x40
 80057da:	d02e      	beq.n	800583a <UART_SetConfig+0xab2>
 80057dc:	e031      	b.n	8005842 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057de:	f7fd fc95 	bl	800310c <HAL_RCC_GetPCLK1Freq>
 80057e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057e4:	e033      	b.n	800584e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e6:	f7fd fca7 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 80057ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057ec:	e02f      	b.n	800584e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe fe6c 	bl	80044d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057fc:	e027      	b.n	800584e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057fe:	f107 0318 	add.w	r3, r7, #24
 8005802:	4618      	mov	r0, r3
 8005804:	f7fe ffb8 	bl	8004778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800580c:	e01f      	b.n	800584e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800580e:	4b69      	ldr	r3, [pc, #420]	; (80059b4 <UART_SetConfig+0xc2c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d009      	beq.n	800582e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800581a:	4b66      	ldr	r3, [pc, #408]	; (80059b4 <UART_SetConfig+0xc2c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	08db      	lsrs	r3, r3, #3
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	4a64      	ldr	r2, [pc, #400]	; (80059b8 <UART_SetConfig+0xc30>)
 8005826:	fa22 f303 	lsr.w	r3, r2, r3
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800582c:	e00f      	b.n	800584e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800582e:	4b62      	ldr	r3, [pc, #392]	; (80059b8 <UART_SetConfig+0xc30>)
 8005830:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005832:	e00c      	b.n	800584e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005834:	4b61      	ldr	r3, [pc, #388]	; (80059bc <UART_SetConfig+0xc34>)
 8005836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005838:	e009      	b.n	800584e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005840:	e005      	b.n	800584e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800584c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800584e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80ea 	beq.w	8005a2a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	4a55      	ldr	r2, [pc, #340]	; (80059b0 <UART_SetConfig+0xc28>)
 800585c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005860:	461a      	mov	r2, r3
 8005862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005864:	fbb3 f3f2 	udiv	r3, r3, r2
 8005868:	005a      	lsls	r2, r3, #1
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	441a      	add	r2, r3
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	fbb2 f3f3 	udiv	r3, r2, r3
 800587a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	2b0f      	cmp	r3, #15
 8005880:	d916      	bls.n	80058b0 <UART_SetConfig+0xb28>
 8005882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005888:	d212      	bcs.n	80058b0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800588a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588c:	b29b      	uxth	r3, r3
 800588e:	f023 030f 	bic.w	r3, r3, #15
 8005892:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	b29b      	uxth	r3, r3
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	b29a      	uxth	r2, r3
 80058a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058a2:	4313      	orrs	r3, r2
 80058a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80058ac:	60da      	str	r2, [r3, #12]
 80058ae:	e0bc      	b.n	8005a2a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80058b6:	e0b8      	b.n	8005a2a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80058bc:	2b20      	cmp	r3, #32
 80058be:	dc4b      	bgt.n	8005958 <UART_SetConfig+0xbd0>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f2c0 8087 	blt.w	80059d4 <UART_SetConfig+0xc4c>
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	f200 8084 	bhi.w	80059d4 <UART_SetConfig+0xc4c>
 80058cc:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <UART_SetConfig+0xb4c>)
 80058ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d2:	bf00      	nop
 80058d4:	0800595f 	.word	0x0800595f
 80058d8:	08005967 	.word	0x08005967
 80058dc:	080059d5 	.word	0x080059d5
 80058e0:	080059d5 	.word	0x080059d5
 80058e4:	0800596f 	.word	0x0800596f
 80058e8:	080059d5 	.word	0x080059d5
 80058ec:	080059d5 	.word	0x080059d5
 80058f0:	080059d5 	.word	0x080059d5
 80058f4:	0800597f 	.word	0x0800597f
 80058f8:	080059d5 	.word	0x080059d5
 80058fc:	080059d5 	.word	0x080059d5
 8005900:	080059d5 	.word	0x080059d5
 8005904:	080059d5 	.word	0x080059d5
 8005908:	080059d5 	.word	0x080059d5
 800590c:	080059d5 	.word	0x080059d5
 8005910:	080059d5 	.word	0x080059d5
 8005914:	0800598f 	.word	0x0800598f
 8005918:	080059d5 	.word	0x080059d5
 800591c:	080059d5 	.word	0x080059d5
 8005920:	080059d5 	.word	0x080059d5
 8005924:	080059d5 	.word	0x080059d5
 8005928:	080059d5 	.word	0x080059d5
 800592c:	080059d5 	.word	0x080059d5
 8005930:	080059d5 	.word	0x080059d5
 8005934:	080059d5 	.word	0x080059d5
 8005938:	080059d5 	.word	0x080059d5
 800593c:	080059d5 	.word	0x080059d5
 8005940:	080059d5 	.word	0x080059d5
 8005944:	080059d5 	.word	0x080059d5
 8005948:	080059d5 	.word	0x080059d5
 800594c:	080059d5 	.word	0x080059d5
 8005950:	080059d5 	.word	0x080059d5
 8005954:	080059c7 	.word	0x080059c7
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	d037      	beq.n	80059cc <UART_SetConfig+0xc44>
 800595c:	e03a      	b.n	80059d4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800595e:	f7fd fbd5 	bl	800310c <HAL_RCC_GetPCLK1Freq>
 8005962:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005964:	e03c      	b.n	80059e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005966:	f7fd fbe7 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 800596a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800596c:	e038      	b.n	80059e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800596e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005972:	4618      	mov	r0, r3
 8005974:	f7fe fdac 	bl	80044d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800597c:	e030      	b.n	80059e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800597e:	f107 0318 	add.w	r3, r7, #24
 8005982:	4618      	mov	r0, r3
 8005984:	f7fe fef8 	bl	8004778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800598c:	e028      	b.n	80059e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800598e:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <UART_SetConfig+0xc2c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b00      	cmp	r3, #0
 8005998:	d012      	beq.n	80059c0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <UART_SetConfig+0xc2c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	08db      	lsrs	r3, r3, #3
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	4a04      	ldr	r2, [pc, #16]	; (80059b8 <UART_SetConfig+0xc30>)
 80059a6:	fa22 f303 	lsr.w	r3, r2, r3
 80059aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059ac:	e018      	b.n	80059e0 <UART_SetConfig+0xc58>
 80059ae:	bf00      	nop
 80059b0:	08006128 	.word	0x08006128
 80059b4:	58024400 	.word	0x58024400
 80059b8:	03d09000 	.word	0x03d09000
 80059bc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80059c0:	4b24      	ldr	r3, [pc, #144]	; (8005a54 <UART_SetConfig+0xccc>)
 80059c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059c4:	e00c      	b.n	80059e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059c6:	4b24      	ldr	r3, [pc, #144]	; (8005a58 <UART_SetConfig+0xcd0>)
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059ca:	e009      	b.n	80059e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059d2:	e005      	b.n	80059e0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80059de:	bf00      	nop
    }

    if (pclk != 0U)
 80059e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d021      	beq.n	8005a2a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	4a1c      	ldr	r2, [pc, #112]	; (8005a5c <UART_SetConfig+0xcd4>)
 80059ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059f0:	461a      	mov	r2, r3
 80059f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	441a      	add	r2, r3
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a08:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	2b0f      	cmp	r3, #15
 8005a0e:	d909      	bls.n	8005a24 <UART_SetConfig+0xc9c>
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a16:	d205      	bcs.n	8005a24 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60da      	str	r2, [r3, #12]
 8005a22:	e002      	b.n	8005a2a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2200      	movs	r2, #0
 8005a44:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005a46:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3748      	adds	r7, #72	; 0x48
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a54:	03d09000 	.word	0x03d09000
 8005a58:	003d0900 	.word	0x003d0900
 8005a5c:	08006128 	.word	0x08006128

08005a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01a      	beq.n	8005b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b5e:	d10a      	bne.n	8005b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	605a      	str	r2, [r3, #4]
  }
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b098      	sub	sp, #96	; 0x60
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bb4:	f7fb fbdc 	bl	8001370 <HAL_GetTick>
 8005bb8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d12f      	bne.n	8005c28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f88e 	bl	8005cf8 <UART_WaitOnFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d022      	beq.n	8005c28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bf6:	653b      	str	r3, [r7, #80]	; 0x50
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c00:	647b      	str	r3, [r7, #68]	; 0x44
 8005c02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c08:	e841 2300 	strex	r3, r2, [r1]
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e6      	bne.n	8005be2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e063      	b.n	8005cf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d149      	bne.n	8005cca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f857 	bl	8005cf8 <UART_WaitOnFlagUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d03c      	beq.n	8005cca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c76:	e841 2300 	strex	r3, r2, [r1]
 8005c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1e6      	bne.n	8005c50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3308      	adds	r3, #8
 8005c88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f023 0301 	bic.w	r3, r3, #1
 8005c98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ca2:	61fa      	str	r2, [r7, #28]
 8005ca4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca6:	69b9      	ldr	r1, [r7, #24]
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	617b      	str	r3, [r7, #20]
   return(result);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e5      	bne.n	8005c82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e012      	b.n	8005cf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3758      	adds	r7, #88	; 0x58
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	4613      	mov	r3, r2
 8005d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d08:	e04f      	b.n	8005daa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d10:	d04b      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d12:	f7fb fb2d 	bl	8001370 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d302      	bcc.n	8005d28 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e04e      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d037      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2b80      	cmp	r3, #128	; 0x80
 8005d3e:	d034      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b40      	cmp	r3, #64	; 0x40
 8005d44:	d031      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f003 0308 	and.w	r3, r3, #8
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d110      	bne.n	8005d76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2208      	movs	r2, #8
 8005d5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 f839 	bl	8005dd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2208      	movs	r2, #8
 8005d66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e029      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d84:	d111      	bne.n	8005daa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f81f 	bl	8005dd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e00f      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69da      	ldr	r2, [r3, #28]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4013      	ands	r3, r2
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	bf0c      	ite	eq
 8005dba:	2301      	moveq	r3, #1
 8005dbc:	2300      	movne	r3, #0
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d0a0      	beq.n	8005d0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b095      	sub	sp, #84	; 0x54
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8005dfc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e6      	bne.n	8005ddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3308      	adds	r3, #8
 8005e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	4b1e      	ldr	r3, [pc, #120]	; (8005e9c <UART_EndRxTransfer+0xc8>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3308      	adds	r3, #8
 8005e2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e5      	bne.n	8005e0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d118      	bne.n	8005e7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f023 0310 	bic.w	r3, r3, #16
 8005e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6979      	ldr	r1, [r7, #20]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	613b      	str	r3, [r7, #16]
   return(result);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e6      	bne.n	8005e4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005e90:	bf00      	nop
 8005e92:	3754      	adds	r7, #84	; 0x54
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	effffffe 	.word	0xeffffffe

08005ea0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e027      	b.n	8005f06 <HAL_UARTEx_DisableFifoMode+0x66>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2224      	movs	r2, #36	; 0x24
 8005ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0201 	bic.w	r2, r2, #1
 8005edc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ee4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d101      	bne.n	8005f2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e02d      	b.n	8005f86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2224      	movs	r2, #36	; 0x24
 8005f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0201 	bic.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f850 	bl	800600c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e02d      	b.n	8006002 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2224      	movs	r2, #36	; 0x24
 8005fb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f812 	bl	800600c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006018:	2b00      	cmp	r3, #0
 800601a:	d108      	bne.n	800602e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800602c:	e031      	b.n	8006092 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800602e:	2310      	movs	r3, #16
 8006030:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006032:	2310      	movs	r3, #16
 8006034:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	0e5b      	lsrs	r3, r3, #25
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	0f5b      	lsrs	r3, r3, #29
 800604e:	b2db      	uxtb	r3, r3
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006056:	7bbb      	ldrb	r3, [r7, #14]
 8006058:	7b3a      	ldrb	r2, [r7, #12]
 800605a:	4911      	ldr	r1, [pc, #68]	; (80060a0 <UARTEx_SetNbDataToProcess+0x94>)
 800605c:	5c8a      	ldrb	r2, [r1, r2]
 800605e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006062:	7b3a      	ldrb	r2, [r7, #12]
 8006064:	490f      	ldr	r1, [pc, #60]	; (80060a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006066:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006068:	fb93 f3f2 	sdiv	r3, r3, r2
 800606c:	b29a      	uxth	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	7b7a      	ldrb	r2, [r7, #13]
 8006078:	4909      	ldr	r1, [pc, #36]	; (80060a0 <UARTEx_SetNbDataToProcess+0x94>)
 800607a:	5c8a      	ldrb	r2, [r1, r2]
 800607c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006080:	7b7a      	ldrb	r2, [r7, #13]
 8006082:	4908      	ldr	r1, [pc, #32]	; (80060a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006084:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006086:	fb93 f3f2 	sdiv	r3, r3, r2
 800608a:	b29a      	uxth	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006092:	bf00      	nop
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	08006140 	.word	0x08006140
 80060a4:	08006148 	.word	0x08006148

080060a8 <memset>:
 80060a8:	4402      	add	r2, r0
 80060aa:	4603      	mov	r3, r0
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d100      	bne.n	80060b2 <memset+0xa>
 80060b0:	4770      	bx	lr
 80060b2:	f803 1b01 	strb.w	r1, [r3], #1
 80060b6:	e7f9      	b.n	80060ac <memset+0x4>

080060b8 <__libc_init_array>:
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	4d0d      	ldr	r5, [pc, #52]	; (80060f0 <__libc_init_array+0x38>)
 80060bc:	4c0d      	ldr	r4, [pc, #52]	; (80060f4 <__libc_init_array+0x3c>)
 80060be:	1b64      	subs	r4, r4, r5
 80060c0:	10a4      	asrs	r4, r4, #2
 80060c2:	2600      	movs	r6, #0
 80060c4:	42a6      	cmp	r6, r4
 80060c6:	d109      	bne.n	80060dc <__libc_init_array+0x24>
 80060c8:	4d0b      	ldr	r5, [pc, #44]	; (80060f8 <__libc_init_array+0x40>)
 80060ca:	4c0c      	ldr	r4, [pc, #48]	; (80060fc <__libc_init_array+0x44>)
 80060cc:	f000 f818 	bl	8006100 <_init>
 80060d0:	1b64      	subs	r4, r4, r5
 80060d2:	10a4      	asrs	r4, r4, #2
 80060d4:	2600      	movs	r6, #0
 80060d6:	42a6      	cmp	r6, r4
 80060d8:	d105      	bne.n	80060e6 <__libc_init_array+0x2e>
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e0:	4798      	blx	r3
 80060e2:	3601      	adds	r6, #1
 80060e4:	e7ee      	b.n	80060c4 <__libc_init_array+0xc>
 80060e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ea:	4798      	blx	r3
 80060ec:	3601      	adds	r6, #1
 80060ee:	e7f2      	b.n	80060d6 <__libc_init_array+0x1e>
 80060f0:	08006158 	.word	0x08006158
 80060f4:	08006158 	.word	0x08006158
 80060f8:	08006158 	.word	0x08006158
 80060fc:	0800615c 	.word	0x0800615c

08006100 <_init>:
 8006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006102:	bf00      	nop
 8006104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006106:	bc08      	pop	{r3}
 8006108:	469e      	mov	lr, r3
 800610a:	4770      	bx	lr

0800610c <_fini>:
 800610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610e:	bf00      	nop
 8006110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006112:	bc08      	pop	{r3}
 8006114:	469e      	mov	lr, r3
 8006116:	4770      	bx	lr
